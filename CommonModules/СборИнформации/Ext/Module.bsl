Процедура СобратьДанныеОРазмере(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	ЗамерыВремени = Новый ТаблицаЗначений;
	ЗамерыВремени.Колонки.Добавить("ДатаЗамера");
	ЗамерыВремени.Колонки.Добавить("КлючеваяОперация");
	ЗамерыВремени.Колонки.Добавить("ВремяВыполнения");
	
	СобиратьДанныеОднимЗапросом = Настройка.ТаймаутПодключения>0 И Настройка.ТаймаутПодключения<1000;
	Если СобиратьДанныеОднимЗапросом Тогда
		ТекстЗапроса = ТекстыЗапросов.РазмерыТаблиц();	
		
		Попытка
			//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
			РазмерыТаблиц = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
			//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "РазмерыТаблиц");
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
		
	Иначе
		ТекстЗапроса = ТекстыЗапросов.СписокВсехТаблиц();	
		
		Попытка
			//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
			СписокВсехТаблиц = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			
			РазмерыТаблиц = Новый ТаблицаЗначений;
			РазмерыТаблиц.Колонки.Добавить("ИмяТаблицыSQL");
			РазмерыТаблиц.Колонки.Добавить("КоличествоСтрок");
			РазмерыТаблиц.Колонки.Добавить("РазмерДанных");
			РазмерыТаблиц.Колонки.Добавить("РазмерИндекса");
			Для каждого Строка Из СписокВсехТаблиц Цикл
				ТекстЗапроса = ТекстыЗапросов.РазмерОднойТаблицы(Строка.ИмяТаблицыSQL);	
				РазмерыТаблиц2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
				Для каждого Строка Из РазмерыТаблиц2 Цикл
					Если РазмерыТаблиц.НайтиСтроки(Новый Структура("ИмяТаблицыSQL",Строка.ИмяТаблицыSQL)).Количество()=0 Тогда
						новСтр = РазмерыТаблиц.Добавить();
						ЗаполнитьЗначенияСвойств(новСтр, Строка);
					КонецЕсли; 
				КонецЦикла; 
			КонецЦикла; 
			
			//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
			//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "РазмерыТаблиц поштучно");
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
		
	КонецЕсли; 
	
	ТекстЗапроса = ТекстыЗапросов.ДатаОбновленияСтатистики();	
	Статистика = Новый ТаблицаЗначений;
	Попытка
		Статистика = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Ложь);
		Возврат;
	КонецПопытки;
	
	
	РазмерыТаблиц.Свернуть("ИмяТаблицыSQL","РазмерДанных,РазмерИндекса,КоличествоСтрок");
	
	Структура = Новый Структура;
	Структура.Вставить("РазмерТаблиц", РазмерыТаблиц);                            
	Структура.Вставить("Статистика", Статистика);                            
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ЗамерыАПДЕКС", ЗамерыВремени);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 1);
	

КонецПроцедуры

Процедура СобратьДанныеОФрагментации(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	ЗамерыВремени = Новый ТаблицаЗначений;
	ЗамерыВремени.Колонки.Добавить("ДатаЗамера");
	ЗамерыВремени.Колонки.Добавить("КлючеваяОперация");
	ЗамерыВремени.Колонки.Добавить("ВремяВыполнения");
	
	
	СобиратьДанныеОднимЗапросом = Настройка.ТаймаутПодключения>0 И Настройка.ТаймаутПодключения<1000;
	Если СобиратьДанныеОднимЗапросом Тогда
		ТекстЗапроса = ТекстыЗапросов.ФрагментацияТаблиц();	
		
		Попытка
			//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
		 	ФрагментацияТаблиц = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
			//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "ФрагментацияТаблиц");
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при получении данных о фрагментации таблиц БД.", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
			
	Иначе
		ТекстЗапроса = ТекстыЗапросов.СписокВсехТаблиц();	
		
		Попытка
			//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
			СписокВсехТаблиц = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			
			ФрагментацияТаблиц = Новый ТаблицаЗначений;
			ФрагментацияТаблиц.Колонки.Добавить("ИмяТаблицыSQL");
			ФрагментацияТаблиц.Колонки.Добавить("ИмяИндекса");
			ФрагментацияТаблиц.Колонки.Добавить("РазмерДанных");
			ФрагментацияТаблиц.Колонки.Добавить("ПроцентФрагментации");
			Для каждого Строка Из СписокВсехТаблиц Цикл
				ТекстЗапроса = ТекстыЗапросов.ФрагментацияОднойТаблицы(Строка.ИмяТаблицыSQL);	
				ФрагментацияТаблиц2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
				Для каждого Строка Из ФрагментацияТаблиц2 Цикл
					
					Если ФрагментацияТаблиц.НайтиСтроки(Новый Структура("ИмяТаблицыSQL,ИмяИндекса",Строка.ИмяТаблицыSQL, Строка.ИмяИндекса)).Количество()=0 Тогда
						новСтр = ФрагментацияТаблиц.Добавить();
						ЗаполнитьЗначенияСвойств(новСтр, Строка);	
					КонецЕсли; 
					
				КонецЦикла; 
			КонецЦикла; 
			
			//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
			//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "ФрагментацияТаблиц поштучно");
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
		
	КонецЕсли; 

	
	ФрагментацияТаблиц.Свернуть("ИмяТаблицыSQL,ИмяИндекса","РазмерДанных,ПроцентФрагментации");
	
	
	Структура = Новый Структура;
	Структура.Вставить("ФрагментацияТаблиц", ФрагментацияТаблиц);
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ЗамерыАПДЕКС", ЗамерыВремени);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 1);
	

КонецПроцедуры

Процедура СобратьДанныеОМетаданных(Настройка) Экспорт
	
	Параметры1С = РаботаССервером1С.ПодключитьсяКБазе(Настройка);
	ТекущееСоединение = Параметры1С.Соединение;
	Если Параметры1С.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при подключении к 1С", Параметры1С.Ошибка, Ложь);
		Возврат;
	КонецЕсли;
	
	
	// ТаблицаХраненияБазыДанных
	Попытка
		мТаблицыХраненияCOM = ТекущееСоединение.ПолучитьСтруктуруХраненияБазыДанных(,Истина);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при получении структуры метаданных.", ОписаниеОшибки(), Ложь);
		Возврат;
	КонецПопытки;
	
	мТаблицаХранения = ПолучитьСтруктуруХраненияБазыДанных(,Истина);
	
	мТаблицаХраненияПоля = мТаблицаХранения[0].Поля;
	мТаблицаХраненияИндексы = мТаблицаХранения[0].Индексы;
	мТаблицаХраненияИндексыПоля = мТаблицаХранения[0].Индексы[0].Поля;
	
	мТаблицаХранения.Очистить();
	
	Для каждого Строка Из мТаблицыХраненияCOM Цикл
		НовСтр = мТаблицаХранения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка);
		
		мТаблицаХраненияПоля.Очистить();
		Для каждого СтрокаПоле Из Строка.Поля Цикл
			НовСтрПоле = мТаблицаХраненияПоля.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрПоле, СтрокаПоле);
		КонецЦикла; 
		НовСтр.Поля = мТаблицаХраненияПоля.Скопировать();;
		
		мТаблицаХраненияИндексы.Очистить();
		Для каждого СтрокаИндекс Из Строка.Индексы Цикл
			НовСтрИндексы = мТаблицаХраненияИндексы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрИндексы, СтрокаИндекс);
			
			мТаблицаХраненияИндексыПоля.Очистить();
			Для каждого СтрокаПолеИндекса Из СтрокаИндекс.Поля Цикл
				НовСтрПолеИндекса = мТаблицаХраненияИндексыПоля.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрПолеИндекса, СтрокаПолеИндекса);
			КонецЦикла; 
			НовСтрИндексы.Поля = мТаблицаХраненияИндексыПоля.Скопировать();
			
			
		КонецЦикла; 
		НовСтр.Индексы = мТаблицаХраненияИндексы.Скопировать();;
		
		
		
	КонецЦикла; 
	
	// АвтоматическиеБлокировки
	мИспользуютсяАвтоматическиеБлокировки = Ложь;
	Попытка
		мИспользуютсяАвтоматическиеБлокировки = (ТекущееСоединение.метаданные.РежимУправленияБлокировкойДанных <> ТекущееСоединение.Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию.Управляемый);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при получении информации об автоматических блокировках.", ОписаниеОшибки(), Ложь);
	КонецПопытки;
	
	// РежимСовместимости 
	мРежимСовместимости = Ложь;
	Попытка
		мРежимСовместимости = ТекущееСоединение.string(ТекущееСоединение.метаданные.РежимСовместимости);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при получении информации о режиме совместимости.", ОписаниеОшибки(), Ложь);
	КонецПопытки;
	
	// Имя конфигурации
	мИмяКонфигурации="";
	Попытка
		мИмяКонфигурации = ТекущееСоединение.метаданные.Имя;
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при получении информации.", ОписаниеОшибки(), Ложь);
	КонецПопытки;
	
	// Версия
	
	мВерсияКонфигурации="";
	Попытка
		мВерсияКонфигурации = ТекущееСоединение.метаданные.Версия;
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при получении информации.", ОписаниеОшибки(), Ложь);
	КонецПопытки;
	
	мВерсияПлатформы = "";
	мТипПроцессора = "";
	мПамять = 0;
	Попытка
		СисИнфо = ТекущееСоединение.NewObject("СистемнаяИнформация");
		мВерсияПлатформы = СисИнфо.ВерсияПриложения;
		мТипПроцессора = СисИнфо.Processor;
		мПамять = СисИнфо.RAM;
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при получении информации.", ОписаниеОшибки(), Ложь);
	КонецПопытки;
	
	мДанныеЖР = РаботаССервером1С.ПолучитьПараметрыЖурналаРегистрации(Настройка);
	
	Структура = Новый Структура;
	Структура.Вставить("ТаблицаХранения", мТаблицаХранения);
	Структура.Вставить("ИспользуютсяАвтоматическиеБлокировки", мИспользуютсяАвтоматическиеБлокировки);
	Структура.Вставить("РежимСовместимости", мРежимСовместимости);
	Структура.Вставить("ИмяКонфигурации", мИмяКонфигурации);
	Структура.Вставить("ВерсияПлатформы", мВерсияПлатформы);
	Структура.Вставить("ТипПроцессора", мТипПроцессора);
	Структура.Вставить("ВерсияКонфигурации", мВерсияКонфигурации);
	Структура.Вставить("Память", мПамять);
	Структура.Вставить("ДанныеЖР", мДанныеЖР);
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 2, Ложь);

КонецПроцедуры

Процедура СобратьДанныеОбИзмененияхКонфигурации(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
	КонецЕсли;
	
	ТекстЗапроса = ТекстыЗапросов.ИзмененияКонфигурации();
	
	Попытка
	 	ИзмененияКонфигурации = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
	КонецПопытки;
	
	Если ИзмененияКонфигурации.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ВремяИзменения = ИзмененияКонфигурации[0].Modified;
	
	Смещение = РаботаССУБД.ПолучитьСмещениеДат(Соединение);
				
	ВремяИзменения = ДобавитьМесяц(ВремяИзменения, -12*Смещение);

	Структура = Новый Структура;
	Структура.Вставить("ВремяИзменения", ВремяИзменения);
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	
	ДатаОтправки = ТекущаяДата();
	Параметр = "Данные об изменениях конфигурации";
	Хранилище = Новый ХранилищеЗначения(Структура, Новый СжатиеДанных(9));
	//// проверка кэширования
	//ЗаписьКэша = РегистрыСведений.КэшОтправленныхДанных.СоздатьМенеджерЗаписи();
	//ЗаписьКэша.База = Настройка.КлючБазыДляВебСервиса;
	//ЗаписьКэша.Параметр = Параметр;
	//ЗаписьКэша.Прочитать();
	//Если ЗаписьКэша.Выбран() Тогда
	//	КэшированнаяСтруктура = ЗаписьКэша.ХранилищеДанных.Получить();
	//	Если ЗначениеВСтрокуВнутр(КэшированнаяСтруктура)=ЗначениеВСтрокуВнутр(Структура) И ЗаписьКэша.ДатаОтправки+12*3600>ТекущаяДата() Тогда /// каждые 12 часов пусть всё равно шлёт повтор
	//		/// значит, данные уже отправлены в сервис
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	////РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 3);
	//ЗаписьКэша = РегистрыСведений.КэшОтправленныхДанных.СоздатьМенеджерЗаписи();
	//ЗаписьКэша.База = Настройка.КлючБазыДляВебСервиса;
	//ЗаписьКэша.Параметр = Параметр;
	//ЗаписьКэша.ДатаОтправки = ДатаОтправки;
	//ЗаписьКэша.ХранилищеДанных = Хранилище;
	//ЗаписьКэша.Записать(Истина);
КонецПроцедуры

Процедура СобратьДанныеОБекапах(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОБекапах();
	
	Попытка
	 	Бекапы = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;
	
	
	Если Бекапы.Количество() = 0 Тогда
		Бекапы.Добавить();
	КонецЕсли;

	Структура = Новый Структура;
	Структура.Вставить("Бекапы", Бекапы);
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);

КонецПроцедуры

Процедура СобратьДанныеОЗагрузкеПроцессора(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	ЗамерыВремени = Новый ТаблицаЗначений;
	ЗамерыВремени.Колонки.Добавить("ДатаЗамера");
	ЗамерыВремени.Колонки.Добавить("КлючеваяОперация");
	ЗамерыВремени.Колонки.Добавить("ВремяВыполнения");
	
		
	
	ТекстЗапроса = ТекстыЗапросов.ЗагруженностьПроцессора(1);
	
	Попытка
		//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
	 	ИспользованиеПроцессораПоминутно = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
		//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "ИспользованиеПроцессораПоминутно1");
	Исключение
		ТекстЗапроса = ТекстыЗапросов.ЗагруженностьПроцессора(2);
		Попытка
			//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
		 	ИспользованиеПроцессораПоминутно = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
			//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "ИспользованиеПроцессораПоминутно2");
		Исключение
			ТекстЗапроса = ТекстыЗапросов.ЗагруженностьПроцессора(2);
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	Структура = Новый Структура;
	Структура.Вставить("ИспользованиеПроцессораПоминутно", ИспользованиеПроцессораПоминутно);
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ЗамерыАПДЕКС", ЗамерыВремени);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);
	
КонецПроцедуры

// Сбор данных по нулевым итогам и 
// пересчет итогов по регистрам накопления
Процедура СборДанныхОНулевыхИтогах(Настройка, ПересчетИтогов = Ложь) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
		
	Параметры1С = РаботаССервером1С.ПодключитьсяКБазе(Настройка);
	ТекущееСоединение = Параметры1С.Соединение;
	Если Параметры1С.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при подключении к 1С", Параметры1С.Ошибка, Истина);
	КонецЕсли;
	
	ЗамерыВремени = Новый ТаблицаЗначений;
	//ЗамерыВремени.Колонки.Добавить("ДатаЗамера");     
	//ЗамерыВремени.Колонки.Добавить("КлючеваяОперация");
	//ЗамерыВремени.Колонки.Добавить("ВремяВыполнения");
	
	мТаблицыХранения = ТекущееСоединение.ПолучитьСтруктуруХраненияБазыДанных(,Истина);
	
	Смещение = РаботаССУБД.ПолучитьСмещениеДат(Соединение);
	
	СобиратьДанныеОднимЗапросом = Настройка.ТаймаутПодключения > 0 И Настройка.ТаймаутПодключения < 1000;
	Если СобиратьДанныеОднимЗапросом Тогда
		
		//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
	 	ТекстЗапроса = ТекстыЗапросов.НулевыеИтоги(мТаблицыХранения, Ложь);
		//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
		//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "НулевыеИтоги_ТекстЗапроса");
		
		
		Попытка
			//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
		 	НулевыеИтоги = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
			//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "НулевыеИтоги");
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
		
	Иначе
		
		//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
	 	Массив = ТекстыЗапросов.НулевыеИтоги(мТаблицыХранения, Истина);
		//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
		//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "НулевыеИтоги_ТекстЗапроса");
		
		Попытка
			//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
			
			НулевыеИтоги = Новый ТаблицаЗначений;
			НулевыеИтоги.Колонки.Добавить("ИмяТаблицыSQL");
			НулевыеИтоги.Колонки.Добавить("ПериодИтогов");
			НулевыеИтоги.Колонки.Добавить("КоличествоСтрок");
			НулевыеИтоги.Колонки.Добавить("КоличествоНулевыхСтрок");
			
			Для каждого ТекстЗапроса из Массив Цикл
				
			 	НулевыеИтоги2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			    Для каждого Строка Из НулевыеИтоги2 Цикл
					новСтр = НулевыеИтоги.Добавить();
					ЗаполнитьЗначенияСвойств(новСтр, Строка);
				КонецЦикла; 

			КонецЦикла; 
			//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
			//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "НулевыеИтоги_Поштучно");
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
		
		
	КонецЕсли; 
	
	
	Для каждого Строка ИЗ НулевыеИтоги Цикл
		Строка.ПериодИтогов = ДобавитьМесяц(Строка.ПериодИтогов, -12*Смещение);
	КонецЦикла;
	
	
	ТекстЗапроса = ТекстыЗапросов.ДиапазонДокументов(мТаблицыХранения);
	Смещение = РаботаССУБД.ПолучитьСмещениеДат(Соединение);
	
	Попытка
	 	ДиапазонДокументов = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;

	Для каждого Строка ИЗ ДиапазонДокументов Цикл
		Если Строка.ПериодС = NULL Тогда
			Строка.ПериодС = '00010101';
			Строка.ПериодПо = '00010101';
		КонецЕсли; 
		Строка.ПериодС = ДобавитьМесяц(Строка.ПериодС, -12*Смещение);
		Строка.ПериодПо = ДобавитьМесяц(Строка.ПериодПо, -12*Смещение);
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("НулевыеИтоги", НулевыеИтоги);
	НулевыеИтогиИтоговые = НулевыеИтоги.Скопировать();
	НулевыеИтогиИтоговые.Свернуть("Метаданные","КоличествоСтрок, КоличествоНулевыхСтрок");
	
	НулевыеИтогиИтоговые.Колонки.Добавить("Процент");
	
	Для каждого СтрокаТаблицы Из НулевыеИтогиИтоговые Цикл
	
		СтрокаТаблицы.Процент = ?(НЕ СтрокаТаблицы.КоличествоСтрок = 0, Окр(СтрокаТаблицы.КоличествоНулевыхСтрок * 100 / СтрокаТаблицы.КоличествоСтрок, 2), 0);
	
	КонецЦикла;
	
	НулевыеИтогиИтоговые.Сортировать("Процент Убыв");
	
	Если ПересчетИтогов Тогда
	
		Для каждого СтрокаТаблицы Из НулевыеИтогиИтоговые Цикл
			
			Если НЕ СтрНайти(СтрокаТаблицы.Метаданные, "РегистрНакопления.") = 0 И НЕ СтрокаТаблицы.КоличествоНулевыхСтрок = 0 Тогда
				
				ИмяРегистра = СтрЗаменить(СтрокаТаблицы.Метаданные, "РегистрНакопления.", "");
				РегистрМенеджер = ТекущееСоединение.РегистрыНакопления[ИмяРегистра];
				
				РегистрМенеджер.ПересчитатьИтоги();
				
				РегистрМенеджер.ПересчитатьТекущиеИтоги();
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Структура.Вставить("НулевыеИтогиИтоговые", НулевыеИтогиИтоговые);
	Структура.Вставить("ДиапазонДокументов", ДиапазонДокументов);
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ЗамерыАПДЕКС", ЗамерыВремени);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);
	
	
КонецПроцедуры

Процедура СобратьДанныеОЕженедельныхПараметрахСервера(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	Базы = Новый ТаблицаЗначений;
	ДоступноеМесто = Новый ТаблицаЗначений;
	ИнтенсивностьИспользования = Новый ТаблицаЗначений;
	ИспользованиеПроцессора = Новый ТаблицаЗначений;
	ИспользованиеКеша = Новый ТаблицаЗначений;
	Ожидания = Новый ТаблицаЗначений;
	Ноды = Новый ТаблицаЗначений;
	ТЗЗадачиАгента = Новый ТаблицаЗначений;
	ИнформацияОБазах = Новый ТаблицаЗначений;
	ПроблемыСПамятью = Новый ТаблицаЗначений;
	
	ЗамерыВремени = Новый ТаблицаЗначений;
	ЗамерыВремени.Колонки.Добавить("ДатаЗамера");
	ЗамерыВремени.Колонки.Добавить("КлючеваяОперация");
	ЗамерыВремени.Колонки.Добавить("ВремяВыполнения");
	
	СтатистикаСети = Новый ТаблицаЗначений;
	СтатистикаСети.Колонки.Добавить("Сервер1");
	СтатистикаСети.Колонки.Добавить("Сервер2");
	СтатистикаСети.Колонки.Добавить("Параметр");
	СтатистикаСети.Колонки.Добавить("Значение");	
	
	ТекстЗапроса = ТекстыЗапросов.Базы();
	
	Попытка			
		
		Попытка
		 	Базы = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	
		Если Базы.Количество() = 0 Тогда
			Базы.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
		
	// Доступное место
		
	ТекстЗапроса = ТекстыЗапросов.ДоступноеМесто();
	Попытка			
		Попытка
		 	ДоступноеМесто = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	
		Если ДоступноеМесто.Количество() = 0 Тогда
			ДоступноеМесто.Добавить();
		КонецЕсли;
		
		ДоступноеМесто.Свернуть("БазаДанных,Диск,РазмерМБ,ДоступноМБ,СвободноПроцент","");
			

	Исключение
		
	КонецПопытки;
		
		// Интенсивность использования
		
	ТекстЗапроса = ТекстыЗапросов.ИнтенсивностьИспользования();
	Попытка			
		Попытка
		 	ИнтенсивностьИспользования = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	
		Если ИнтенсивностьИспользования.Количество() = 0 Тогда
			ИнтенсивностьИспользования.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
		
		// РАСПРЕДЕЛЕНИЕ РЕСУРСОВ ПРОЦЕССОРА ПО БАЗАМ
		
	ТекстЗапроса = ТекстыЗапросов.ИспользованиеПроцессора();
	Попытка			
		Попытка
		 	ИспользованиеПроцессора = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	
		Если ИспользованиеПроцессора.Количество() = 0 Тогда
			ИспользованиеПроцессора.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
		
		// Использование кеша каждой базой
		
	ТекстЗапроса = ТекстыЗапросов.ИспользованиеКеша();
	Попытка			
		Попытка
		 	ИспользованиеКеша = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	
		Если ИспользованиеКеша.Количество() = 0 Тогда
			ИспользованиеКеша.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
		
		// ОЖИДАНИЯ
		
	ТекстЗапроса = ТекстыЗапросов.Ожидания(1);
	Попытка			
		Попытка
		 	Ожидания = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			Попытка
				ТекстЗапроса = ТекстыЗапросов.Ожидания(2);
				Ожидания = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Исключение
			    аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
				Возврат;
			КонецПопытки;
			
		КонецПопытки;
	
		Если Ожидания.Количество() = 0 Тогда
			Ожидания.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
		
		

	ТекстЗапроса = ТекстыЗапросов.Ноды();
		
	Попытка
		Попытка
		 	Ноды = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	
		Если Ноды.Количество() = 0 Тогда
			Ноды.Добавить();
		КонецЕсли;

	Исключение
	КонецПопытки;
		
	// ИНФОРМАЦИЯ О ЗАДАЧАХ АГЕНТА
	ТекстЗапроса = ТекстыЗапросов.ЗадачиАгента();
	Попытка			
		Попытка
		 	ТЗЗадачиАгента = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	
			Если ТЗЗадачиАгента.Количество() = 0 Тогда
				ТЗЗадачиАгента.Добавить();
			КонецЕсли;

	//	КонецЕсли;


	Исключение
		
	КонецПопытки;
		
		// ИнформацияОБазах
		
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОБазах();
	Попытка			
		Попытка
		 	ИнформацияОБазах = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	
		Если ИнформацияОБазах.Количество() = 0 Тогда
			ИнформацияОБазах.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
	
	
	//Проблемы с памятью
	
	ТекстЗапроса = ТекстыЗапросов.ПроблемыСПамятью();
	Попытка			
		Попытка
		 	ПроблемыСПамятью = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;

	Исключение
		
	КонецПопытки;
	
	// Статистика команды PATHPING
	Попытка
		Попытка 
			СтатистикаPATHPING = СтатистикаКомандыPATHPING(Настройка);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Не удалось определить статистику выполнения команды PATHPING", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
		НовСтрока = СтатистикаСети.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтатистикаPATHPING);
		НовСтрока.Параметр = "Количество прыжков (pathping)";
		НовСтрока.Значение = СтатистикаPATHPING.КоличествоПрыжков;

		НовСтрока = СтатистикаСети.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтатистикаPATHPING);
		НовСтрока.Параметр = "Процент потерь (pathping)";
		НовСтрока.Значение = СтатистикаPATHPING.ПроцентПотерь;
		
	Исключение
	КонецПопытки;
	
	// Сетевые параметры netsh
	Попытка
		Попытка 
			СетевыеПараметрыNetsh = СетевыеПараметрыNetsh(Настройка);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Не удалось определить сетевые параметры netsh", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
		НовСтрока = СтатистикаСети.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СетевыеПараметрыNetsh);
		НовСтрока.Параметр = "Уровень автонастройки окна получения (netsh)";
		НовСтрока.Значение = СетевыеПараметрыNetsh.УровеньАвтонастройки;
		
	Исключение
	КонецПопытки;
	
		
	Структура = Новый Структура;
	Структура.Вставить("Базы", Базы);
	Структура.Вставить("ДоступноеМесто", ДоступноеМесто);
	Структура.Вставить("ИнтенсивностьИспользования", ИнтенсивностьИспользования);
	Структура.Вставить("ИспользованиеПроцессора", ИспользованиеПроцессора);
	Структура.Вставить("ИспользованиеКеша", ИспользованиеКеша);
	//Структура.Вставить("Ожидания", Ожидания);  // собирается отдельным заданием
	Структура.Вставить("NUMA", Ноды);
	Структура.Вставить("ЗадачиАгента", ТЗЗадачиАгента);
	Структура.Вставить("БазыИнформация", ИнформацияОБазах);
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ЗамерыАПДЕКС", ЗамерыВремени);
	Структура.Вставить("ПроблемыСПамятью",ПроблемыСПамятью);
	Структура.Вставить("СтатистикаСети", СтатистикаСети);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);	
	
КонецПроцедуры

Процедура СобратьДанныеОЕженедельныхПараметрахБазы(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	ТаблицыВБуфферномПуле = Новый ТаблицаЗначений;
	БольшиеТаблицы = Новый ТаблицаЗначений;
	
	ЗамерыВремени = Новый ТаблицаЗначений;
	ЗамерыВремени.Колонки.Добавить("ДатаЗамера");
	ЗамерыВремени.Колонки.Добавить("КлючеваяОперация");
	ЗамерыВремени.Колонки.Добавить("ВремяВыполнения");
	
	
	// РАЗМЕЩЕНИЕ ТАБЛИЦ В БУФФЕРНОМ ПУЛЕ
		
	ТекстЗапроса = ТекстыЗапросов.РазмещениеВБуфферномПуле(1);
	Попытка			
		Попытка
		 	ТаблицыВБуфферномПуле = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			ТекстЗапроса = ТекстыЗапросов.РазмещениеВБуфферномПуле(2);
	        Попытка
			 	ТаблицыВБуфферномПуле = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Исключение
				аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
				Возврат;
			КонецПопытки;
		КонецПопытки;
	
		Если ТаблицыВБуфферномПуле.Количество() = 0 Тогда
			ТаблицыВБуфферномПуле.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
		
	// Большие таблицы
		
	ТекстЗапроса = ТекстыЗапросов.БольшиеТаблицы(1);
	Попытка			
		Попытка
		 	БольшиеТаблицы = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			ТекстЗапроса = ТекстыЗапросов.БольшиеТаблицы(2);
			Попытка 
				БольшиеТаблицы = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Исключение
				аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
				Возврат;
			Конецпопытки
		КонецПопытки;
	
		Если БольшиеТаблицы.Количество() = 0 Тогда
			БольшиеТаблицы.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
		
			
	Структура = Новый Структура;
	Структура.Вставить("ТаблицыВБуфферномПуле", ТаблицыВБуфферномПуле);
	Структура.Вставить("БольшиеТаблицы", БольшиеТаблицы);
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ЗамерыАПДЕКС", ЗамерыВремени);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);
	
	
	
КонецПроцедуры

Процедура СобратьДанныеОЕжедневныхПараметрахСервера(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	ЗамерыВремени = Новый ТаблицаЗначений;
	ЗамерыВремени.Колонки.Добавить("ДатаЗамера");
	ЗамерыВремени.Колонки.Добавить("КлючеваяОперация");
	ЗамерыВремени.Колонки.Добавить("ВремяВыполнения");
	
	ДанныеОСервере = Новый ТаблицаЗначений;
	ДанныеОСервере.Колонки.Добавить("Параметр");
	ДанныеОСервере.Колонки.Добавить("Значение");
	
	ФлагиТрассировкиТЗ = Новый ТаблицаЗначений;
	ФлагиТрассировкиТЗ.Колонки.Добавить("TraceFlag");
	ФлагиТрассировкиТЗ.Колонки.Добавить("Status");
	ФлагиТрассировкиТЗ.Колонки.Добавить("Global");
	ФлагиТрассировкиТЗ.Колонки.Добавить("Session");
	
	
	Дампы = Новый ТаблицаЗначений;
	ЗапущенныеСлужбы = Новый ТаблицаЗначений;
	ИспользованиеИндексов = Новый ТаблицаЗначений;
	НастройкиСервера = Новый ТаблицаЗначений;
	
	ОшибкиЛога = Новый ТаблицаЗначений;
	ОшибкиЛога.Колонки.Добавить("LogDate");
	ОшибкиЛога.Колонки.Добавить("ProcessInfo");
	ОшибкиЛога.Колонки.Добавить("Text");
	
	СтатистикаСети = Новый ТаблицаЗначений;
	СтатистикаСети.Колонки.Добавить("Сервер1");
	СтатистикаСети.Колонки.Добавить("Сервер2");
	СтатистикаСети.Колонки.Добавить("Параметр");
	СтатистикаСети.Колонки.Добавить("Значение");
	

	// СТАТИЧЕСКИЕ ПАРАМЕТРЫ СЕРВЕРА СУБД
	
	ТекстЗапроса = ТекстыЗапросов.ПараметрыСервера(1);
		
	Попытка
	 	ДанныеОСервере1 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Если ДанныеОСервере1=Неопределено Тогда ВызываемИсключение=0/0; КонецЕсли;
	Исключение
		ТекстЗапроса = ТекстыЗапросов.ПараметрыСервера(2);
		Попытка
	 	ДанныеОСервере1 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Если ДанныеОСервере1=Неопределено Тогда ВызываемИсключение=0/0; КонецЕсли;
		Исключение
			ТекстЗапроса = ТекстыЗапросов.ПараметрыСервера(3);
			Попытка
			 	ДанныеОСервере1 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Исключение
				аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
				Возврат;
			КонецПопытки;
		
		КонецПопытки;
	
	КонецПопытки;

	Если ДанныеОСервере1.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере1[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Количество ядер";
		НовСтрока.Значение = ТекСтрока[0]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Количество ядер (с гипертрейдингом)";
		НовСтрока.Значение = ТекСтрока[1]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Количество планировщиков";
		НовСтрока.Значение = ТекСтрока[2]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Максимальное количество потоков";
		НовСтрока.Значение = ТекСтрока[3]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Оперативная память, МБ";
		НовСтрока.Значение = ТекСтрока[4]; 
		Если ТекСтрока[5]<>-1 Тогда
			НовСтрока = ДанныеОСервере.Добавить();
			НовСтрока.Параметр = "Виртуализация";
			НовСтрока.Значение = ТекСтрока[5]; 
		КонецЕсли; 
		
	КонецЕсли;
		
	// АПТАЙМ СЕРВЕРА СУБД
	ТекстЗапроса = ТекстыЗапросов.АптаймСервера(1);
				
	Попытка
	 	ДанныеОСервере2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		ТекстЗапроса = ТекстыЗапросов.АптаймСервера(2);
		Попытка
		 	ДанныеОСервере2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;
	КонецПопытки;


	Если ДанныеОСервере2.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере2[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Время запуска сервиса";
		НовСтрока.Значение = ТекСтрока[0]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Аптайм (часов)";
		НовСтрока.Значение = ТекСтрока[1]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Аптайм (дней)";
		НовСтрока.Значение = ТекСтрока[2]; 
			
	КонецЕсли;


	// ОБЩАЯ ИНФОРМАЦИЯ О СЕРВЕРЕ
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(1);
	Попытка
	 	ДанныеОСервере3 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;

	Если ДанныеОСервере3.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере3[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Имя сервера";
		НовСтрока.Значение = ТекСтрока[0]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Версия сервера и ОС";
		НовСтрока.Значение = ТекСтрока[1]; 
			
	КонецЕсли;

	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(2);
				
	Попытка
	 	ДанныеОСервере4 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;

	Если ДанныеОСервере4.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере4[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Дата установки сервера СУБД";
		НовСтрока.Значение = ТекСтрока[1]; 
			
	КонецЕсли;

	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(3);
				
	Попытка
	 	ДанныеОСервере5 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;
	
	Если ДанныеОСервере5.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере5[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "MachineName";
		НовСтрока.Значение = ТекСтрока[0]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Instance";
		НовСтрока.Значение = ТекСтрока[2]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "IsClustered";
		НовСтрока.Значение = ТекСтрока[3]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Имя компьютера в NetBios";
		НовСтрока.Значение = ТекСтрока[4]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Edition";
		НовСтрока.Значение = ТекСтрока[5]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "ProductLevel";
		НовСтрока.Значение = ТекСтрока[6]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "ProductVersion";
		НовСтрока.Значение = ТекСтрока[7]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "ProcessID";
		НовСтрока.Значение = ТекСтрока[8]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Collation";
		НовСтрока.Значение = ТекСтрока[9]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "IsFullTextInstalled";
		НовСтрока.Значение = ТекСтрока[10]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "IsIntegratedSecurityOnly";
		НовСтрока.Значение = ТекСтрока[11]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "IsHadrEnabled";
		НовСтрока.Значение = ТекСтрока[12]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "HadrManagerStatus";
		НовСтрока.Значение = ТекСтрока[13]; 
			
	КонецЕсли;

	
	// ИНФОРМАЦИЯ О ВИНДОВС
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(4);
	Попытка			
		Попытка
		 	ДанныеОСервере6 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;

		
	Если ДанныеОСервере6.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере6[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "windows_release";
		НовСтрока.Значение = ТекСтрока[0]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "windows_service_pack_level";
		НовСтрока.Значение = ТекСтрока[1]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "windows_sku";
		НовСтрока.Значение = ТекСтрока[2]; 
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "os_language_version";
		НовСтрока.Значение = ТекСтрока[3]; 
			
	КонецЕсли;


	Исключение
		
	КонецПопытки;
	
	
	// ОПисание процессора из реестра
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(5);
	Попытка
	 	ДанныеОСервере7 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;

	Если ДанныеОСервере7.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере7[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Процессор";
		НовСтрока.Значение = ТекСтрока[1]; 
			
	КонецЕсли;

	
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(6);
				
	Попытка
	 	ДанныеОСервере8 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;

	Если ДанныеОСервере8.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере8[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Manufacturer";
		НовСтрока.Значение = ТекСтрока[2]; 
			
	КонецЕсли;

	
	// Отсутсвтующие индексы
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(7);
				
	Попытка
	 	ДанныеОСервере9 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;

	Если ДанныеОСервере9.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере9[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Количество рекомендумеых индексов";
		НовСтрока.Значение = ТекСтрока[1]; 
			
	КонецЕсли;

	// Режим производетильности
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(8);
				
	Попытка
	 	ДанныеОСервере10 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;

	Если ДанныеОСервере10.Количество()=1 Тогда
		ТекСтрока = ДанныеОСервере10[0];
		Если ТекСтрока[0] = "381b4222-f694-41f0-9685-ff5bb260df2e" Тогда
			НовСтрока = ДанныеОСервере.Добавить();
			НовСтрока.Параметр = "Режим производительности";
			НовСтрока.Значение = "Balanced"; 	
		ИначеЕсли ТекСтрока[0] = "8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c"
			или ТекСтрока[0] = "c37e3d38-5e78-41ec-bebe-ab664c826ea0" Тогда
			НовСтрока = ДанныеОСервере.Добавить();
			НовСтрока.Параметр = "Режим производительности";
			НовСтрока.Значение = "High performance"; 	
		ИначеЕсли ТекСтрока[0] = "a1841308-3541-4fab-bc81-f71556f20b4a" Тогда
			НовСтрока = ДанныеОСервере.Добавить();
			НовСтрока.Параметр = "Режим производительности";
			НовСтрока.Значение = "Power saver"; 	
		КонецЕсли; 
		
	КонецЕсли;
	
	// DFSS EnableFairShare
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(9);
	Попытка
		Попытка
			ДанныеОСервере9 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
		ТекСтрока = ДанныеОСервере9[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "DFSS EnableFairShare";
		НовСтрока.Значение = ТекСтрока[1]; 
		
	Исключение
	КонецПопытки;

	// DFSS EnableCpuQuota 
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(10);
	Попытка
		Попытка
			ДанныеОСервере10 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
		ТекСтрока = ДанныеОСервере10[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "DFSS EnableCpuQuota";
		НовСтрока.Значение = ТекСтрока[1]; 
		
	Исключение
	КонецПопытки;
	
	// Использование SharedMemory
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(11);
	Попытка
		Попытка
			ДанныеОСервере11 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
		ИспользуетсяSharedMemory = Ложь;
		МассивСтрок = ДанныеОСервере11.НайтиСтроки(Новый Структура("net_transport","Shared memory"));
		Для Каждого СтрокаТЗ из ДанныеОСервере11 Цикл
			Если Найти(СтрокаТЗ.program_name,"1CV8") > 0 Тогда
				ИспользуетсяSharedMemory = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Протокол Shared memory";
		НовСтрока.Значение = ?(ИспользуетсяSharedMemory, "Используется", "Не используется"); 
		
	Исключение
	КонецПопытки;
	
	// Контроль учетных записей и применение политики UAC
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОСервере(12);
	Попытка
		Попытка
			ДанныеОСервере12 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
		ТекСтрока = ДанныеОСервере12[0];
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "EnableLUA";
		НовСтрока.Значение = ТекСтрока[1]; 
		
	Исключение
	КонецПопытки;
	
	
	// Время копирования 100 Мб между сервером 1С и сервером СУБД
	Попытка
		Попытка 
			ВремяКопирования = ВыполнитьКопированиеФайлаНаСерверСУБД(Настройка);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Не удалось выполнить копирование файла на сервер СУБД", ОписаниеОшибки(), Истина);
		КонецПопытки;
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Время копирования 100 МБ на сервер СУБД";
		НовСтрока.Значение = ВремяКопирования; 
	Исключение
	КонецПопытки;
	
	// Версия протокола IP
	Попытка
		Попытка 
			ВерсияПротокола = ОпределитьВерсиюПротоколаIP(Настройка);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Не удалось определить версию протокола IP на сервере 1С", ОписаниеОшибки(), Истина);
		КонецПопытки;
		НовСтрока = ДанныеОСервере.Добавить();
		НовСтрока.Параметр = "Версия протокола IP";
		НовСтрока.Значение = ВерсияПротокола; 
	Исключение
	КонецПопытки;
	
	// Статистика команды PING
	Попытка
		Попытка 
			СтатистикаPING = СтатистикаКомандыPING(Настройка);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Не удалось определить статистику выполнения команды PING", ОписаниеОшибки(), Истина);
		КонецПопытки;
		НовСтрока = СтатистикаСети.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтатистикаPING);
		НовСтрока.Параметр = "Среднее время отклика (ping)";
		НовСтрока.Значение = СтатистикаPING.СреднееВремяОтклика;
	Исключение
	КонецПопытки;
	
	
	//////////////////////////////////////////////////////////
	// ДАЛЕЕ ПОШЛИ ТАБЛИЧНЫЕ ДАННЫЕ
	
	
	// Настройки сервера
	
	ТекстЗапроса = ТекстыЗапросов.ИнформацияОПараметрахСервера();
	Попытка
	 	НастройкиСервера = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		Возврат;
	КонецПопытки;


	// ЗАПУЩЕННЫЕ СЛУЖБЫ 
	
	ТекстЗапроса = ТекстыЗапросов.ЗапущенныеСлужбы();
	Попытка			
		Попытка
		 	ЗапущенныеСлужбы = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;


		Если ЗапущенныеСлужбы.Количество() = 0 Тогда
			ЗапущенныеСлужбы.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;

	
	// ТРАССИРОВКИ
	
	ТекстЗапроса = ТекстыЗапросов.ФлагиТрассировки();
	Попытка			
		Попытка
		 	ФлагиТрассировки = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;

		Для каждого Строка ИЗ ФлагиТрассировки Цикл
			НовСтрока=  ФлагиТрассировкиТЗ.Добавить();			
			НовСтрока.TraceFlag = Строка[0];
			НовСтрока.Status = Строка[1];
			НовСтрока.Global = Строка[2];
			НовСтрока.Session = Строка[3];
						
		КонецЦикла;
		
		Если ФлагиТрассировкиТЗ.Количество() = 0 Тогда
			ФлагиТрассировкиТЗ.Добавить();
		КонецЕсли;


	Исключение
		
	КонецПопытки;
	
	// ДАМПЫ
	
	ТекстЗапроса = ТекстыЗапросов.Дампы();
	Попытка			
		Попытка
		 	Дампы = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;

				
		Если Дампы.Количество() = 0 Тогда
			Дампы.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
	
	// Ошибки в логе
	
	Попытка			
		Попытка
			//ВремяНачала = ЗамерыАПДЕКС.ТочноеВремя();
	 		
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("long I/O");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 1%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 2%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 3%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 4%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 5%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 6%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 7%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 8%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("repaired 9%");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("Stack Dump being");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("system error");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("is full");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("fatal");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("many virtual log");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("cancelled by user or timed out");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("Using 20 Logical Processors Based on SQL Server Licensing");
			ОшибкиЛога2 = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Для каждого Строка Из ОшибкиЛога2 Цикл
				НовСтрока = ОшибкиЛога.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			КонецЦикла; 
			
			мСтрокиКУдалению = Новый массив;
			Для каждого Строка Из ОшибкиЛога Цикл
				Если Строка.LogDate<ТекущаяДата()-24*60*60 Тогда
					мСтрокиКУдалению.Добавить(Строка);
				КонецЕсли; 
			КонецЦикла; 
			
			Для каждого Строка Из мСтрокиКУдалению Цикл
				ОшибкиЛога.Удалить(Строка);
			КонецЦикла; 
			
			//ВремяОкончания = ЗамерыАПДЕКС.ТочноеВремя();
			//ЗамерыАПДЕКС.ДобавитьЗамер(ЗамерыВремени, ВремяНачала, ВремяОкончания, "ОшибкиЛога");
			ТекстЗапроса = ТекстыЗапросов.ОшибкиВЛоге("I/O error");
			
			
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;

				
		Если ОшибкиЛога.Количество() = 0 Тогда
			ОшибкиЛога.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
	
	СтрокаВерсииСУБД = ДанныеОСервере.Найти("ProductVersion", "Параметр");
	
	Если СтрокаВерсииСУБД<>Неопределено Тогда
		СтрокаВерсииСУБД = СтрЗаменить(СтрокаВерсииСУБД.Значение,".", Символы.ПС);
		ВерсияСУБДМажор = Число(СтрПолучитьСтроку(СтрокаВерсииСУБД,1));
		ВерсияСУБДМинор = Число(СтрПолучитьСтроку(СтрокаВерсииСУБД,3));
		Если ВерсияСУБДМажор=11 И ВерсияСУБДМинор>=6020			/// 11.0.6020.0 = SQL2012 SP4
			ИЛИ ВерсияСУБДМажор=13 И ВерсияСУБДМинор>=4001		/// 13.0.4001.0 = SQL2016 SP1
			ИЛИ ВерсияСУБДМажор>=14								/// 14.0.1000.X = SQL 2017
			Тогда
			/// 2018-03 Юхтимовский: получаем информацию об instant file initialization и lock pages in memory
			ТЗСисИнфо = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, "select * from sys.dm_os_sys_info");
			Попытка
				Если ТЗСисИнфо.Колонки.Найти("sql_memory_model")<>Неопределено Тогда
					МодельSQL = ТЗСисИнфо[0].sql_memory_model;
					НоваяСтрока = НастройкиСервера.Добавить();
					НоваяСтрока.Параметр = "sql_memory_model";
					НоваяСтрока.Значение = МодельSQL;
					НоваяСтрока.ИспользуемоеЗначение = МодельSQL;
					НоваяСтрока.Описание = "Указывает модель памяти, используемую сервером SQL Server для выделения памяти. ";
					Если МодельSQL = 1 Тогда
						НоваяСтрока.Описание=НоваяСтрока.Описание+Символы.ПС+"1 = модель обычной памяти, Conventional Memory Model";
					ИначеЕсли МодельSQL = 2 Тогда
						НоваяСтрока.Описание=НоваяСтрока.Описание+Символы.ПС+"2 = блокировка страниц в памяти, Lock Pages in Memory";
					ИначеЕсли МодельSQL = 3 Тогда
						НоваяСтрока.Описание=НоваяСтрока.Описание+Символы.ПС+"3 = большие страницы в памяти, Large Pages in Memory";
					КонецЕсли;
					МодельSQLОписание = ТЗСисИнфо[0].sql_memory_model_desc;
					НоваяСтрока = НастройкиСервера.Добавить();
					НоваяСтрока.Параметр = "sql_memory_model_desc";
					НоваяСтрока.Значение = МодельSQLОписание;
					НоваяСтрока.ИспользуемоеЗначение = МодельSQLОписание;
					НоваяСтрока.Описание = "Указывает модель памяти, используемую сервером SQL Server для выделения памяти. ";
					Если МодельSQL = 1 Тогда
						НоваяСтрока.Описание=НоваяСтрока.Описание+Символы.ПС+"CONVENTIONAL = SQL Server использует модель обычной памяти для выделения памяти. Это модель памяти по умолчанию для службы SQL Server.";
					ИначеЕсли МодельSQL = 2 Тогда
						НоваяСтрока.Описание=НоваяСтрока.Описание+Символы.ПС+"LOCK_PAGES = SQL server использует блокировку страниц в памяти для выделения памяти.";
					ИначеЕсли МодельSQL = 3 Тогда
						НоваяСтрока.Описание=НоваяСтрока.Описание+Символы.ПС+"LARGE_PAGES = SQL Server SQL Server использует распределитель больших страниц для выделения памяти, только в редакции SQL Enterprise edition, и при включении 834 флага трассировки.";
					КонецЕсли;
					
				Иначе
					/// не получилось по-нормальному - пойдём другим путём
				КонецЕсли;	
			Исключение
				;
			КонецПопытки;
			
			Попытка
				ТЗ_МгновеннаяИнициализация = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, "select instant_file_initialization_enabled from sys.dm_server_services where servicename not like 'SQL Server Agent%'");
				МгновеннаяИнициализация = ТЗ_МгновеннаяИнициализация[0].instant_file_initialization_enabled;
				НоваяСтрока = НастройкиСервера.Добавить();
				НоваяСтрока.Параметр = "instant_file_initialization_enabled";
				НоваяСтрока.Значение = МгновеннаяИнициализация;
				НоваяСтрока.ИспользуемоеЗначение = МгновеннаяИнициализация;
				НоваяСтрока.Описание = "Указывает, включена ли мгновенная инициализация файлов для службы SQL Server. ";
				Если МгновеннаяИнициализация = "Y" Тогда
					НоваяСтрока.Описание=НоваяСтрока.Описание+Символы.ПС+"Y = мгновенная инициализация файлов для службы SQL Server включена.";
				ИначеЕсли МгновеннаяИнициализация = "N" Тогда
					НоваяСтрока.Описание=НоваяСтрока.Описание+Символы.ПС+"N = мгновенная инициализация файлов для службы SQL Server отключена.";
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	
	// Информация о сервере 1С
	ПараметрыСервера1СМассив = СборИнформацииКлиентСервер.ПараметрыКомпьютера(Истина); // Структуры завернутые в массив
	ПараметрыСервера1С = Новый ТаблицаЗначений;
	ПараметрыСервера1С.Колонки.Добавить("Параметр");
	ПараметрыСервера1С.Колонки.Добавить("Значение");
	ПараметрыСервера1С.Колонки.Добавить("Клиент1С");
	Для Каждого Параметр из ПараметрыСервера1СМассив Цикл
		НоваяСтрока = ПараметрыСервера1С.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметр);
	КонецЦикла;
	
	Структура = Новый Структура;
	Структура.Вставить("ДанныеОСервере", ДанныеОСервере);
	Структура.Вставить("Дампы", Дампы);
	Структура.Вставить("ЗапущенныеСлужбы", ЗапущенныеСлужбы);
	Структура.Вставить("НастройкиСервера", НастройкиСервера);
	Структура.Вставить("Трассировки", ФлагиТрассировкиТЗ);
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ОшибкиЛога", ОшибкиЛога);
	Структура.Вставить("ЗамерыАПДЕКС", ЗамерыВремени);
	Структура.Вставить("СтатистикаСети", СтатистикаСети);
	Структура.Вставить("ПараметрыСервера1С", ПараметрыСервера1С);
	
	Настройка.Результат = Структура;
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);
		
КонецПроцедуры

Процедура СобратьДанныеОбИндексах(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
	КонецЕсли;
	
	ЗамерыВремени = Новый ТаблицаЗначений;
	ЗамерыВремени.Колонки.Добавить("ДатаЗамера");
	ЗамерыВремени.Колонки.Добавить("КлючеваяОперация");
	ЗамерыВремени.Колонки.Добавить("ВремяВыполнения");
	
	ИспользованиеИндексов = Новый ТаблицаЗначений;
	РекомендуемыеИндексы  = Новый ТаблицаЗначений;
	
	// ИСПОЛЬЗОВАНИЕ ИНДЕКСОВ
		
	ТекстЗапроса = ТекстыЗапросов.ИспользованиеИндексов();
	Попытка			
		Попытка
		 	ИспользованиеИндексов = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			Возврат;
		КонецПопытки;

 				
		Если ИспользованиеИндексов.Количество() = 0 Тогда
			ИспользованиеИндексов.Добавить();
		КонецЕсли;

	Исключение
		
	КонецПопытки;
	
	ТекстЗапроса = ТекстыЗапросов.РекоменуемыеИндексы(1);
	Попытка
		Попытка
		 	РекомендуемыеИндексы = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			ТекстЗапроса = ТекстыЗапросов.РекоменуемыеИндексы(2);
			Попытка
			 	РекомендуемыеИндексы = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Исключение
				аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
			КонецПопытки;
		КонецПопытки;
		
		Если РекомендуемыеИндексы.Количество() = 0 Тогда
			РекомендуемыеИндексы.Добавить();
		КонецЕсли;
	Исключение
		
	Конецпопытки;
	
	Структура = Новый Структура;
	Структура.Вставить("РекомендуемыеИндексы", РекомендуемыеИндексы);
	Структура.Вставить("ИспользованиеИндексов", ИспользованиеИндексов);
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ЗамерыАПДЕКС", ЗамерыВремени);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);

КонецПроцедуры

Процедура СобратьДанныеОбОжиданиях(Настройка, СписокУчетныхЗаписей) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Ложь);
		Возврат;
	КонецЕсли;
	
	Ожидания = Новый ТаблицаЗначений;
	
	ТекстЗапроса = ТекстыЗапросов.Ожидания(1);
	Попытка			
		Попытка
			Ожидания = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			Попытка
				ТекстЗапроса = ТекстыЗапросов.Ожидания(2);
				Ожидания = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			Исключение
				аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
				Возврат;
			КонецПопытки;
			
		КонецПопытки;
		
		Если Ожидания.Количество() = 0 Тогда
			Ожидания.Добавить();
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	Ожидания.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	// определяем период накопления статитстики 
	Период = ТекущаяДата();
	
	Ожидания.ЗаполнитьЗначения(Период, "Период");
	
	Структура = Новый Структура;
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("Ожидания", Ожидания);
	
	Для Каждого УчетнаяЗапись Из СписокУчетныхЗаписей Цикл
		//РаботаСВебСервисами.ВызватьВебСервис(УчетнаяЗапись, Структура, 4);
	КонецЦикла;
	
	// сбросим статистику
	ТекстЗапроса = ТекстыЗапросов.ОчиститьСтатистикуОжиданий();
	Попытка
		Ожидания = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
	Исключение
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Ложь);
	КонецПопытки;
	
КонецПроцедуры

Процедура СобратьДанныеОРегламентныхЗаданиях(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
	КонецЕсли;
	
	ДанныеРегламентныхЗаданий = Новый ТаблицаЗначений;
	ДанныеРегламентныхЗаданий.Колонки.Добавить("ИмяТаблицы");	
	ДанныеРегламентныхЗаданий.Колонки.Добавить("КоличествоСтрок");	
	
	// Данные регламентных заданий
		
	Попытка
		
		// Имена таблиц
		ТекстЗапроса = 
		"select * 
		|from information_schema.tables as tables 
		|where tables.table_name like '%_ScheduledJobs%'";
			
		Попытка
			ИменаТаблиц = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
		// количество строк
		ТекстЗапроса = "";
		ШаблонЗапроса = "select '%ИмяТаблицы%', count(*) from %ИмяТаблицы%";
		Для Каждого СтрокаТаблица из ИменаТаблиц Цикл
			ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса),"", Символы.ПС + "UNION ALL" + Символы.ПС);
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ШаблонЗапроса, "%ИмяТаблицы%", СтрокаТаблица.TABLE_NAME);
		КонецЦикла;
		
		Если ТекстЗапроса = "" Тогда Возврат; КонецЕсли;	// если регламентных заданий вообще ни одного нет
		
		Попытка
			тзКоличествоСтрок = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
		Для Каждого СтрокаКоличество Из тзКоличествоСтрок Цикл
			НоваяСтрока = ДанныеРегламентныхЗаданий.Добавить();
			НоваяСтрока.ИмяТаблицы = СтрокаКоличество[0]; 
			НоваяСтрока.КоличествоСтрок = СтрокаКоличество[1]; 			
		КонецЦикла;
		
	Исключение
		
	КонецПопытки;
	
	Структура = Новый Структура;
	Структура.Вставить("ДанныеРегламентныхЗаданий", ДанныеРегламентныхЗаданий);
	//Структура.Вставить("БазаКлиента", ОбщегоНазначения.ПолучитьПредставлениеБазы(Настройка));
	Структура.Вставить("Настройка", Настройка);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);

КонецПроцедуры

Функция ВыполнитьКопированиеФайлаНаСерверСУБД(Настройка) Экспорт
	
	КаталогСервераСУБД = Настройка.КаталогСервераСУБД;
	Если ПустаяСтрока(КаталогСервераСУБД) Тогда 
		Возврат 0;
	КонецЕсли;
	
	КаталогСервераСУБД = СокрЛП(КаталогСервераСУБД);
	Если Прав(КаталогСервераСУБД,1) <> "\" Тогда
		КаталогСервераСУБД = КаталогСервераСУБД + "\";
	КонецЕсли;

	ДвоичныеДанные = ПолучитьОбщийМакет("ТестСкоростиКопирования");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("")+ "\";
	
	СоздатьКаталог(ИмяВременногоКаталога);
	
	ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяВременногоФайла);	
	ЧтениеЗИП.ИзвлечьВсе(ИмяВременногоКаталога, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	ЗаписьЗИП = Новый ЗаписьZipФайла(ИмяВременногоКаталога + "zz",,,МетодСжатияZIP.Копирование,,);
	
	Для к = 1 По 99 Цикл
		
		КопироватьФайл(ИмяВременногоКаталога + "F0", ИмяВременногоКаталога + "F"+к); 
		ЗаписьЗИП.Добавить(ИмяВременногоКаталога + "F"+к);
		
	КонецЦикла;
	
	ЗаписьЗИП.Записать();
	
	ИмяФайла = "" + Новый УникальныйИдентификатор();
	
	Время1 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КопироватьФайл(ИмяВременногоКаталога + "zz",КаталогСервераСУБД + ИмяФайла);
	Время2 = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	УдалитьФайлы(КаталогСервераСУБД + ИмяФайла);
	УдалитьФайлы(ИмяВременногоКаталога);
	
	Возврат ((Время2 - Время1)/1000);
	
КонецФункции

Процедура СборДанныхОЗапросахНагружающихПроцессор(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	Топ10Запросов = Новый ТаблицаЗначений;	
	
	ТекстЗапроса = ТекстыЗапросов.Топ10ЗапросовПоНагрузкеНаПроцессор();
	Попытка
		Попытка
			Топ10Запросов = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
	Исключение
	КонецПопытки;
	
	Структура = Новый Структура;
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("Топ10Запросов", Топ10Запросов);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);
		
КонецПроцедуры

Функция ОпределитьВерсиюПротоколаIP(Настройка) Экспорт
	
	Результат = "Неопределено";
	
	Сервер1С = Настройка.Сервер1С;
	поз = Найти(Сервер1С,":");
	Если Поз > 0 Тогда
		Сервер1С = Лев(Сервер1С,Поз-1);
	КонецЕсли;
		
	КоманднаяСтрока = "ping.exe " + Сервер1С;
	
	Шелл = Новый COMОбъект("WScript.Shell");
	ОбъектScriptExec = Шелл.Exec(КоманднаяСтрока);
    РезультатВыполненияКоманды = НРег(ОбъектScriptExec.StdOut.ReadAll());
		
	//Стр = РезультатВыполненияКоманды;
	//Поз = Найти(Стр,Сервер1С);
	//Если Поз > 0 Тогда
	//	Стр = Сред(Стр, Поз);
	//	Поз = Найти(Стр, Символы.ПС);
	//	Стр = Сред(Стр, Поз + 1);
	//	Поз = Найти(Стр, Символы.ПС);
	//	Стр = Лев(Стр, Поз-1);  // должен быть результат выполнения команды или кусок ошибки
	Если СтрЧислоСтрок(РезультатВыполненияКоманды) >= 3 Тогда
		Стр = СтрПолучитьСтроку(РезультатВыполненияКоманды,3);
		
		// для IPv6 в строке должно быть что-то вроде 2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d
		// возможны сокращения. проверю на 3 ":"
		КоличествоДляIPv6 = СтрЧислоВхождений(Стр,":");
		КоличествоДляIPv4 = СтрЧислоВхождений(Стр,".");
		
		Если КоличествоДляIPv6 >= 3 Тогда
			Результат = "IPv6";
		ИначеЕсли КоличествоДляIPv4 >= 3 Тогда
			Результат = "IPv4";			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтатистикаКомандыPING(Настройка) Экспорт

	Результат = Новый Структура("СреднееВремяОтклика","");
	
	Результат.Вставить("Сервер1", ИмяКомпьютера());
	
	//   \\computer_name\instance_name
	ИмяСервера = Настройка.SQLServer;
	Пока Истина Цикл
		поз = Найти(ИмяСервера,"\");
		Если Поз = 1 Тогда
			ИмяСервера = Сред(ИмяСервера,2);
		ИначеЕсли Поз > 1 Тогда
			ИмяСервера = Лев(ИмяСервера,Поз-1);
			Прервать;
		Иначе  // = 0
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("Сервер2", ИмяСервера);
	
	КоманднаяСтрока = "ping.exe " + ИмяСервера;
	
	Шелл = Новый COMОбъект("WScript.Shell");
	ОбъектScriptExec = Шелл.Exec(КоманднаяСтрока);
    РезультатВыполненияКоманды = НРег(ОбъектScriptExec.StdOut.ReadAll());
		
	КоличествоСтрок = СтрЧислоСтрок(РезультатВыполненияКоманды);
	Счетчик = 0;
	// Ниже фрагмент
	// Ориентируемся на вторую строку с тремя "=", значение после третьего "="
	//
	//Ответ от fe80::5d2e:c512:3b7d:f8be%31: время<1мс
	//
	//Статистика Ping для fe80::5d2e:c512:3b7d:f8be%31:
	//    Пакетов: отправлено = 4, получено = 4, потеряно = 0
	//    (0% потерь)
	//Приблизительное время приема-передачи в мс:
	//    Минимальное = 0мсек, Максимальное = 0 мсек, Среднее = 0 мсек
		
	Для к = 1 По КоличествоСтрок Цикл
		
		Стр = ВРег(СтрПолучитьСтроку(РезультатВыполненияКоманды,к));
		
		ЧислоВхождений = СтрЧислоВхождений(Стр,"=");
		ПозицияTTL = Найти(Стр,"TTL");
		Если ЧислоВхождений = 3 
			и ПозицияTTL = 0 Тогда
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если Счетчик = 2 Тогда
			
			Пока Истина Цикл
				Поз = Найти(Стр,"=");
				Если Поз = 0 Тогда
					Прервать;
				КонецЕсли;
				Стр = Сред(Стр,Поз+1);
			КонецЦикла;
			
			Стр = СокрЛП(Стр);
			Поз = Найти(Стр," ");
			Если Поз > 0 Тогда
				Попытка 
					Результат.СреднееВремяОтклика = Число(Лев(Стр,Поз-1));
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтатистикаКомандыPATHPING(Настройка) Экспорт

	Результат = Новый Структура("КоличествоПрыжков, ПроцентПотерь",0,0);
	
	Результат.Вставить("Сервер1", ИмяКомпьютера());
	
	//   \\computer_name\instance_name
	ИмяСервера = Настройка.SQLServer;
	Пока Истина Цикл
		поз = Найти(ИмяСервера,"\");
		Если Поз = 1 Тогда
			ИмяСервера = Сред(ИмяСервера,2);
		ИначеЕсли Поз > 1 Тогда
			ИмяСервера = Лев(ИмяСервера,Поз-1);
			Прервать;
		Иначе  // = 0
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("Сервер2", ИмяСервера);
	
	КоманднаяСтрока = "pathping.exe " + ИмяСервера;
	
	Шелл = Новый COMОбъект("WScript.Shell");
	ОбъектScriptExec = Шелл.Exec(КоманднаяСтрока);
    РезультатВыполненияКоманды = НРег(ОбъектScriptExec.StdOut.ReadAll());
		
	// Ниже фрагмент
	// Ориентируемся на: 1 строка НЕ пустая - не пингуется; начиная с третьей строки идут прыжки
	//
	//C:\Users\qwerty>pathping pc
	//
	//Трассировка маршрута к pc [192.168.1.33]
	//с максимальным числом прыжков 30:
	//  0  isinka [192.168.1.33]
	//  1  isinka [192.168.1.33]
	//
	//Подсчет статистики за: 25 сек. ...
	//           Исходный узел     Маршрутный узел
	//Прыжок  RTT   Утер./Отпр.   %   Утер./Отпр.  %   Адрес
	//  0                                           pc [192.168.1.33]
	//                                0/ 100 =  0%   |
	//  1    0мс     0/ 100 =  0%     0/ 100 =  0%  pc [192.168.1.33]
	//
	//Трассировка завершена.
	//
	//C:\Users\qwerty>pathping pc11
	//Не удается разрешить системное имя узла pc11.
	//
	//C:\Users\qwerty>
	
	КоличествоСтрок = СтрЧислоСтрок(РезультатВыполненияКоманды);
	КодОперации = 1; // 1 - Количество прыжков. 2 - Процент потерь
	
	Для к = 1 По КоличествоСтрок Цикл
		
		Стр = СокрЛП(ВРег(СтрПолучитьСтроку(РезультатВыполненияКоманды,к)));
		
		Если к = 1 И НЕ ПустаяСтрока(Стр) Тогда  //Не удается разрешить системное имя узла pc11.
			Прервать;
		ИначеЕсли к <= 3 Тогда
			//
			//Трассировка маршрута к pc [192.168.1.33]
			//с максимальным числом прыжков 30:
			Продолжить;
		ИначеЕсли к > 3 И ПустаяСтрока(Стр) Тогда
			КодОперации = 2; // анализируем процент потерь
		КонецЕсли;
		
		Если КодОперации = 1 Тогда
			
			поз = Найти(Стр, " ");
			Попытка 
				Результат.КоличествоПрыжков = Число(Лев(Стр,Поз-1));
			Исключение
			КонецПопытки;
			
		ИначеЕсли КодОперации = 2 Тогда
			
			поз = Найти(Стр, "|");
			Если поз > 0 Тогда
				
				поз = Найти(Стр, "%");
				
				Попытка 
					Результат.ПроцентПотерь = Число(Сред(Стр, Поз-3, 3));
				Исключение
				КонецПопытки;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СетевыеПараметрыNetsh(Настройка) Экспорт

	Результат = Новый Структура("УровеньАвтонастройки","");
	
	Результат.Вставить("Сервер1", ИмяКомпьютера());
		
	КоманднаяСтрока = "netsh.exe interface tcp show global";
	
	Шелл = Новый COMОбъект("WScript.Shell");
	ОбъектScriptExec = Шелл.Exec(КоманднаяСтрока);
    РезультатВыполненияКоманды = НРег(ОбъектScriptExec.StdOut.ReadAll());
		
	// Ниже фрагмент
	// Ориентируемся на: 9 строка (5-й параметр после ----) 
	//
	//C:\Users\qwerty>netsh.exe interface tcp show global
	//Запрос активного состояния...
	//
	//Глобальные параметры TCP
	//------------------------------------------------------
	//Состояние масштабирования на стороне приема : enabled
	//Состояние разгрузки канала                  : automatic
	//Состояние NetDMA                            : enabled
	//Прямой доступ к кэшу (DCA)                  : disabled
	//Уровень автонастройки окна получения        : normal
	//Поставщик надстройки контроля перегрузки    : ctcp
	//Мощность ECN                                : disabled
	//Отметки времени RFC 1323                    : disabled
	//

	
	КоличествоСтрок = СтрЧислоСтрок(РезультатВыполненияКоманды);
	
	Для к = 1 По КоличествоСтрок Цикл
		
		Если к = 9 Тогда  // пятая строка с параметром.
			
			Стр = СокрЛП(ВРег(СтрПолучитьСтроку(РезультатВыполненияКоманды,к)));
			поз = Найти(Стр, ":");
			Попытка 
				Результат.УровеньАвтонастройки = СокрЛП(Сред(Стр,Поз+1));
			Исключение
			КонецПопытки;
			
			Прервать;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СобратьДанныеОСистемныхСчетчиках(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	СистемныеСчетчики = Новый ТаблицаЗначений;	
	
	ТекстЗапроса = ТекстыЗапросов.СистемныеСчетчики();
	Попытка
		Попытка
			СистемныеСчетчики = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
	Исключение
	КонецПопытки;
	
	
	// Надо подумать куда складывать данное хозяйство
	//////Если СистемныеСчетчики.Количество() > 0 Тогда
	//////	
	//////	ДатаСреза = ТекущаяДата();
	//////	
	//////	НЗ = РегистрыСведений.СУБД_СистемныеСчетчики.СоздатьНаборЗаписей();
	//////	НЗ.Отбор.ДатаСреза.Установить(ДатаСреза);
	//////	
	//////	Для каждого Строка Из СистемныеСчетчики Цикл			
	//////		Запись = НЗ.Добавить();
	//////		Запись.ДатаСреза = ДатаСреза;
	//////		ЗаполнитьЗначенияСвойств(Запись, Строка);			
	//////	КонецЦикла; 
	//////	
	//////	НЗ.Записать();

	//////КонецЕсли;
			
КонецПроцедуры

Процедура ОтправитьДанныеОСистемныхСчетчиках(Настройка) Экспорт
	
	ДатаСреза = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУБД_СистемныеСчетчики.ДатаСреза,
	|	СУБД_СистемныеСчетчики.Категория,
	|	СУБД_СистемныеСчетчики.ИмяСчетчика,
	|	СУБД_СистемныеСчетчики.ЭкземплярСчетчика,
	|	СУБД_СистемныеСчетчики.Значение,
	|	СУБД_СистемныеСчетчики.ТипСчетчика
	|ИЗ
	|	РегистрСведений.СУБД_СистемныеСчетчики КАК СУБД_СистемныеСчетчики
	|ГДЕ
	|	СУБД_СистемныеСчетчики.ДатаСреза < &ДатаСреза";
	
	СистемныеСчетчики = Запрос.Выполнить().Выгрузить();	
	
	Если СистемныеСчетчики.Количество() > 0 Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Настройка", Настройка);
		Структура.Вставить("СистемныеСчетчики", СистемныеСчетчики);
		
		Отказ = Ложь;
		Попытка
			//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
		Если НЕ Отказ Тогда
			
			СистемныеСчетчики.Свернуть("ДатаСреза");
			////////Для Каждого СтрокаТЗ из СистемныеСчетчики Цикл
			////////	НЗ = РегистрыСведений.СУБД_СистемныеСчетчики.СоздатьНаборЗаписей();
			////////	НЗ.Отбор.ДатаСреза.Установить(СтрокаТЗ.ДатаСреза);
			////////	НЗ.Записать();
			////////КонецЦикла;
			
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

Процедура СобратьДанныеОбщесистемныеОжидания(Настройка) Экспорт
	
	ПараметрыСУБД = РаботаССУБД.ПодключитьсяКСУБД(Настройка);
	Соединение = ПараметрыСУБД.Соединение;
	Если ПараметрыСУБД.Ошибка <> "" Тогда
		аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при соединении с SQL сервером.", ПараметрыСУБД.Ошибка, Истина);
		Возврат;
	КонецЕсли;
	
	ОбщесистемныеОжидания = Новый ТаблицаЗначений;	
	
	ТекстЗапроса = ТекстыЗапросов.ОбщесистемныеОжидания();
	Попытка
		Попытка
			ОбщесистемныеОжидания = РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса);
			ТекстЗапроса = ТекстыЗапросов.СбросОбщесистемныхОжиданий();
			РаботаССУБД.ВыполнитьЗапросMSSQL(Соединение, ТекстЗапроса)
		Исключение
			аэОбщийМодульСервер.СообщитьОбОшибке("Ошибка при выполнении запроса SQL", ОписаниеОшибки(), Истина);
		КонецПопытки;
		
	Исключение
	КонецПопытки;
	
	Структура = Новый Структура;
	Структура.Вставить("Настройка", Настройка);
	Структура.Вставить("ОбщесистемныеОжидания", ОбщесистемныеОжидания);
	
	//РаботаСВебСервисами.ВызватьВебСервис(Настройка.КлючБазыДляВебСервиса, Структура, 4);
		
КонецПроцедуры
