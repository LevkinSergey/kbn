Функция ПолучитьСостояниеМониторинга() Экспорт
	
	Результат = Новый Структура("QueryTJ,Status",Ложь,Ложь);
	
	СоответствиеСервисТег = Новый Соответствие;
	СоответствиеСервисТег.Вставить("QueryTJ","query");
	СоответствиеСервисТег.Вставить("Status","er_excp");
	

	Настройки = ПолучитьНастройкиТЖ();
	Если Настройки.Количество() = 0 	 Тогда
		
	ИначеЕсли НЕ ((Настройки.ВыключитьМониторингЗапросы
			И Настройки.ВыключитьМониторингОшибки)
		или ПустаяСтрока(Настройки.ПутьККонфигурационномуФайлу)
		или ПустаяСтрока(Настройки.ПутьКФайламЛоговТЖ)) Тогда
			
		ПутьКФайлуТЖ = СтрЗаменить(Настройки.ПутьККонфигурационномуФайлу+"/logcfg.xml","/","\");
		
		СуществующийФайл = Новый Файл(ПутьКФайлуТЖ);
		
		Если СуществующийФайл.Существует() тогда
			
			ЧтениеXML = Новый ЧтениеXML();
			
			ЧтениеXML.ОткрытьФайл(ПутьКФайлуТЖ);
			
			Попытка			
				
				ЧтениеXML.Прочитать();//Корневой элемент
				
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				
				
				Если Найти(ТекстОшибки,"Ошибка разбора XML") > 0 Тогда
					
					ПутьТекущегоФайла = СуществующийФайл.ПолноеИмя;
					НовыйПутьФайла = СуществующийФайл.Путь+"logcfg_BAD_"+Строка(Новый УникальныйИдентификатор)+".xml";
					
					ЧтениеXML.Закрыть();
					
					ПереместитьФайл(ПутьТекущегоФайла,НовыйПутьФайла);
					
				КонецЕсли;	
				
				
				Возврат Результат;
			КонецПопытки;

			
			
			ИмяНачальногоЭлемента = ЧтениеXML.Имя;
			
			Если Найти(ИмяНачальногоЭлемента,"config")=0 тогда
				ЧтениеXML.Закрыть();
				Возврат Результат;
			КонецЕсли;	
			
			
			ИмяЭлемента = "";
			
			Пока ЧтениеXML.Прочитать() Цикл
				
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
					ИмяЭлемента = ЧтениеXML.Имя;
					
					Для Каждого СервисТег из СоответствиеСервисТег Цикл
						
						Если Результат[СервисТег.Ключ] Тогда
							Продолжить;
						КонецЕсли;
						
						Если Найти(ИмяЭлемента, СервисТег.Значение)>0 тогда
							Результат[СервисТег.Ключ] = Истина;
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе 
					Продолжить;
				КонецЕсли;	
				
			КонецЦикла;
			ЧтениеXML.Закрыть();

		КонецЕсли;
		
		Для Каждого СостониеСервиса из Результат Цикл
		
			Если НЕ СостониеСервиса.Значение Тогда
				// не включен
				Продолжить;
			КонецЕсли;
			
			ТаблицаПутейФайлов = Новый ТаблицаЗначений;
			ТаблицаПутейФайлов.Колонки.Добавить("Порог");
			ТаблицаПутейФайлов.Колонки.Добавить("ПутьКФайлу");
			ТаблицаПутейФайлов.Колонки.Добавить("КороткоеИмяФайла");
			ТаблицаПутейФайлов.Колонки.Добавить("ДатаФайла");
			ТаблицаПутейФайлов.Колонки.Добавить("ИмяПроцесса");
			ТаблицаПутейФайлов.Колонки.Добавить("РазмерФайла");
			ТаблицаПутейФайлов.Колонки.Добавить("Путь");
			
			Если СостониеСервиса.Ключ = "QueryTJ" Тогда
				ПутьКФайламЛоговТЖ = Настройки.ПутьКФайламЛоговТЖ+?(Настройки.НомерКлиентскойЧасти > 0,"\"+Строка(Настройки.НомерКлиентскойЧасти),"")+"\Query1с_1";
				СформироватьТаблицуВременныхФайлов(ПутьКФайламЛоговТЖ,ТаблицаПутейФайлов,Ложь,Истина,1);
			ИначеЕсли СостониеСервиса.Ключ = "Status" Тогда	
				ПутьКФайламЛоговТЖ = Настройки.ПутьКФайламЛоговТЖ+ "\ERROR_EXCP" + ?(Настройки.НомерКлиентскойЧасти > 0,"\"+Строка(Настройки.НомерКлиентскойЧасти),"");
				ТехнологическийЖурнал_Status.СформироватьТаблицуВременныхФайлов(ПутьКФайламЛоговТЖ,ТаблицаПутейФайлов,Ложь,Истина,1);
			КонецЕсли;
			
			Если ТаблицаПутейФайлов.Количество()= 0 Тогда
				Результат[СостониеСервиса.Ключ] = Ложь;
			КонецЕсли;	
			
		КонецЦикла;			
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции	

Процедура ВключитьТехнологическийЖурнал(ИмяПотока="query") Экспорт   
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	
	Если СтруктураПараметров.ВыключитьМониторингЗапросы Тогда
		Возврат;		
	КонецЕсли;	
	
	
	ПутьКФайлу = СтрЗаменить(СтруктураПараметров.ПутьККонфигурационномуФайлу+"/logcfg.xml","/","\");
	
	
	ПутьКВременномуЛогу = ПолучитьИмяВременногоФайла("xml");
	
	ПространствоИменЛогаТЖ = "http://v8.1c.ru/v8/tech-log"; 
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКВременномуЛогу, "UTF-8");        
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	
	НомерПотока = СтрЗаменить(ИмяПотока,"query","");
	
	НомерПотока = ?(НомерПотока="",1,Число(НомерПотока)); 
	
	ИмяПотока = "query"+?(СтруктураПараметров.НомерКлиентскойЧасти > 0,"_"+Строка(СтруктураПараметров.НомерКлиентскойЧасти)+"_","")+?(НомерПотока > 1,"_b","");
	
	
	Результат =  ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,ИмяПотока);
	
	
	Если НЕ Результат Тогда
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Существующий конфигурационный файл не соответствует принятому формату: "+ПутьКФайлу+" "+ ОписаниеОшибки()); 
		
		Возврат;
	КонецЕсли; 
	
	
	
	ПериодХраненияТЖ = СтруктураПараметров.ПериодХраненияЛоговТехнологическогоЖурнала;
	Местоположение = СтруктураПараметров.ПутьКФайламЛоговТЖ+?(СтруктураПараметров.НомерКлиентскойЧасти > 0,"\"+Строка(СтруктураПараметров.НомерКлиентскойЧасти),"");
	ОперативныйРежимПолученияИнформацииОЗапросах = СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах;

	ПериодВключения = ТекущаяДата();	
	Набор = Неопределено;

	
	ИмяСобытия = ИмяСобытияDB(СтруктураПараметров.ТипСУБД);
	
	ВсегоПорогов = ?(ОперативныйРежимПолученияИнформацииОЗапросах,1,3);
		
	Для Сч = 1 по ВсегоПорогов Цикл
		
		
		ДлительностьПорога = СтруктураПараметров["ДлительностьЗапросовПорог"+Строка(Сч)];
		
		Если  ДлительностьПорога > 0 тогда
			
			Если НЕ ОперативныйРежимПолученияИнформацииОЗапросах Тогда
				ПутьМестоположение = Местоположение+"\Query1с_"+Строка(Сч);
			Иначе
				ПутьМестоположение = Местоположение+"\Query1с\"+Строка(НомерПотока)+"\"+Формат(ТекущаяДата(),"ДФ=HH_mm_ss");
			КонецЕсли;
			
			ДлительныеЗапросы1с = СоздатьЭлементКаталогаЖурнала(ЗаписьXML,ПутьМестоположение,ПространствоИменЛогаТЖ,ПериодХраненияТЖ,ИмяПотока);
			
			ДобавитьСобытиеАнализДлительныхЗапросов(ДлительныеЗапросы1с,СтруктураПараметров["ДлительностьЗапросовПорог"+Строка(Сч)],
				СтруктураПараметров.ВключатьПланыЗапросов, ИмяСобытия,ИмяПотока);
			
				
			Если СтруктураПараметров.ВключатьПланыЗапросов Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяПотока+":plansql"); 
				ЗаписьXML.ЗаписатьАтрибут("xmlns:"+ИмяПотока, ПространствоИменЛогаТЖ);
				ЗаписьXML.ЗаписатьАтрибут("location", ПутьМестоположение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;

			Если  ОперативныйРежимПолученияИнформацииОЗапросах Тогда
				Набор = РегистрыСведений.ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
				СтрокаНабора = Набор.Добавить();
				СтрокаНабора.Период = ПериодВключения;
				СтрокаНабора.ПутьККаталогу = ПутьМестоположение;
				СтрокаНабора.НомерПотока = НомерПотока;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	Ошибка = Ложь;
	
	Попытка
		
		КопироватьФайл(ПутьКВременномуЛогу,ПутьКФайлу);
		
		Если Набор <> Неопределено Тогда
			Набор.Записать(Ложь);
			Константы.ТекущийПотокТЖ.Установить(НомерПотока+1);
		КонецЕсли;

		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Возможно нет прав на доступ к каталогу для создания файла: "+ПутьКФайлу+" "+ ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Не удалось записать файл настройки лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
		
		Ошибка = Истина;
	КонецПопытки;
	
	
	Если Не Ошибка Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Настройки технологического журнала включены в файле настроек: "+ПутьКФайлу;
		Сообщение.Сообщить();

	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыключитьМониторинг() Экспорт
	
	Настройки =  ПолучитьНастройкиТЖ();
	
	
	Если Настройки.Количество() =0 или ПустаяСтрока(Настройки.ПутьКФайламЛоговТЖ)
		или ПустаяСтрока(Настройки.ПутьККонфигурационномуФайлу) Тогда
		
		ВызватьИсключение "В настройках не указаны пути логов технологического журнала!!!";
	КонецЕсли;	
	
    НабораЗаписей = РегистрыСведений.Настройки.СоздатьНаборЗаписей();
	НабораЗаписей.Отбор.Период.Установить(Настройки.Период);
	НабораЗаписей.Прочитать();
	
	Для каждого СтрокаНабора из НабораЗаписей Цикл
		
		СтрокаНабора.ВыключитьМониторингЗапросы = Истина;
		
	КонецЦикла;	
	
	НабораЗаписей.Записать();
	

	
	ПутьКФайлу = СтрЗаменить(Настройки.ПутьККонфигурационномуФайлу+"/logcfg.xml","/","\");
	
	
	КонфигурационныйФайлТЖ = Новый Файл(ПутьКФайлу);
	
	Если НЕ КонфигурационныйФайлТЖ.Существует() Тогда
		Возврат;
	КонецЕсли;	
	
	
	ПутьКВременномуЛогу = ПолучитьИмяВременногоФайла("xml");
	
	ПространствоИменЛогаТЖ = "http://v8.1c.ru/v8/tech-log"; 
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКВременномуЛогу, "UTF-8");        
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	

	
	Результат =  ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,"query"+?(Настройки.НомерКлиентскойЧасти > 0,"_"+Строка(Настройки.НомерКлиентскойЧасти)+"_",""));
	
	
	Если НЕ Результат Тогда
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Существующий конфигурационный файл не соответствует принятому формату: "+ПутьКФайлу+" "+ ОписаниеОшибки()); 
		
		Возврат;
	КонецЕсли; 
	
		
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	Попытка
		
		КопироватьФайл(ПутьКВременномуЛогу,ПутьКФайлу);
		
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Возможно нет прав на доступ к каталогу для создания файла: "+ПутьКФайлу+" "+ ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Не удалось записать файл настройки лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
		
	КонецПопытки;
	
	

КонецПроцедуры	

Процедура ВключитьМониторинг() Экспорт
	
	Настройки =  ПолучитьНастройкиТЖ();
	
	
	Если Настройки.Количество() =0 или ПустаяСтрока(Настройки.ПутьКФайламЛоговТЖ)
		или ПустаяСтрока(Настройки.ПутьККонфигурационномуФайлу) Тогда
		
		ВызватьИсключение "В настройках не указаны пути логов технологического журнала!!!";
	КонецЕсли;	
	
    НабораЗаписей = РегистрыСведений.Настройки.СоздатьНаборЗаписей();
	НабораЗаписей.Отбор.Период.Установить(Настройки.Период);
	НабораЗаписей.Прочитать();
	
	Для каждого СтрокаНабора из НабораЗаписей Цикл
		
		СтрокаНабора.ВыключитьМониторингЗапросы = Ложь;
		
	КонецЦикла;	
	
	НабораЗаписей.Записать();
	
	
    ВключитьТехнологическийЖурналНеоперативный();
	ОперативноеВключениеТехнологическогоЖурнала();
	
КонецПроцедуры	

Функция ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,ИмяПотока)
	
	ИмяНачальногоЭлемента = "config"; 
	
	СуществующийФайл = Новый Файл(ПутьКФайлу);
	
	Если СуществующийФайл.Существует() тогда
		
		
		ЧтениеXML = Новый ЧтениеXML();
		
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
		
		
		Попытка			
			
			ЧтениеXML.Прочитать();//Корневой элемент
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			//ЗаписьЖурналаРегистрации("Ошибка чтения журнала ТЖ",УровеньЖурналаРегистрации.Ошибка,,ТекстОшибки);
			
			Если Найти(ТекстОшибки,"Ошибка разбора XML") > 0 Тогда
				
				
				ПутьТекущегоФайла = СуществующийФайл.ПолноеИмя;
				НовыйПутьФайла = СуществующийФайл.Путь+"logcfg_BAD_"+Строка(Новый УникальныйИдентификатор)+".xml";
				
				ЧтениеXML.Закрыть();
				
				ПереместитьФайл(ПутьТекущегоФайла,НовыйПутьФайла);
				
				
				ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяНачальногоЭлемента);     
				ЗаписьXML.ЗаписатьАтрибут("xmlns", ПространствоИменЛогаТЖ);
				
			КонецЕсли;	
			
			Возврат ИСТИНА;
		КонецПопытки;

		
		ИмяНачальногоЭлемента = ЧтениеXML.Имя;
		
		Если Найти(ИмяНачальногоЭлемента,"config")=0 тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("config");     
			ЗаписьXML.ЗаписатьАтрибут("xmlns", ПространствоИменЛогаТЖ);
			
			ЧтениеXML.Закрыть();
			
			Возврат ИСТИНА;
		Иначе
			ИмяНачальногоЭлемента = "config";
		КонецЕсли;	
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяНачальногоЭлемента);     
		
		Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ИмяАтрибута = ЧтениеXML.Имя;
				
				Если Найти(ИмяАтрибута,"xmlns") > 0 Тогда
					ИмяАтрибута = "xmlns"; 
				КонецЕсли;	
				
				ЗначениеАтрибута = ЧтениеXML.Значение; 
				
				ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, ЗначениеАтрибута);
				
			КонецЦикла;
		КонецЕсли;
		
		
		
		ИмяЭлемента = "";
		ВложенныеЭлементы = Новый СписокЗначений();
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ИмяЭлемента = ЧтениеXML.Имя;
				
				Если Найти(ИмяЭлемента, ИмяПотока)>0 тогда
					продолжить;
				КонецЕсли;	
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента тогда
				КоличествоЭлементов = ВложенныеЭлементы.Количество();
				Если КоличествоЭлементов>0 тогда
					ЗаписьXML = ВложенныеЭлементы[КоличествоЭлементов-1].Значение;
					ЗаписьXML.ЗаписатьКонецЭлемента();
					ВложенныеЭлементы.Удалить(КоличествоЭлементов-1);
				КонецЕсли;    
				продолжить;
			Иначе 
				Продолжить;
			КонецЕсли;	
			
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
			
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					ИмяАтрибута = ЧтениеXML.Имя;
					ЗначениеАтрибута = ЧтениеXML.Значение; 
					
					ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, ЗначениеАтрибута);
					
				КонецЦикла;
			КонецЕсли;
			
			ВложенныеЭлементы.Добавить(ЗаписьXML);
			
		КонецЦикла;
		
		
		ЧтениеXML.Закрыть();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяНачальногоЭлемента);     
		ЗаписьXML.ЗаписатьАтрибут("xmlns", ПространствоИменЛогаТЖ);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ()

Функция СоздатьЭлементКаталогаЖурнала(ЭлементXML,Местоположение,ПространствоИменЛогаТЖ,ПериодХранения,ИмяПотока)
	
	
	ЭлементXML.ЗаписатьНачалоЭлемента(ИмяПотока+":log");
	ЭлементXML.ЗаписатьАтрибут("xmlns:"+ИмяПотока, ПространствоИменЛогаТЖ);
	ЭлементXML.ЗаписатьАтрибут("location", Местоположение);
	ЭлементXML.ЗаписатьАтрибут("history",  Строка(ПериодХранения));
	
	Возврат ЭлементXML;
КонецФункции // ()

Функция ДобавитьСобытие(ЭлементXML,ИмяПотока) 
	
	ЭлементXML.ЗаписатьНачалоЭлемента(ИмяПотока+":event");
	
	Возврат ЭлементXML;
	
КонецФункции 

Процедура ДобавитьСвойство(ЭлементXML, Имя,ИмяПотока) 
	
	ЭлементXML.ЗаписатьНачалоЭлемента(ИмяПотока+":property");
	ЭлементXML.ЗаписатьАтрибут("name", Имя);
	ЭлементXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ДобавитьУсловие(ЭлементXML, ТипУсловия, Свойство, Значение)
	
	
	ЭлементXML.ЗаписатьНачалоЭлемента(ТипУсловия);
	ЭлементXML.ЗаписатьАтрибут("property", Свойство);
	ЭлементXML.ЗаписатьАтрибут("value",  Значение);
	ЭлементXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры 

Функция ПолучитьТаблицуПутейФайлов(СтруктураПараметров,ТаблицаПутейФайлов = Неопределено) 
	
	
	ПутьКФайламЛоговТЖ = СтруктураПараметров.ПутьКФайламЛоговТЖ+?(СтруктураПараметров.НомерКлиентскойЧасти > 0,"\"+Строка(СтруктураПараметров.НомерКлиентскойЧасти),"");
	
	Если  ТаблицаПутейФайлов <> Неопределено Тогда
		СформироватьТаблицуВременныхФайлов(ПутьКФайламЛоговТЖ,ТаблицаПутейФайлов,Истина);
	Иначе
		ТаблицаПутейФайлов = Новый ТаблицаЗначений;
		ТаблицаПутейФайлов.Колонки.Добавить("Порог");
		ТаблицаПутейФайлов.Колонки.Добавить("ПутьКФайлу");
		ТаблицаПутейФайлов.Колонки.Добавить("КороткоеИмяФайла");
		ТаблицаПутейФайлов.Колонки.Добавить("ДатаФайла");
		ТаблицаПутейФайлов.Колонки.Добавить("ИмяПроцесса");
		ТаблицаПутейФайлов.Колонки.Добавить("РазмерФайла");
		
		СформироватьТаблицуВременныхФайлов(ПутьКФайламЛоговТЖ,ТаблицаПутейФайлов);
		
		ТаблицаПутейФайлов.Сортировать("Порог Убыв");
		
		МетодОбработкиПорогов = СтруктураПараметров.МетодОбработкиПороговДлительности;
		
		ОбрабатываемыйПорог = 0;
		
		КоличествоСтрок = ТаблицаПутейФайлов.Количество();
		
		Если КоличествоСтрок > 0 тогда 
			Если НЕ ЗначениеЗаполнено(МетодОбработкиПорогов) или МетодОбработкиПорогов = Перечисления.ОбработкаПорговДлительности.Каскадно тогда
				ТаблицаПорогов = ТаблицаПутейФайлов.Скопировать();
				ТаблицаПорогов.Свернуть("Порог");
				ОбрабатываемыйПорог = ТаблицаПорогов[0].Порог;
			ИначеЕсли МетодОбработкиПорогов = Перечисления.ОбработкаПорговДлительности.Первый тогда
				ОбрабатываемыйПорог = 1;
			ИначеЕсли МетодОбработкиПорогов = Перечисления.ОбработкаПорговДлительности.Второй тогда
				ОбрабатываемыйПорог = 2;
			ИначеЕсли МетодОбработкиПорогов = Перечисления.ОбработкаПорговДлительности.Третий тогда
				ОбрабатываемыйПорог = 3;
			КонецЕсли;
			
			Индекс = КоличествоСтрок -1; 
			
			Пока Индекс >=0 Цикл
				
				ТекущаяСтрока = ТаблицаПутейФайлов[Индекс];
				
				Если ТекущаяСтрока.Порог <> ОбрабатываемыйПорог тогда
					
					ТаблицаПутейФайлов.Удалить(ТекущаяСтрока);
					
				КонецЕсли;	
				
				Индекс = Индекс - 1;
			КонецЦикла;	
			
			
		КонецЕсли;
	КонецЕсли;
	
	
	
	Возврат ТаблицаПутейФайлов;
	
КонецФункции 

Функция ПолучитьТаблицуПутейОперативныхЛоговТЖ(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начало",ТекущаяДата() - 300);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПутиФайловТехнологическогоЖурнала.ПутьККаталогу,
	|	ПутиФайловТехнологическогоЖурнала.Период
	|ИЗ
	|	РегистрСведений.ПутиФайловТехнологическогоЖурнала КАК ПутиФайловТехнологическогоЖурнала
	|ГДЕ
	|	НЕ ПутиФайловТехнологическогоЖурнала.Удален
	|	И ПутиФайловТехнологическогоЖурнала.Период < &Начало
	|	И НЕ ПутиФайловТехнологическогоЖурнала.Обработан
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПутиФайловТехнологическогоЖурнала.Период УБЫВ";
	
	
	ТаблицаПутейФайлов = Новый ТаблицаЗначений;
	ТаблицаПутейФайлов.Колонки.Добавить("Порог");
	ТаблицаПутейФайлов.Колонки.Добавить("ПутьКФайлу");
	ТаблицаПутейФайлов.Колонки.Добавить("КороткоеИмяФайла");
	ТаблицаПутейФайлов.Колонки.Добавить("ДатаФайла");
	ТаблицаПутейФайлов.Колонки.Добавить("ИмяПроцесса");
	ТаблицаПутейФайлов.Колонки.Добавить("РазмерФайла");

	 
	 ТЗПутейОперативногоТЖ = Запрос.Выполнить().Выгрузить();
	 
	 Для каждого СтрокаТаблицы из ТЗПутейОперативногоТЖ Цикл
		 
		 ТаблицаПутейКФайлам = ПолучитьТаблицуПутейФайлов(Новый Структура("ПутьКФайламЛоговТЖ,НомерКлиентскойЧасти",СтрокаТаблицы.ПутьККаталогу,СтруктураПараметров.НомерКлиентскойЧасти),ТаблицаПутейФайлов);
		 
	 КонецЦикла;

	 
	 Если ТЗПутейОперативногоТЖ.Количество() > 0 Тогда
		 СтруктураПараметров.Вставить("ТЗПутейОперативногоТЖ",ТЗПутейОперативногоТЖ.Скопировать());
	 КонецЕсли;
	
	Возврат ТаблицаПутейФайлов;
	
КонецФункции	

Процедура СформироватьТаблицуВременныхФайлов(ПутьКФайламЖурнала,ТаблицаПутейФайлов,Оперативный = Ложь,ОбрабатыватьПустыеФайлы = Ложь,КоличествоФайловПоиска = 0)
	
	МассивФайлов=НайтиФайлы(ПутьКФайламЖурнала,"*");
	
	Для Каждого Файл Из МассивФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			СформироватьТаблицуВременныхФайлов(Файл.ПолноеИмя,ТаблицаПутейФайлов,Оперативный,ОбрабатыватьПустыеФайлы,КоличествоФайловПоиска);
		ИначеЕсли Файл.Расширение=".log" Тогда
			
			Если НЕ Оперативный и Найти(Файл.ПолноеИмя,"Query1с_") = 0 Тогда
				продолжить;
			КонецЕсли;	
				
			
			Попытка
				ЗаполнитьИнформациюОФайлеЛога(Файл,ТаблицаПутейФайлов,ОбрабатыватьПустыеФайлы);
				
				
				Если  КоличествоФайловПоиска > 0 и  КоличествоФайловПоиска <= ТаблицаПутейФайлов.Количество() Тогда
					Прервать;
				КонецЕсли;	

				
			Исключение
				//ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
				//УровеньЖурналаРегистрации.Ошибка, 
				//"ОбработкаДанныхТехнологическогоЖурнала",, 
				//"Не удалось прочитать файл лога ТЖ: "+Строка(Файл.ПолноеИмя)+" "+ОписаниеОшибки()); 
				//
			КонецПопытки;
			
		КонецЕсли; 
	КонецЦикла; 

	
КонецПроцедуры	

Процедура ЗаполнитьИнформациюОФайлеЛога(Файл,ТаблицаПутейФайлов,ОбрабатыватьПустыеФайлы = Ложь)
	Если Файл.Расширение=".log" Тогда
		
		РазмерФайла = Файл.Размер();
		
		Если РазмерФайла > 3 или ОбрабатыватьПустыеФайлы тогда
			ИмяФайла=Файл.ПолноеИмя;
			ИмяФайлаБезРасширения=Файл.ИмяБезРасширения;
			
			ИмяПроцесса = СтрЗаменить(ИмяФайла,"\"+Файл.Имя,"");
			ЧислоКаталогов = СтрЧислоВхождений(ИмяПроцесса,"\");
			
			Пока ЧислоКаталогов  > 0 Цикл
				ИмяПроцесса = Прав(ИмяПроцесса,СтрДлина(ИмяПроцесса) - Найти(ИмяПроцесса,"\"));
				ЧислоКаталогов = ЧислоКаталогов - 1;
			КонецЦикла;    
			
			
			Порог = 1;
			Если Найти(ИмяФайла,"Query1с_2")>0 тогда
				Порог = 2;
			ИначеЕсли Найти(ИмяФайла,"Query1с_3")>0 тогда
				Порог = 3;
			КонецЕсли;
			
			ДатаФайлаЛога=Дата("20"+Сред(ИмяФайлаБезРасширения,1,2)+Сред(ИмяФайлаБезРасширения,3,2)+Сред(ИмяФайлаБезРасширения,5,2)+Сред(ИмяФайлаБезРасширения,7,2)+"0000");
			
			СтрокаТаблицыПутейФайлов = ТаблицаПутейФайлов.Добавить();
			СтрокаТаблицыПутейФайлов.ПутьКФайлу = ИмяФайла;
			СтрокаТаблицыПутейФайлов.КороткоеИмяФайла = Файл.Имя;
			СтрокаТаблицыПутейФайлов.ДатаФайла = ДатаФайлаЛога;
			СтрокаТаблицыПутейФайлов.ИмяПроцесса = СокрЛП(ИмяПроцесса);
			СтрокаТаблицыПутейФайлов.РазмерФайла = РазмерФайла;
			СтрокаТаблицыПутейФайлов.Порог = Порог;
		КонецЕсли;	
		
	КонецЕсли; 
КонецПроцедуры	

Процедура ОбработатьФайлыТехнологическогоЖурнала() Экспорт
	
	

		
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	ОперативныйРежимПолученияИнформацииОЗапросах = СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах;
    КоличествоПотоков = СтруктураПараметров.КоличествоПотоковДляОбработкиЛогов;

	
	Если  КоличествоПотоков > 1 Тогда
		НомерПотока = 0;
		Пока КоличествоПотоков > НомерПотока Цикл
			НомерПотока = НомерПотока + 1;
			
			Отбор = Новый Структура("Ключ", НомерПотока);
			Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если Задания.Количество() > 0 Тогда
				СостояниеЗадания = Задания[0].Состояние;
			Иначе
				СостояниеЗадания = Неопределено;
			КонецЕсли;
			
			Если СостояниеЗадания = СостояниеФоновогоЗадания.Активно Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если  ОперативныйРежимПолученияИнформацииОЗапросах Тогда
				
		ТаблицаПутейКФайлам = ПолучитьТаблицуПутейОперативныхЛоговТЖ(СтруктураПараметров);
		
	Иначе	
		ТаблицаПутейКФайлам = ПолучитьТаблицуПутейФайлов(СтруктураПараметров);
	КонецЕсли;
	
	Константы.НомерФайла.Установить(0);
	
	НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
	НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
	НаборЗаписейИндикатора.Записать();

		
	ВсегоФайлов =  ТаблицаПутейКФайлам.Количество();
	
	Если ТаблицаПутейКФайлам.Колонки.Найти("Сервис") = Неопределено Тогда
		ТаблицаПутейКФайлам.Колонки.Добавить("Сервис");
		ТаблицаПутейКФайлам.ЗаполнитьЗначения(Перечисления.Сервисы.QueryTJ, "Сервис");
	КонецЕсли;
	
	Если КоличествоПотоков > 1 и ВсегоФайлов > 0  Тогда
		
		ШаблонТаблицаПотока = ТаблицаПутейКФайлам.Скопировать();
		ШаблонТаблицаПотока.Колонки.Добавить("НомерПотока",Новый ОписаниеТипов("Число"));
		
		
		РегистрПотоков = РегистрыСведений.ДанныеДляПотоков;
		
		Набор = РегистрПотоков.СоздатьНаборЗаписей();
		Набор.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
		Набор.Загрузить(ТаблицаПутейКФайлам);
		Набор.Записать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сервис", Перечисления.Сервисы.QueryTJ);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ "+Строка(КоличествоПотоков)+"
		|	ДанныеДляПотоков.ДатаФайла КАК ДатаФайла,
		|	ДанныеДляПотоков.ПутьКФайлу,
		|	ДанныеДляПотоков.ИмяПроцесса,
		|	ДанныеДляПотоков.Сервис,
		|	ДанныеДляПотоков.РазмерФайла КАК РазмерФайла
		|ИЗ
		|	РегистрСведений.ДанныеДляПотоков КАК ДанныеДляПотоков
		|ГДЕ
		|   ДанныеДляПотоков.Сервис = &Сервис
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаФайла,
		|	РазмерФайла УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомерПотока = 0;
		Пока Выборка.Следующий() Цикл
			НомерПотока = НомерПотока + 1;
			
			
			Набор = РегистрПотоков.СоздатьНаборЗаписей();
			Набор.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
			Набор.Отбор.ДатаФайла.Установить(Выборка.ДатаФайла);
			Набор.Отбор.ПутьКФайлу.Установить(Выборка.ПутьКФайлу);
			Набор.Прочитать();
			
			Для каждого СтрокаНабора  из Набор Цикл
				СтрокаНабора.НомерПотока = НомерПотока;
			КонецЦикла;	  
			Набор.Записать();
			
			
			ШаблонТаблицаПотока.Очистить();
			
			СтрокаТаблицы = ШаблонТаблицаПотока.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
			СтрокаТаблицы.НомерПотока = НомерПотока;
			
			
			НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
			НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
			НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
			
			СтрокаНбора = НаборЗаписейИндикатора.Добавить();
			СтрокаНбора.Сервис = Перечисления.Сервисы.QueryTJ;
			СтрокаНбора.НомерПотока = НомерПотока;
			СтрокаНбора.ВсегоФайлов = ВсегоФайлов; 
			
			НаборЗаписейИндикатора.Записать();

			
			МассивПараметров  = Новый Массив;
			МассивПараметров.Добавить(НомерПотока);
			МассивПараметров.Добавить(ШаблонТаблицаПотока);
			МассивПараметров.Добавить(СтруктураПараметров);
			
			ФоновыеЗадания.Выполнить("ТехнологическийЖурнал.ОбработатьПотокЛоговТЖ",МассивПараметров,НомерПотока,"Обработка логов ТЖ, поток: "+Строка(НомерПотока));


			
		КонецЦикла;  
		
		
		
	Иначе
		
		НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
		НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
		НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(0);
		
		СтрокаНбора = НаборЗаписейИндикатора.Добавить();
		СтрокаНбора.Сервис = Перечисления.Сервисы.QueryTJ;
		СтрокаНбора.НомерПотока = 0;
		СтрокаНбора.ВсегоФайлов = ВсегоФайлов; 
		
		НаборЗаписейИндикатора.Записать();

		ОбработатьПотокЛоговТЖ(0,ТаблицаПутейКФайлам,СтруктураПараметров);

	КонецЕсли;	
	
	
КонецПроцедуры

Функция  ПолучитьПодключениеКБазе(СтруктураПараметров) Экспорт
	
	
	WS_Определение = ПолучитьОпределениеВебСервиса(СтруктураПараметров);
	
	Если WS_Определение = НЕОПРЕДЕЛЕНО Тогда
		
		ВызватьИсключение "Не удается инициализировать подключение к серверной части сервиса!";
		
	КонецЕсли; 

	
	Прокси = Новый WSПрокси(WS_Определение, 
	"http://www.querytj.org/webservice",
	"QueryTJ",
	"QueryTJSoap");
	
	
	Прокси.Пользователь = СтруктураПараметров.WSDL_Пользователь;
	Прокси.Пароль		= СтруктураПараметров.WSDL_Пароль;
	
    
    Возврат Прокси;
КонецФункции	


Функция ПолучитьОпределениеВебСервиса(СтруктураПараметров)

	Успешно = Ложь;
	ИмяВебСервисаРезерв = СтруктураПараметров.WSDL_УдаленноеПодключениеРезерв;
	
	WS_Определение = НЕОПРЕДЕЛЕНО;


	Попытка
		WS_Определение = Новый WSОпределения(СтруктураПараметров.WSDL_УдаленноеПодключение, СтруктураПараметров.WSDL_Пользователь, СтруктураПараметров.WSDL_Пароль);
		
		Успешно = ИСТИНА;
	Исключение
		
	КонецПопытки;
	
	
	Если НЕ Успешно и НЕ ПустаяСтрока(ИмяВебСервисаРезерв)Тогда
			
		Попытка
			WS_Определение = Новый WSОпределения(ИмяВебСервисаРезерв, СтруктураПараметров.WSDL_Пользователь, СтруктураПараметров.WSDL_Пароль);
			
			Успешно = ИСТИНА;
		Исключение
			
		КонецПопытки;
		
	КонецЕсли; 
	
	Если НЕ Успешно Тогда
		
		ДанныеМаршрутовССайта = ПолучитьТаблицуМаршрутовССайта("QueryTJ");
		
		Если  ЗначениеЗаполнено(ДанныеМаршрутовССайта) Тогда
			
			ТекНастроки = РегистрыСведений.Настройки.СоздатьНаборЗаписей();
			ТекНастроки.Прочитать();
			
			Если ТекНастроки.Количество() = 0  Тогда
				СтрокаНастройки = ТекНастроки.Добавить();
			Иначе
				СтрокаНастройки =  ТекНастроки[0];
			КонецЕсли; 
			
			Сч = 0;
			ФлагиПроверкиВеб = Новый Соответствие();
			
			Пока Сч < 4 Цикл
				Сч = Сч +1;
				
				ТекущийПроверяемыйМаршрут  =  ДанныеМаршрутовССайта[Сч];
				
				Попытка
					WS_Определение = Новый WSОпределения(ТекущийПроверяемыйМаршрут, СтруктураПараметров.WSDL_Пользователь, СтруктураПараметров.WSDL_Пароль);
					
					Успешно = ИСТИНА;
					
					ФлагиПроверкиВеб.Вставить(Сч,ИСТИНА);
					
				Исключение
					ФлагиПроверкиВеб.Вставить(Сч,Ложь);
					
				КонецПопытки;
				
			КонецЦикла; 
			
			
			Если (ФлагиПроверкиВеб.Получить(1) и ФлагиПроверкиВеб.Получить(2))
				ИЛИ (ФлагиПроверкиВеб.Получить(1) и НЕ ФлагиПроверкиВеб.Получить(2))  Тогда
				СтрокаНастройки.WSDL_УдаленноеПодключение =  ДанныеМаршрутовССайта.ОсновнойСервис;
			ИначеЕсли (НЕ ФлагиПроверкиВеб.Получить(1) и ФлагиПроверкиВеб.Получить(2))	Тогда 	
				СтрокаНастройки.WSDL_УдаленноеПодключение =  ДанныеМаршрутовССайта.ОсновнойСервисIP;
			КонецЕсли; 
			
			Если (ФлагиПроверкиВеб.Получить(3) и ФлагиПроверкиВеб.Получить(4))
				ИЛИ (ФлагиПроверкиВеб.Получить(3) и НЕ ФлагиПроверкиВеб.Получить(4))  Тогда
				СтрокаНастройки.WSDL_УдаленноеПодключениеРезерв =  ДанныеМаршрутовССайта.РезервныйСервис;
			ИначеЕсли (НЕ ФлагиПроверкиВеб.Получить(3) и ФлагиПроверкиВеб.Получить(4))	Тогда 	
				СтрокаНастройки.WSDL_УдаленноеПодключениеРезерв =  ДанныеМаршрутовССайта.РезервныйСервисIP;
			КонецЕсли; 
			
			Если ТекНастроки.Модифицированность() Тогда
				ТекНастроки.Записать();
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат  WS_Определение;
	

КонецФункции // ()
 
Функция ПолучитьТаблицуМаршрутовССайта(ИмяСервиса) Экспорт
	
	СтрокаМаршрута = НЕОПРЕДЕЛЕНО;
	
	Сервер = "www.gilev.ru";			
	Соединение = Новый HTTPСоединение(Сервер);			
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("host", Сервер);   		
	Запрос = Новый HTTPЗапрос("/host_services/", Заголовки);
	Ответ =Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда // Данные получены, обрабатываем их
		
		ТекстСтраницы= Ответ.ПолучитьТелоКакСтроку();
		
		ЧтениеHTML=Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(ТекстСтраницы,"UTF-8");
		
		ПостроительDOM=Новый ПостроительDOM;
		
		ДокументПостроитель=ПостроительDOM.Прочитать(ЧтениеHTML);
		
		
		ТЗМаршрутов = Новый ТаблицаЗначений;
		ТЗМаршрутов.Колонки.Добавить("ИмяСервиса");
		ТЗМаршрутов.Колонки.Добавить("ОсновнойСервис");
		ТЗМаршрутов.Колонки.Добавить("ОсновнойСервисIP");
		ТЗМаршрутов.Колонки.Добавить("РезервныйСервис");
		ТЗМаршрутов.Колонки.Добавить("РезервныйСервисIP");

		ПолучитьТаблицуМаршрутовСервисовИзHTML(ТЗМаршрутов,ДокументПостроитель, ИмяСервиса);
		
		СтрокаМаршрута =  ТЗМаршрутов.Найти(ИмяСервиса,"ИмяСервиса");
		
		
	КонецЕсли;    
	
	Возврат  СтрокаМаршрута;
	
КонецФункции // ()


Процедура ЗаполнитьТЗМаршрутов(ТЗМаршрутов,ЭлементСтрокиТаблицы, ИмяСервиса="QueryTJ") 

	  СтрокаТаблицыМаршрутов = ТЗМаршрутов.Добавить();
	  
	  НомерКолонки = -1;
	  
	  Для каждого ЭлементДок Из ЭлементСтрокиТаблицы.ДочерниеУзлы Цикл
		  
		  Если ТипЗнч(ЭлементДок) = Тип("ЭлементСтрокаТаблицыHTML") Тогда
			  ПерваяСтрока = СокрЛП(СтрПолучитьСтроку(ЭлементДок.ТекстовоеСодержимое,1));
			  Если ПерваяСтрока=ИмяСервиса Тогда
				  Для НомерКолонки=1 ПО СтрЧислоСтрок(ЭлементДок.ТекстовоеСодержимое) Цикл
					  СтрокаТаблицыМаршрутов[НомерКолонки-1] = СокрЛП(СтрПолучитьСтроку(ЭлементДок.ТекстовоеСодержимое,НомерКолонки));
				  КонецЦикла;
				  Прервать;
			  КонецЕсли;
			  
		  КонецЕсли; 
		  
	 КонецЦикла;
	 
КонецПроцедуры
Процедура ЗаполнитьТЗМаршрутов_стар(ТЗМаршрутов,ЭлементСтрокиТаблицы, ИмяСервиса="QueryTJ") 

	  СрокаТаблицыМаршрутов = ТЗМаршрутов.Добавить();
	  
	  НомерКолонки = -1;
	  
	
	 Для каждого ЭлементДок Из ЭлементСтрокиТаблицы.ДочерниеУзлы Цикл
		 
		 Если ТипЗнч(ЭлементДок) = Тип("ЭлементЯчейкаТаблицыHTML") Тогда
		 
		 	 НомерКолонки = НомерКолонки +1;
			 
			 СрокаТаблицыМаршрутов[НомерКолонки] = СокрЛП(ЭлементДок.ТекстовоеСодержимое);
			 
			 
		 КонецЕсли; 
		 
		 
		 
	 КонецЦикла;
	 
	 
КонецПроцедуры

Процедура ПолучитьТаблицуМаршрутовСервисовИзHTML(ТЗМаршрутов,ДокументПостроитель, ИмяСервиса="QueryTJ")
	
	
	
	
	Для каждого ЭлементДок Из ДокументПостроитель.ДочерниеУзлы Цикл
		
		Если ТипЗнч(ЭлементДок)=Тип("ЭлементТаблицаHTML") Тогда 
			
			Если Найти(ЭлементДок.ТекстовоеСодержимое,"Имя сервиса") > 0
				И Найти(ЭлементДок.ТекстовоеСодержимое,"Основной WS") > 0 Тогда
				
				Сч = 0;
				ВсегоЭлементов = ЭлементДок.ДочерниеУзлы.Количество();
				Пока Сч < ВсегоЭлементов Цикл
					ЗаполнитьТЗМаршрутов(ТЗМаршрутов,ЭлементДок.ДочерниеУзлы[Сч], ИмяСервиса);
					Сч = Сч +1;
					
				КонецЦикла;  			
				
				Прервать;
				
			КонецЕсли;	
			
			
		Иначе
			
			Если ЭлементДок.ЕстьДочерниеУзлы() Тогда
				
				ПолучитьТаблицуМаршрутовСервисовИзHTML(ТЗМаршрутов,ЭлементДок, ИмяСервиса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры
Процедура ПолучитьТаблицуМаршрутовСервисовИзHTML_стар(ТЗМаршрутов,ДокументПостроитель)
	
	
	
	
	Для каждого ЭлементДок Из ДокументПостроитель.ДочерниеУзлы Цикл
		
		Если ТипЗнч(ЭлементДок)=Тип("ЭлементТаблицаHTML") Тогда 
			
			Если Найти(ЭлементДок.ТекстовоеСодержимое,"Имя сервиса") > 0
				И Найти(ЭлементДок.ТекстовоеСодержимое,"Основной WS") > 0 Тогда
				
				Сч = 0;
				ВсегоЭлементов = ЭлементДок.ДочерниеУзлы.Количество() -1;
				Пока Сч < ВсегоЭлементов Цикл
					Сч = Сч +1;
					
					ЗаполнитьТЗМаршрутов(ТЗМаршрутов,ЭлементДок.ДочерниеУзлы[Сч]);
					
				КонецЦикла;  			
				
				Прервать;
				
			КонецЕсли;	
			
			
		Иначе
			
			Если ЭлементДок.ЕстьДочерниеУзлы() Тогда
				
				ПолучитьТаблицуМаршрутовСервисовИзHTML(ТЗМаршрутов,ЭлементДок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры




Процедура ОбработатьСтрокиФайлаТЖ(НомерПотока,ТаблицаЗапросов,ПараметрыФайла,КонечнаяСтрока)    
	ПутьКФайлу = ПараметрыФайла.ПутьКФайлу;
	ДатаФайла = ПараметрыФайла.ДатаФайла;
	НачальнаяСтрока = ПараметрыФайла.НачальнаяСтрока;
	
	ЗагружатьЛогиВПамятьДляОбработки = ПараметрыФайла.ЗагружатьЛогиВПамятьДляОбработки;
	
	ПолнаяСтрокаСобытия="";
	РазделятьСтроки = Ложь;
	НачалоТекстовогоБлока = Истина;
	
	ВидОсобогоПорядкаОбходаСтрок = 0;
	НомерПодСтроки = 0;

	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяПроцесса",ПараметрыФайла.ИмяПроцесса);
	СтруктураПараметров.Вставить("ПутьКФайлу",ПутьКФайлу);
	СтруктураПараметров.Вставить("ДатаФайла",ДатаФайла);
	СтруктураПараметров.Вставить("ТипСУБД",ПараметрыФайла.ТипСУБД);
	СтруктураПараметров.Вставить("ВерсияПлатформы1С",ПараметрыФайла.ВерсияПлатформы1С);


	Если ЗагружатьЛогиВПамятьДляОбработки Тогда
		
		ТекстовыйДокумент=Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(ПутьКФайлу,КодировкаТекста.UTF8);
		Исключение
			//ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
			//УровеньЖурналаРегистрации.Ошибка, 
			//"ОбработкаДанныхТехнологическогоЖурнала",, 
			//"Не удалось прочитать данные файла лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
			//
			Возврат;
		КонецПопытки; 
		КонечнаяСтрока = ТекстовыйДокумент.КоличествоСтрок();
		МаксимальнаяСтрока = КонечнаяСтрока;
		
		
		Пока Истина Цикл
			СтрНачальная = ТекстовыйДокумент.ПолучитьСтроку(НачальнаяСтрока);
			Если Сред(СтрНачальная,3,1)=":" И Сред(СтрНачальная,6,1)="." Тогда
				прервать;
			КонецЕсли;
			Если НачальнаяСтрока = 10000 тогда //если первые 10000  не являются началом значит файл либо испорченный либо пустой
				Возврат;
			КонецЕсли;	
			НачальнаяСтрока = НачальнаяСтрока + 1;
		КонецЦикла;	
		
		
		
		
		Пока НачальнаяСтрока<= КонечнаяСтрока Цикл
			СтрокаСобытия = ТекстовыйДокумент.ПолучитьСтроку(НачальнаяСтрока);
			
			Если НачальнаяСтрока%1000=0 Тогда
				
				НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
				НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
				НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
				НаборЗаписейИндикатора.Прочитать();
				
				СтрокаНбора = НаборЗаписейИндикатора[0];
				СтрокаНбора.НомерТекущейСтроки = НачальнаяСтрока;
				СтрокаНбора.ВсегоСтрок = КонечнаяСтрока;
				НаборЗаписейИндикатора.Записать();
				
			КонецЕсли;
			
			СтруктураПараметров.Вставить("НомерСтрокиФайла",НачальнаяСтрока);
			
			
			Если Сред(СтрокаСобытия,3,1)=":" И Сред(СтрокаСобытия,6,1)="." и ПолнаяСтрокаСобытия<>"" Тогда
				ЗаполнитьДаннымиТаблицуЗапросов(ТаблицаЗапросов,ПолнаяСтрокаСобытия,СтруктураПараметров);
				ПолнаяСтрокаСобытия=СтрокаСобытия;
				НачалоТекстовогоБлока = Истина;
				РазделятьСтроки = Ложь;
			Иначе
				РазделительСтрок = "";
				
				Если НачалоТекстовогоБлока и  (Найти(ПолнаяСтрокаСобытия,"Sql=")>0 
					или Найти(ПолнаяСтрокаСобытия,"Context=")>0) Тогда
					РазделятьСтроки = Истина;
					НачалоТекстовогоБлока = Ложь;
				КонецЕсли;	
				
				Если РазделятьСтроки Тогда
					РазделительСтрок = "<<d>>";
				КонецЕсли;	
				
				Если   НачалоТекстовогоБлока и  ПолнаяСтрокаСобытия<>""  Тогда
					НачалоТекстовогоБлока = Ложь;
				КонецЕсли;	
				
				
				ПолнаяСтрокаСобытия=ПолнаяСтрокаСобытия+РазделительСтрок+СтрокаСобытия;
				
			КонецЕсли;	
			
			НачальнаяСтрока = НачальнаяСтрока + 1;
		КонецЦикла;	
		
	Иначе
		
		Попытка
			ТекстовыйДокумент= Новый ЧтениеТекста(ПутьКФайлу,КодировкаТекста.UTF8);
		Исключение
			//ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
			//УровеньЖурналаРегистрации.Ошибка, 
			//"ОбработкаДанныхТехнологическогоЖурнала",, 
			//"Не удалось прочитать данные файла лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
			
			Возврат;
		КонецПопытки; 
		
		
		СтрокаСобытия = ТекстовыйДокумент.ПрочитатьСтроку();
		
		Пока СтрокаСобытия <> Неопределено  Цикл
			
			Если НачальнаяСтрока%1000=0 Тогда
				
				НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
				НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
				НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
				НаборЗаписейИндикатора.Прочитать();
				
				СтрокаНбора = НаборЗаписейИндикатора[0];
				СтрокаНбора.НомерТекущейСтроки = НачальнаяСтрока;
				НаборЗаписейИндикатора.Записать();
				
			КонецЕсли;

			СтруктураПараметров.Вставить("НомерСтрокиФайла",НачальнаяСтрока);
			
			Если  НачалоТекстовогоБлока Тогда
				ПодСтрокаДляПоиска = ?(ПолнаяСтрокаСобытия ="",СтрокаСобытия,ПолнаяСтрокаСобытия);
				//Найти(ПодСтрокаДляПоиска,"INSERT INTO #tt")
				Если Найти(ПодСтрокаДляПоиска,"INSERT") > 0  и  Найти(ПодСтрокаДляПоиска,"VALUES(") > 0  Тогда
					ВидОсобогоПорядкаОбходаСтрок = 1;
				ИначеЕсли Найти(ПодСтрокаДляПоиска,",SDBL,") > 0 Тогда
					ВидОсобогоПорядкаОбходаСтрок = 2;
					СтрокаСобытия = "";
					НачалоТекстовогоБлока = Ложь;
				Иначе
					ВидОсобогоПорядкаОбходаСтрок = 0;
				КонецЕсли;
			КонецЕсли;
			
			НомерПодСтроки = НомерПодСтроки +1;
			
			Если Сред(СтрокаСобытия,3,1)=":" И Сред(СтрокаСобытия,6,1)="." и ПолнаяСтрокаСобытия<>"" Тогда
				ЗаполнитьДаннымиТаблицуЗапросов(ТаблицаЗапросов,ПолнаяСтрокаСобытия,СтруктураПараметров);
				ПолнаяСтрокаСобытия=СтрокаСобытия;
				НачалоТекстовогоБлока = Истина;
				РазделятьСтроки = Ложь;
				
				ВидОсобогоПорядкаОбходаСтрок = 0;
				НомерПодСтроки = 0;
				
			Иначе
				
				Если ВидОсобогоПорядкаОбходаСтрок = 2 Тогда
					ПолнаяСтрокаСобытия = "";
				Иначе	  
					
					РазделительСтрок = "";
					
					ПозицияКонтекста =  Найти(ПолнаяСтрокаСобытия,"Context=");
					ПозицияЗапроса =  Найти(ПолнаяСтрокаСобытия,"Sql=");
					
					Если НачалоТекстовогоБлока и  (ПозицияЗапроса > 0 или ПозицияКонтекста > 0) Тогда
						РазделятьСтроки = Истина;
						НачалоТекстовогоБлока = Ложь;
					КонецЕсли;	
					
					Если РазделятьСтроки Тогда
						РазделительСтрок = "<<d>>";
					КонецЕсли;	
					
					Если   НачалоТекстовогоБлока и  ПолнаяСтрокаСобытия<>""  Тогда
						НачалоТекстовогоБлока = Ложь;
					КонецЕсли;	
					
					
					Если ВидОсобогоПорядкаОбходаСтрок = 1 Тогда
						
						Если  НомерПодСтроки > 5 и ПозицияКонтекста = 0 Тогда
						
							
							ПозицияКонтекстаТекСтроки =  Найти(СтрокаСобытия,"Context=");
							
							Если Найти(ПолнаяСтрокаСобытия,"planSQLText=")> 0 Тогда
								
								Если ПозицияКонтекстаТекСтроки = 0 Тогда
									РазделительСтрок = "";
									СтрокаСобытия = "";
								КонецЕсли;	
								
							ИначеЕсли ПозицияЗапроса > 0 Тогда
								
								Если Найти(СтрокаСобытия,"planSQLText=")= 0 и ПозицияКонтекстаТекСтроки = 0 Тогда
									РазделительСтрок = "";
									СтрокаСобытия = "";
								КонецЕсли;
								
							КонецЕсли;	
							
						КонецЕсли;	
						
						
						
					КонецЕсли;	
					
					
					ПолнаяСтрокаСобытия=ПолнаяСтрокаСобытия+РазделительСтрок+СтрокаСобытия;
					
				КонецЕсли;
				
			КонецЕсли;	
			
			
			СтрокаСобытия = ТекстовыйДокумент.ПрочитатьСтроку();
			
			Если ВидОсобогоПорядкаОбходаСтрок = 2 и Сред(СтрокаСобытия,3,1)=":" И Сред(СтрокаСобытия,6,1)="." Тогда
				ВидОсобогоПорядкаОбходаСтрок = 0;
				НачалоТекстовогоБлока = Истина;
			КонецЕсли;		

			
			
			НачальнаяСтрока = НачальнаяСтрока + 1;

		КонецЦикла;	
		
	КонецЕсли;
	
	ЗаполнитьДаннымиТаблицуЗапросов(ТаблицаЗапросов,ПолнаяСтрокаСобытия,СтруктураПараметров);
	
	
	
КонецПроцедуры	

Процедура  ЗаполнитьПараметрСтроки(ЗначениеСобытия,ТаблицаЗапросов,СтрокаТаблицаЗапросов,ИмяКолонкиТаблицаЗапросов,ЗначениеПараметра,СтрокаУдалена,ИмяСобытия)
	
	Если ЗначениеСобытия = "sdbl" и  ((НРЕГ(ИмяКолонкиТаблицаЗапросов) = "sdbl" и СокрЛП(ЗначениеПараметра) = "")
		или (НРЕГ(ИмяКолонкиТаблицаЗапросов) = "func" и СокрЛП(ЗначениеПараметра) <> "InsertRecords") )тогда
		СтрокаУдалена = Ложь;
		
	ИначеЕсли ЗначениеСобытия = "context" и НРЕГ(ИмяКолонкиТаблицаЗапросов) = "context" тогда
		
		
		НомерПредыдущейСтроки = ТаблицаЗапросов.Количество()-2;
		
		
		Если НомерПредыдущейСтроки >= 0 Тогда
			ПредыдущаяСтрока = ТаблицаЗапросов[НомерПредыдущейСтроки];
			Если ПредыдущаяСтрока.p_processname = СтрокаТаблицаЗапросов.p_processname
				и ПредыдущаяСтрока.t_connectid = СтрокаТаблицаЗапросов.t_connectid
				и ПредыдущаяСтрока.usr = СтрокаТаблицаЗапросов.usr
				Тогда
				ПредыдущаяСтрока.context =ПредыдущаяСтрока.context + ?(ПредыдущаяСтрока.context<>"",Символы.ПС,"")+ СокрЛП(ЗначениеПараметра);
			Иначе
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("t_connectid",СтрокаТаблицаЗапросов.t_connectid);
				СтруктураПоиска.Вставить("usr",СтрокаТаблицаЗапросов.usr);
				СтруктураПоиска.Вставить("ИмяСобытия",ИмяСобытия);
				
				МассивСтрок = ТаблицаЗапросов.НайтиСтроки(СтруктураПоиска);

				КоличествоЭлементов = МассивСтрок.Количество();
				
				Если  КоличествоЭлементов > 0 Тогда
					
					ПредыдущаяСтрока = МассивСтрок[КоличествоЭлементов-1];
					
					Если СокрЛП(ПредыдущаяСтрока.context)="" Тогда
						ПредыдущаяСтрока.context = СокрЛП(ЗначениеПараметра);
					КонецЕсли;
				КонецЕсли;	
	
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаУдалена = Истина;
		
		
    ИначеЕсли  НРЕГ(ИмяКолонкиТаблицаЗапросов) = "sql" и НЕ ЗначениеЗаполнено(СокрЛП(ЗначениеПараметра)) тогда
		СтрокаУдалена = Истина;
	ИначеЕсли НРЕГ(ИмяКолонкиТаблицаЗапросов) = "p_processname"  Тогда
		Если СтрокаТаблицаЗапросов.p_processname = "" Тогда
			СтрокаТаблицаЗапросов[ИмяКолонкиТаблицаЗапросов]=СокрЛП(ЗначениеПараметра);
		КонецЕсли;
	Иначе	
		
		СтрокаТаблицаЗапросов[ИмяКолонкиТаблицаЗапросов]=СокрЛП(ЗначениеПараметра);
	КонецЕсли;
КонецПроцедуры	

Процедура ОчисткаОбработанныхДанных() Экспорт
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	ТекПериод = ТекущаяДата();
	ПериодОбработки = ТекПериод-СтруктураПараметров.ПериодХраненияЛоговТехнологическогоЖурнала*3600;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодОбработки",ПериодОбработки);
	Запрос.УстановитьПараметр("ПериодОбработки2",ПериодОбработки-84600);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПутиФайловТехнологическогоЖурнала.Период КАК ПериодТЖ,
	|	ПутиФайловТехнологическогоЖурнала.ПутьККаталогу КАК ПутьТЖ,
	|	ПутиФайловТехнологическогоЖурнала.НомерПотока
	|ИЗ
	|	РегистрСведений.ПутиФайловТехнологическогоЖурнала КАК ПутиФайловТехнологическогоЖурнала
	|ГДЕ
	|	ПутиФайловТехнологическогоЖурнала.Обработан
	|	И НЕ ПутиФайловТехнологическогоЖурнала.Удален
	|	И ПутиФайловТехнологическогоЖурнала.Период < &ПериодОбработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПутиФайловТехнологическогоЖурнала.Период,
	|	ПутиФайловТехнологическогоЖурнала.ПутьККаталогу,
	|	ПутиФайловТехнологическогоЖурнала.НомерПотока
	|ИЗ
	|	РегистрСведений.ПутиФайловТехнологическогоЖурнала КАК ПутиФайловТехнологическогоЖурнала
	|ГДЕ
	|	ПутиФайловТехнологическогоЖурнала.Период <= &ПериодОбработки2
	|	И ПутиФайловТехнологическогоЖурнала.Удален";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПутьТЖ) Тогда
			продолжить;
		КонецЕсли;
		
		
		Попытка
			УдалитьФайлы(Выборка.ПутьТЖ);
			
			Набор = РегистрыСведений.ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(Выборка.ПериодТЖ);
			Набор.Прочитать();
			
			Если  Набор.Количество() > 0 Тогда
				СтрокаНабора = Набор[0];
				СтрокаНабора.Удален = Истина;
			КонецЕсли;
			
			Набор.Записать();
			
		Исключение
			
			
			ЗаписьЖурналаРегистрации("ОчисткаУстаревшихДанныхЛоговТЖ",
			УровеньЖурналаРегистрации.Ошибка, 
			"ОчисткаУстаревшихДанныхЛоговТЖ",, 
			"Не удалось удалить файлы логов ТЖ: "+Строка(Выборка.ПутьТЖ)+" "+ОписаниеОшибки()); 
		КонецПопытки;
		
	КонецЦикла;
		
		
	
	
	Запрос.УстановитьПараметр("ПериодОбработки",ТекПериод-86400);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПутиФайловТехнологическогоЖурнала.Период
	|ИЗ
	|	РегистрСведений.ПутиФайловТехнологическогоЖурнала КАК ПутиФайловТехнологическогоЖурнала
	|ГДЕ
	|	ПутиФайловТехнологическогоЖурнала.Период < &ПериодОбработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Выборка.Период);
		Набор.Прочитать();
		Набор.Очистить();
		Набор.Записать();
		
	КонецЦикла;	
	
	

	
	Запрос.УстановитьПараметр("ПериодОбработки",ТекПериод-86400);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЗапросовДляОтправки.ПериодОбработки,
	|	ДанныеЗапросовДляОтправки.НомерПакета
	|ИЗ
	|	РегистрСведений.ДанныеЗапросовДляОтправки КАК ДанныеЗапросовДляОтправки
	|ГДЕ
	|	ДанныеЗапросовДляОтправки.ПериодОбработки < &ПериодОбработки
	|	И ДанныеЗапросовДляОтправки.Отправлен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДанныеЗапросовДляОтправки.СоздатьНаборЗаписей();
		Набор.Отбор.ПериодОбработки.Установить(Выборка.ПериодОбработки);
		Набор.Отбор.НомерПакета.Установить(Выборка.НомерПакета);
		Набор.Прочитать();
		Набор.Очистить();
		Набор.Записать();
		
	КонецЦикла;	

	
КонецПроцедуры

Функция ПроверкаВебСервиса() Экспорт
	
	Ошибка="";
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяСобытия",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("ИмяПроцесса",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТаблицаЗапросов.Колонки.Добавить("МоментВремени",Новый ОписаниеТипов("Число"));
	ТаблицаЗапросов.Колонки.Добавить("Длительность",Новый ОписаниеТипов("Число"));
	ТаблицаЗапросов.Колонки.Добавить("p_processName",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ТаблицаЗапросов.Колонки.Добавить("t_computerName",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("t_connectID",Новый ОписаниеТипов("Число"));
	ТаблицаЗапросов.Колонки.Добавить("dbpid",Новый ОписаниеТипов("Число"));
	ТаблицаЗапросов.Колонки.Добавить("Context",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Sdbl",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Sql",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Func",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("tableName",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Usr",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("planSQLText",Новый ОписаниеТипов("Строка"));
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	Попытка
		Прокси = ПолучитьПодключениеКБазе(СтруктураПараметров);
	Исключение		
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		ОтправитьТаблицуЗапросовПоВебСервису(Прокси,ТаблицаЗапросов,СтруктураПараметров.ИденификаторБазы);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Ошибка;
	
КонецФункции

Процедура СформироватьФайлыПочтовыхВложений(ТаблицаЗапросов,СтруктураПараметров,ПериодФайлов)  
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("Константа.НомерФайла");
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

	
	НомерФайла = Константы.НомерФайла.Получить();
	НомерФайла = НомерФайла + 1;
	Константы.НомерФайла.Установить(НомерФайла);
	
	ЗафиксироватьТранзакцию();
	
	ИдентификаторБазы = СокрЛП(СтруктураПараметров.ИденификаторБазы);
	
	Если ПустаяСтрока(ИдентификаторБазы) Тогда
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		"В настройках не указан идентификатор базы!!!"); 

		ВызватьИсключение "В настройках не указан идентификатор базы!!!";
	КонецЕсли;	
	
	
	ИмяФайла =  СтруктураПараметров.ПутьКФайламПочтовыхВложений;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		ИмяФайла = КаталогВременныхФайлов();
	КонецЕсли;
	
	ИмяФайла =  ИмяФайла+"\QueryTJ_"+ИдентификаторБазы+"_1_"+Строка(НомерФайла)+"_"+Формат(ПериодФайлов,"ДФ='dd_MM_yyyy_HH'")+".txt";
	
	
	ТаблицаЗапросовСтрокой = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(ТаблицаЗапросов,Новый СжатиеДанных(9)));
	
	
	ТекстовыйДокумент =  Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТаблицаЗапросовСтрокой);
	ТекстовыйДокумент.Записать(ИмяФайла);
	
	
	ИмяИсходногоФайла = ИмяФайла;
	
	ИмяФайла = СтрЗаменить(ИмяФайла, ".txt", ".querytj");
	
	Архиватор = Новый ЗаписьZipФайла(ИмяФайла);
	Архиватор.Добавить(ИмяИсходногоФайла);
	Архиватор.Записать();		
	
	УдалитьФайлы(ИмяИсходногоФайла);
	
	СистемнаяУчетнаяЗапись = Константы.СистемнаяУчетнаяЗаписьПочты.Получить();
	
	АдресЭлектроннойПочты = СтруктураПараметров.ЭлектроннаяПочтаСервиса;	
	
	Если ЗначениеЗаполнено(СистемнаяУчетнаяЗапись) и Не ПустаяСтрока(АдресЭлектроннойПочты) Тогда
		 ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись,АдресЭлектроннойПочты,ИмяФайла);
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьПрофильИнтернетПочтовоеПодключения(УчетнаяЗапись) Экспорт

	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = УчетнаяЗапись.Пароль;
	Профиль.Пользователь     = УчетнаяЗапись.Логин;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	//Профиль.ИспользоватьSSLPOP3 = УчетнаяЗапись.ИспользоватьSSLPOP3;
	//Профиль.ИспользоватьSSLSMTP = УчетнаяЗапись.ИспользоватьSSLSMTP;
	//Профиль.ИспользоватьSSLIMAP = Истина;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;  
		Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP = УчетнаяЗапись.ЛогинSMTP;                 		
	Иначе
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		Профиль.ПарольSMTP       = "";
		Профиль.ПользовательSMTP = "";
	КонецЕсли; 
	
	Возврат Профиль;

КонецФункции 

Процедура  ОтправитьПочтовоеСообщение(УчетнаяЗаписьОтправителя,АдресЭлектроннойПочты,ИмяФайла) Экспорт
	
	
	Профиль = ПолучитьПрофильИнтернетПочтовоеПодключения(УчетнаяЗаписьОтправителя);
	
	ИнтернетПочта = Новый ИнтернетПочта;
	Попытка
		
		ИнтернетПочта.Подключиться(Профиль);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		ОписаниеОшибки()); 
		
		
		ВызватьИсключение "Не удалось подключиться к почтовому серверу! Ошибка: " + ОписаниеОшибки();
		
	КонецПопытки;	
	
	ТекстСообщения = "";
	
	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	ПочтовоеСообщение.Получатели.Добавить(АдресЭлектроннойПочты);
	
	
	ПочтовоеСообщение.ИмяОтправителя = УчетнаяЗаписьОтправителя.Наименование;
	ПочтовоеСообщение.Отправитель = УчетнаяЗаписьОтправителя.АдресЭлектроннойПочты;
	ПочтовоеСообщение.Тема = "Data for service";
	
	ПочтовоеСообщение.Вложения.Добавить(ИмяФайла);
	
	
	Попытка
		
		ИнтернетПочта.Послать(ПочтовоеСообщение);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		ОписаниеОшибки()); 
		
		ВызватьИсключение "Не удалось отправить сообщение об ошибке! Ошибка: " + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	

Функция ПолучитьНастройкиТЖ()  Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.Настройки.СрезПоследних() КАК Настройки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КоллекцияКолонок = РезультатЗапроса.Колонки;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() тогда
		
		Для каждого Колонка из КоллекцияКолонок Цикл
			ИмяКолонки = Колонка.Имя;
			
			СтруктураПараметров.Вставить(ИмяКолонки,Выборка[ИмяКолонки]);
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат СтруктураПараметров;
КонецФункции	

Функция ИмяСобытияDB(ТипСУБД)
	
	Если ТипСУБД = Перечисления.ТипСУБД.PostgreSQL Тогда
		Возврат "DBPOSTGRS";
	ИначеЕсли ТипСУБД = Перечисления.ТипСУБД.Файловая Тогда
		Возврат "DBV8DBEng";
	ИначеЕсли ТипСУБД = Перечисления.ТипСУБД.Oracle Тогда
		Возврат "DBORACLE";
	ИначеЕсли ТипСУБД = Перечисления.ТипСУБД.DB2 Тогда
		Возврат "DB2";
	КонецЕсли;
	
	Возврат "DBMSSQL";
	
КонецФункции

Процедура ДобавитьСобытиеАнализДлительныхЗапросов(ЭлементXML,МинимальнаяДлительностьЗапроса,ВключатьПланыЗапросов,ИмяСобытия,ИмяПотока, НомерСеанса = "") 
	
	
	Длительность = Формат(МинимальнаяДлительностьЗапроса * 10000, "ЧН=; ЧГ=0");
	
	СобытиеSdbl = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(СобытиеSdbl, ИмяПотока+":eq", "Name", "SDBL");
	ДобавитьУсловие(СобытиеSdbl, ИмяПотока+":ge", "Duration", Длительность);
	Если ЗначениеЗаполнено(НомерСеанса) Тогда
		ДобавитьУсловие(СобытиеSdbl, ИмяПотока+":eq", "SessionID", НомерСеанса);
	КонецЕсли;
	СобытиеSdbl.ЗаписатьКонецЭлемента();
	
	СобытиеDB = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(СобытиеDB, ИмяПотока+":eq", "Name", ИмяСобытия);
	ДобавитьУсловие(СобытиеDB, ИмяПотока+":ge", "Duration", Длительность);
	Если ЗначениеЗаполнено(НомерСеанса) Тогда
		ДобавитьУсловие(СобытиеSdbl, ИмяПотока+":eq", "SessionID", НомерСеанса);
	КонецЕсли;
	СобытиеDB.ЗаписатьКонецЭлемента();
	
	
	ДобавитьСвойство(ЭлементXML, "p:processName",ИмяПотока);
	ДобавитьСвойство(ЭлементXML, "t:computerName",ИмяПотока);
	ДобавитьСвойство(ЭлементXML, "t:connectID",ИмяПотока);
	ДобавитьСвойство(ЭлементXML, "dbpid",ИмяПотока);
	ДобавитьСвойство(ЭлементXML, "Context",ИмяПотока);
	//ДобавитьСвойство(ЭлементXML, "Sdbl",ИмяПотока);
	ДобавитьСвойство(ЭлементXML, "Sql",ИмяПотока);
	//ДобавитьСвойство(ЭлементXML, "Func",ИмяПотока);
	//ДобавитьСвойство(ЭлементXML, "tableName",ИмяПотока);
	ДобавитьСвойство(ЭлементXML, "Usr",ИмяПотока);
	
	Если ВключатьПланыЗапросов Тогда
		ДобавитьСвойство(ЭлементXML, "planSQLText",ИмяПотока);
	КонецЕсли;
	
	//ДобавитьСвойство(ЭлементXML, "all",ИмяПотока);
	
	
	ЭлементXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция ПолучитьТаблицуЗапросов()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяСобытия",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("ИмяПроцесса",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Дата",Новый ОписаниеТипов("Дата"));
	ТаблицаЗапросов.Колонки.Добавить("МоментВремени",Новый ОписаниеТипов("Число"));
	ТаблицаЗапросов.Колонки.Добавить("Длительность",Новый ОписаниеТипов("Число"));
	ТаблицаЗапросов.Колонки.Добавить("p_processName",Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
	ТаблицаЗапросов.Колонки.Добавить("t_computerName",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("t_connectID",Новый ОписаниеТипов("Число"));
	ТаблицаЗапросов.Колонки.Добавить("dbpid",Новый ОписаниеТипов("Число"));
	ТаблицаЗапросов.Колонки.Добавить("Context",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Sdbl",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Sql",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Func",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("tableName",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("Usr",Новый ОписаниеТипов("Строка"));
	ТаблицаЗапросов.Колонки.Добавить("planSQLText",Новый ОписаниеТипов("Строка"));

	Возврат ТаблицаЗапросов;
	
КонецФункции	

Функция ПолучитьПотокиДляОбработки(ТаблицаПутейКФайлам,КоличествоПотоков)
	
	ТаблицаФайловПоДатам = ТаблицаПутейКФайлам.Скопировать();
	ТаблицаФайловПоДатам.Свернуть("ДатаФайла");
	ТаблицаФайловПоДатам.Сортировать("ДатаФайла");
    ТаблицаФайловПоДатам.Колонки.Добавить("НомерФоновогоПотока",Новый ОписаниеТИпов("Число"));
	
	ТаблицаПотоков = Новый ТаблицаЗначений;
	ТаблицаПотоков.Колонки.Добавить("НомерПотока",Новый ОписаниеТИпов("Число"));
	ТаблицаПотоков.Колонки.Добавить("ТекТаблицаПотока");
	
	
	КоличествоПериодов = ТаблицаФайловПоДатам.Количество();
	
	Если КоличествоПотоков > 1 Тогда
		КолПериодовВПотоке = Окр(КоличествоПериодов / КоличествоПотоков);  
		
		Если КолПериодовВПотоке > 0 Тогда
			СчПериодов = 0;
			ТекНомерФоновогоПотока = 1;
			
			Для каждого СтрокаТЗ из  ТаблицаФайловПоДатам Цикл
				
				СчПериодов = СчПериодов+1;
				
				СтрокаТЗ.НомерФоновогоПотока = ТекНомерФоновогоПотока;
				
				Если СчПериодов = КолПериодовВПотоке и ТекНомерФоновогоПотока < КоличествоПотоков  Тогда
					СчПериодов = 0;
					ТекНомерФоновогоПотока = ТекНомерФоновогоПотока + 1;
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;
	КонецЕсли;	
	
	Сч = 0;
	Для каждого СтрокаФайлаПоДатам из ТаблицаФайловПоДатам  Цикл
		
		ТаблицаТекущегоПотока = ТаблицаПутейКФайлам.Скопировать();
		ТаблицаТекущегоПотока.Очистить();
		
		МассивСтрокПотока = ТаблицаПутейКФайлам.НайтиСтроки(Новый Структура("ДатаФайла",СтрокаФайлаПоДатам.ДатаФайла));
		
		Для каждого ЭлементМассива из МассивСтрокПотока Цикл
			
			СтрокаТекПотока = ТаблицаТекущегоПотока.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТекПотока,ЭлементМассива);
			
		КонецЦикла;	
		
		СтрокаТаблицыПотока = ТаблицаПотоков.Добавить();
		СтрокаТаблицыПотока.НомерПотока = ?(КоличествоПотоков > 1,СтрокаФайлаПоДатам.НомерФоновогоПотока,Сч);
		СтрокаТаблицыПотока.ТекТаблицаПотока = ТаблицаТекущегоПотока;
		
		
		Сч = Сч + 1;
	КонецЦикла;	
	
	
	Возврат ТаблицаПотоков;
	
КонецФункции

Процедура ОбработатьПотокЛоговТЖ(НомерПотока,ТаблицаПутейПотока,СтруктураПараметров) Экспорт
	
	
	
	НачалоОбработки = ТекущаяДата();
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("ТипСУБД",СтруктураПараметров.ТипСУБД);
	ПараметрыФайла.Вставить("НачальнаяСтрока",1);
	ПараметрыФайла.Вставить("ЗагружатьЛогиВПамятьДляОбработки",СтруктураПараметров.ЗагружатьЛогиВПамятьДляОбработки);
	ПараметрыФайла.Вставить("ВерсияПлатформы1С",СтруктураПараметров.ВерсияПлатформы1С);
	
	ТаблицаЗапросов = ПолучитьТаблицуЗапросов();
	
	ПериодФайлов = '00010101';
	
	ОбщееКоличествоСтрок = 0;
	ОбщийРазмерФайлов = 0;
	
	Для каждого СтрокаТЗ из  ТаблицаПутейПотока Цикл
		
		ПериодФайлов = СтрокаТЗ.ДатаФайла;
		
		НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
		НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
		НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
		НаборЗаписейИндикатора.Прочитать();
		
		СтрокаНбора = НаборЗаписейИндикатора[0];
		СтрокаНбора.НомерТекущегоФайла = СтрокаНбора.НомерТекущегоФайла+1;
		СтрокаНбора.ПутьКФайлу = СтрокаТЗ.ПутьКФайлу;
		СтрокаНбора.ДатаФайла = СтрокаТЗ.ДатаФайла;
		НаборЗаписейИндикатора.Записать();
		
		
		ПараметрыФайла.Вставить("ПутьКФайлу",СтрокаТЗ.ПутьКФайлу);
		ПараметрыФайла.Вставить("ДатаФайла",СтрокаТЗ.ДатаФайла);
		ПараметрыФайла.Вставить("ИмяПроцесса",СтрокаТЗ.ИмяПроцесса);
		
		Попытка 
			КоличествоСтрок = 0;
			
			ОбработатьСтрокиФайлаТЖ(НомерПотока,ТаблицаЗапросов,ПараметрыФайла,КоличествоСтрок);
			
			ОбщееКоличествоСтрок = ОбщееКоличествоСтрок + КоличествоСтрок; 
			ОбщийРазмерФайлов = ОбщийРазмерФайлов + СтрокаТЗ.РазмерФайла;
		Исключение
			ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
			УровеньЖурналаРегистрации.Ошибка, 
			"ОбработкаДанныхТехнологическогоЖурнала",, 
			"Не удалось обработать данные файла лога ТЖ: "+Строка(СтрокаТЗ.ПутьКФайлу)+" "+ОписаниеОшибки()); 
			
		КонецПопытки;
		
		
		
		ВремяОбработки = Цел((ТекущаяДата() - НачалоОбработки)/60);
		
		ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Информация, 
		"ОбработкаДанныхТехнологическогоЖурнала",, 
		"Обработаны данные файла лога ТЖ: "+СокрЛП(СтрокаТЗ.ПутьКФайлу)+" Время обработки (сек): "+Строка(ВремяОбработки)+" Поток: "+Строка(НомерПотока)); 
		
		
		Если НомерПотока > 0 Тогда
			
			НаборЗаписейПотока =  РегистрыСведений.ДанныеДляПотоков.СоздатьНаборЗаписей();
			НаборЗаписейПотока.Отбор.ДатаФайла.Установить(СтрокаТЗ.ДатаФайла);
			НаборЗаписейПотока.Отбор.ПутьКФайлу.Установить(СтрокаТЗ.ПутьКФайлу);
			НаборЗаписейПотока.Отбор.НомерПотока.Установить(НомерПотока);
			НаборЗаписейПотока.Прочитать();
			
			Для каждого СтрокаНабора из НаборЗаписейПотока Цикл
				СтрокаНабора.Обработан = Истина;
				СтрокаНабора.ВремяОбработки = ВремяОбработки;
				СтрокаНабора.ДатаОкончания = ТекущаяДата();
				
			КонецЦикла;	
			
			НаборЗаписейПотока.Записать();
				
		КонецЕсли;

		
		
	КонецЦикла;	
	
	
	ПотокЗавершен = ?(НомерПотока = 0,Истина,Ложь);
	
	Если ТаблицаЗапросов.Количество() > 0 Тогда
		Если СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах Тогда
			ЗафиксироватьТаблицуЗапросовДляОтправки(ТаблицаЗапросов,ПериодФайлов);
		Иначе
			ОтправитьТаблицуЗапросовНаСервер(ТаблицаЗапросов,СтруктураПараметров,ПериодФайлов,НомерПотока);
		КонецЕсли;
	КонецЕсли;
	
	
	Если НомерПотока > 0  Тогда
		
		ПодготовитьНовуюТаблицуФайловДляПотока(ТаблицаПутейПотока,НомерПотока);
		
		Если  ТаблицаПутейПотока.Количество() >0 Тогда
			
			НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
			НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
			НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
			НаборЗаписейИндикатора.Прочитать();
			
			СтрокаНабора = НаборЗаписейИндикатора[0];
			СтрокаНабора.ОтправленоЗапросов = СтрокаНабора.ОтправленоЗапросов+ТаблицаЗапросов.Количество();
			СтрокаНабора.ВсегоСтрокОбработано = СтрокаНабора.ВсегоСтрокОбработано+ОбщееКоличествоСтрок;
			СтрокаНабора.РазмерОбработанныхФайлов = СтрокаНабора.РазмерОбработанныхФайлов+ОбщийРазмерФайлов;
			НаборЗаписейИндикатора.Записать();

			
			ОбработатьПотокЛоговТЖ(НомерПотока,ТаблицаПутейПотока,СтруктураПараметров);
		Иначе
			ПотокЗавершен = Истина;
		КонецЕсли;
		
	КонецЕсли;

	
	
	Если ПотокЗавершен Тогда
		
		НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
		НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
		НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
		НаборЗаписейИндикатора.Прочитать();
		
		СтрокаНабора = НаборЗаписейИндикатора[0];
		СтрокаНабора.ОтправленоЗапросов = СтрокаНабора.ОтправленоЗапросов+ТаблицаЗапросов.Количество();
		СтрокаНабора.ВсегоСтрокОбработано = СтрокаНабора.ВсегоСтрокОбработано+ОбщееКоличествоСтрок;
		СтрокаНабора.РазмерОбработанныхФайлов = СтрокаНабора.РазмерОбработанныхФайлов+ОбщийРазмерФайлов;

		СтрокаНабора.ОбработкаЗавершена = Истина;
		НаборЗаписейИндикатора.Записать();
		
		
		Если  СтруктураПараметров.Свойство("ТЗПутейОперативногоТЖ") Тогда
			
			УстановитьОтметкуУОбработанныхПутейТЖ(СтруктураПараметров.ТЗПутейОперативногоТЖ);
			
		КонецЕсли;	
		
	КонецЕсли;
		

	
КонецПроцедуры	


Процедура УстановитьОтметкуУОбработанныхПутейТЖ(ТаблицаПутей) 

	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеДляПотоков");
	СтрокаБлокировки.УстановитьЗначение("Сервис", Перечисления.Сервисы.QueryTJ);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервис", Перечисления.Сервисы.QueryTJ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДляПотоков.ДатаФайла КАК ДатаФайла,
	|	ДанныеДляПотоков.ПутьКФайлу,
	|	ДанныеДляПотоков.РазмерФайла КАК РазмерФайла,
	|	ДанныеДляПотоков.ИмяПроцесса,
	|	ДанныеДляПотоков.Сервис
	|ИЗ
	|	РегистрСведений.ДанныеДляПотоков КАК ДанныеДляПотоков
	|ГДЕ
	|	НЕ ДанныеДляПотоков.Обработан
	|	И ДанныеДляПотоков.Сервис = &Сервис
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаФайла,
	|	РазмерФайла УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗафиксироватьТранзакцию();

	Если НЕ Выборка.Следующий() Тогда
		
		Для каждого СтрокаТаблицы из ТаблицаПутей Цикл
			
			НаборРегистра = РегистрыСведений.ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Период.Установить(СтрокаТаблицы.Период);
			НаборРегистра.Прочитать();
			
			Для каждого СтрокаНабора из НаборРегистра Цикл
				СтрокаНабора.Обработан = Истина;
			КонецЦикла;	
			
			НаборРегистра.Записать();
			
		КонецЦикла;	
		
	КонецЕсли;  
	

	
КонецПроцедуры

Процедура ЗафиксироватьТаблицуЗапросовДляОтправки(ТаблицаЗапросов,ПериодФайлов) 
	
	ПериодОбработки = ТекущаяДата();
	
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеЗапросовДляОтправки");
	ЭлементБлокировки.УстановитьЗначение("ПериодОбработки", ПериодОбработки);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	
	НаборРегистра = РегистрыСведений.ДанныеЗапросовДляОтправки.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.ПериодОбработки.Установить(ПериодОбработки);
	НаборРегистра.Прочитать();
	
	СтрокаНабора = НаборРегистра.Добавить();
	СтрокаНабора.ПериодОбработки = ПериодОбработки;
	СтрокаНабора.НомерПакета  =  НаборРегистра.Количество();
	СтрокаНабора.ДанныеЛоговТЖ = Новый ХранилищеЗначения(ТаблицаЗапросов,Новый СжатиеДанных(9));
	СтрокаНабора.ТЖКоличество = ТаблицаЗапросов.Количество();
	СтрокаНабора.ПериодФайлов = ПериодФайлов;
	
	НаборРегистра.Записать();
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры	

Процедура  ОтправитьТаблицуЗапросовНаСервер(ТаблицаЗапросов,СтруктураПараметров,ПериодФайлов,НомерПотока) Экспорт

	Если НЕ СтруктураПараметров.ФормироватьПочтовыеФайлы Тогда
		
		Попытка
			Прокси = ПолучитьПодключениеКБазе(СтруктураПараметров);
		Исключение
			ЗаписьЖурналаРегистрации( "ПолучитьПодключениеКБазе",
			УровеньЖурналаРегистрации.Ошибка, 
			"ПолучитьПодключениеКБазе",, 
			"Не удалось вызвать веб-сервис: "+ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
	
	
	
	Если СтруктураПараметров.ФормироватьПочтовыеФайлы Тогда
		
		СформироватьФайлыПочтовыхВложений(ТаблицаЗапросов,СтруктураПараметров,ПериодФайлов);
		
	Иначе	
		
		ОтправитьТаблицуЗапросовПоВебСервису(Прокси,ТаблицаЗапросов,СтруктураПараметров.ИденификаторБазы);
	КонецЕсли;
	
	
	ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
	УровеньЖурналаРегистрации.Информация, 
	"ОбработкаДанныхТехнологическогоЖурнала",, 
	"Отправлены данные по веб-сервису о запросах в количестве (шт): "+Строка(ТаблицаЗапросов.Количество())+" Поток: "+Строка(НомерПотока)); 
	
	
	НаборЗаписей = РегистрыСведений.ЛогОтправкиДанных.СоздатьНаборЗаписей();
	
	СтрокаНабора = НаборЗаписей.Добавить();
	СтрокаНабора.Период = ТекущаяДата();
	СтрокаНабора.КоличествоЗаписейОтправлено  = ТаблицаЗапросов.Количество();
	
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		
	КонецПопытки;
	
	
	Если НЕ СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах  Тогда
		ФлагРанжирования = НеобходимоПроизвестиРанжирование(ПериодФайлов);
	Иначе
		ФлагРанжирования = Истина;
	КонецЕсли;	
	
	Если НЕ СтруктураПараметров.ФормироватьПочтовыеФайлы и НомерПотока > 0 и ЗначениеЗаполнено(ПериодФайлов) и ФлагРанжирования Тогда
		Прокси.MoveRange(ПериодФайлов,СтруктураПараметров.ИденификаторБазы);
	КонецЕсли;
	
	
КонецПроцедуры	
	
Процедура ПодготовитьНовуюТаблицуФайловДляПотока(ТаблицаПутейПотока,НомерПотока)
	
	ТаблицаПутейПотока.Очистить();
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеДляПотоков");
	СтрокаБлокировки.УстановитьЗначение("Сервис", Перечисления.Сервисы.QueryTJ);
	СтрокаБлокировки.УстановитьЗначение("НомерПотока", 0);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервис", Перечисления.Сервисы.QueryTJ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДляПотоков.ДатаФайла КАК ДатаФайла,
	|	ДанныеДляПотоков.ПутьКФайлу,
	|	ДанныеДляПотоков.РазмерФайла КАК РазмерФайла,
	|	ДанныеДляПотоков.ИмяПроцесса,
	|	ДанныеДляПотоков.Сервис
	|ИЗ
	|	РегистрСведений.ДанныеДляПотоков КАК ДанныеДляПотоков
	|ГДЕ
	|	ДанныеДляПотоков.НомерПотока = 0
	|	И ДанныеДляПотоков.Сервис = &Сервис
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаФайла,
	|	РазмерФайла УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДанныеДляПотоков.СоздатьНаборЗаписей();
		Набор.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
		Набор.Отбор.ДатаФайла.Установить(Выборка.ДатаФайла);
		Набор.Отбор.ПутьКФайлу.Установить(Выборка.ПутьКФайлу);
		Набор.Прочитать();
		
		Для каждого СтрокаНабора  из Набор Цикл
			СтрокаНабора.НомерПотока = НомерПотока;
		КонецЦикла;	  
		Набор.Записать();
		
		
		СтрокаТаблицы = ТаблицаПутейПотока.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		СтрокаТаблицы.НомерПотока = НомерПотока;
		
	КонецЦикла;  
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция НеобходимоПроизвестиРанжирование(ПериодФайлов) 
	
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаФайла",ПериодФайлов);
	Запрос.УстановитьПараметр("Сервис", Перечисления.Сервисы.QueryTJ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ДанныеДляПотоков.Обработан) КАК Обработан
	|ИЗ
	|	РегистрСведений.ДанныеДляПотоков КАК ДанныеДляПотоков
	|ГДЕ
	|	ДанныеДляПотоков.ДатаФайла = &ДатаФайла
	|	И ДанныеДляПотоков.Сервис = &Сервис";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат  Выборка.Обработан;
	
КонецФункции	

Процедура ОтправитьТаблицуЗапросовПоВебСервису(Прокси,ТаблицаЗапросов,ИденификаторБазы)  
	
	ТаблицаЗапросовСтрокой = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(ТаблицаЗапросов,Новый СжатиеДанных(9)));
	
	Прокси.SendQuery(ТаблицаЗапросовСтрокой,ИденификаторБазы);
	
КонецПроцедуры	

Процедура ЗаполнитьДаннымиТаблицуЗапросов(ТаблицаЗапросов,ОбрабатываемаяСтрока,СтруктураПараметров)
	
	Если ОбрабатываемаяСтрока="" Тогда
        Возврат;
    КонецЕсли; 
    
    СтрокаУдалена = Ложь; 

    НомерСтрокиФайла = СтруктураПараметров.НомерСтрокиФайла;
    ПутьКФайлу = СокрЛП(СтруктураПараметров.ПутьКФайлу);
    ДатаФайла = СтруктураПараметров.ДатаФайла;
      
    
    ПозицияРазделителя=Найти(ОбрабатываемаяСтрока,",");
    
    ТекСтрока=Лев(ОбрабатываемаяСтрока,ПозицияРазделителя-1);
    
    ДатаСобытия = Дата(ДатаФайла+"0000");
    МоментВремени = 0;
    
    ДатаСобытия=Дата(ДатаФайла+(Число(Сред(ТекСтрока,1,2))*60)+Число(Сред(ТекСтрока,4,2)));
    МоментВремени=Сред(ТекСтрока,7,4);
     
    ОбрабатываемаяСтрока=Сред(ОбрабатываемаяСтрока,ПозицияРазделителя+1);
    
    Длительность=Число(Сред(ТекСтрока,Найти(ТекСтрока,"-")+1)/?(СтруктураПараметров.ВерсияПлатформы1С = Перечисления.ВерсияПлатформы.v83,1000000,10000));
    
    ПозицияРазделителя=Найти(ОбрабатываемаяСтрока,",");
    ЗначениеСобытия = НРЕГ(Лев(ОбрабатываемаяСтрока,ПозицияРазделителя-1));
    
	
	
	 
    //другие события мы пока не обрабатываем и не будем тратить на них время обработки
	ИмяСобытия = НРег(ИмяСобытияDB(СтруктураПараметров.ТипСУБД));
	Если 
		//ЗначениеСобытия <> "sdbl" 
		// и 
		ЗначениеСобытия <> ИмяСобытия
		и ЗначениеСобытия <> "context"
		тогда
		Возврат;
	КонецЕсли;	
    
    
    СтрокаТаблицаЗапросов=ТаблицаЗапросов.Добавить();
    СтрокаТаблицаЗапросов.ИмяПроцесса = СтруктураПараметров.ИмяПроцесса;
    СтрокаТаблицаЗапросов.Дата=ДатаСобытия;
    СтрокаТаблицаЗапросов.МоментВремени=МоментВремени;
    СтрокаТаблицаЗапросов.Длительность=Длительность;
    СтрокаТаблицаЗапросов.ИмяСобытия =  ЗначениеСобытия;
	
    ОбрабатываемаяСтрока=Сред(ОбрабатываемаяСтрока,ПозицияРазделителя+1);
    
   
    ПозицияРазделителя=Найти(ОбрабатываемаяСтрока,",");
    
    Если ПозицияРазделителя=0 Тогда
        Возврат;
    Иначе  
        //СтрокаТаблицаЗапросов.Уровень=Лев(ОбрабатываемаяСтрока,ПозицияРазделителя-1);		
        ОбрабатываемаяСтрока=Сред(ОбрабатываемаяСтрока,ПозицияРазделителя+1);
    КонецЕсли; 
    
    
    Пока Истина Цикл
        
        ПозицияПараметра = Найти(ОбрабатываемаяСтрока,"=");
        Если ПозицияПараметра = 0  Тогда
            прервать;
        КонецЕсли; 
        ИмяКолонкиТаблицаЗапросов = Лев(ОбрабатываемаяСтрока,ПозицияПараметра-1); 
        ОбрабатываемаяСтрока = Прав(ОбрабатываемаяСтрока,СтрДлина(ОбрабатываемаяСтрока) - СтрДлина(ИмяКолонкиТаблицаЗапросов)-1);
        
        ИмяКолонкиТаблицаЗапросов = СтрЗаменить(ИмяКолонкиТаблицаЗапросов,":","_");
        
        ПозицияТекстовогоБлока = Найти(ОбрабатываемаяСтрока,"'");
        ПозицияОкончанияТекстовогоБлока = 0;
        Если ПозицияТекстовогоБлока = 1 Тогда
            ПозицияОкончанияТекстовогоБлока = Найти(Прав(ОбрабатываемаяСтрока,СтрДлина(ОбрабатываемаяСтрока) - СтрДлина(ПозицияТекстовогоБлока)),"'"); 
		КонецЕсли;
		
		Если  НРЕГ(ИмяКолонкиТаблицаЗапросов) = "context" Тогда
			ПозицияТекстовогоБлока = 1;
			ПозицияОкончанияТекстовогоБлока = СтрДлина(ОбрабатываемаяСтрока);
		КонецЕсли;	
		
		
		Если НРЕГ(ИмяКолонкиТаблицаЗапросов) = "descr" или НРЕГ(ИмяКолонкиТаблицаЗапросов) = "sql" или НРЕГ(ИмяКолонкиТаблицаЗапросов) = "plansqltext" тогда // в этом событии значение этого параметра может содержать  одинарные кавычки в обычных кавычках
			ПозицияТекстовогоБлокаСКавычками = Найти(ОбрабатываемаяСтрока,"""");
			
			Если  ПозицияТекстовогоБлока > ПозицияТекстовогоБлокаСКавычками и ПозицияТекстовогоБлокаСКавычками <> 0  тогда
				ПозицияТекстовогоБлока = Мин(ПозицияТекстовогоБлока,ПозицияТекстовогоБлокаСКавычками);
				Если ПозицияТекстовогоБлока = 1 Тогда
					ПозицияОкончанияТекстовогоБлокаСКавычками = Найти(Прав(ОбрабатываемаяСтрока,СтрДлина(ОбрабатываемаяСтрока) - СтрДлина(ПозицияТекстовогоБлока)),""""); 
					ПозицияОкончанияТекстовогоБлока = Макс(ПозицияОкончанияТекстовогоБлокаСКавычками,ПозицияОкончанияТекстовогоБлока);
				КонецЕсли;
			Конецесли;
			
			
			Если НРЕГ(ИмяКолонкиТаблицаЗапросов) = "sql" тогда 
				НачалоПланаЗапроса = Найти(ОбрабатываемаяСтрока,"planSQLText")-3;
				
				ПозицияОкончанияТекстовогоБлока = Макс(НачалоПланаЗапроса,ПозицияОкончанияТекстовогоБлока);
				
			КонецЕсли;
			
			Если НРЕГ(ИмяКолонкиТаблицаЗапросов) = "plansqltext" тогда 
				ПозицияОкончанияТекстовогоБлока = СтрДлина(ОбрабатываемаяСтрока);
				
				ПозицияНачалаКонтекста = Найти(ОбрабатываемаяСтрока,"Context")-3;
				Если ПозицияНачалаКонтекста>0 тогда
					ПозицияОкончанияТекстовогоБлока = Мин(ПозицияНачалаКонтекста,ПозицияОкончанияТекстовогоБлока);
				КонецЕсли;
				
				
			КонецЕсли;

		КонецЕсли;	
		
        
        ПозицияЗначенияПараметра = Найти(ОбрабатываемаяСтрока,",");
        
        Если ПозицияТекстовогоБлока = 1 и ПозицияОкончанияТекстовогоБлока > 1 Тогда  //значит значением параметра является участок текста
            ЗначениеПараметра = Лев(ОбрабатываемаяСтрока,ПозицияОкончанияТекстовогоБлока+1); 
            ОбрабатываемаяСтрока = Прав(ОбрабатываемаяСтрока,СтрДлина(ОбрабатываемаяСтрока) - ПозицияОкончанияТекстовогоБлока-2);
			
			ЗаполнитьПараметрСтроки(ЗначениеСобытия,ТаблицаЗапросов,СтрокаТаблицаЗапросов,ИмяКолонкиТаблицаЗапросов,ЗначениеПараметра,СтрокаУдалена,ИмяСобытия);
			
	        //СтрокаТаблицаЗапросов[ИмяКолонкиТаблицаЗапросов]=СокрЛП(ЗначениеПараметра);
            
        ИначеЕсли ПозицияЗначенияПараметра > 0 тогда    
            ЗначениеПараметра = Лев(ОбрабатываемаяСтрока,ПозицияЗначенияПараметра-1); 
            ОбрабатываемаяСтрока = Прав(ОбрабатываемаяСтрока,СтрДлина(ОбрабатываемаяСтрока) - СтрДлина(ЗначениеПараметра)-1);
			
			ЗаполнитьПараметрСтроки(ЗначениеСобытия,ТаблицаЗапросов,СтрокаТаблицаЗапросов,ИмяКолонкиТаблицаЗапросов,ЗначениеПараметра,СтрокаУдалена,ИмяСобытия);
           // СтрокаТаблицаЗапросов[ИмяКолонкиТаблицаЗапросов]=СокрЛП(ЗначениеПараметра);
            
        Иначе	
            ЗначениеПараметра = ОбрабатываемаяСтрока;  
			
			ЗаполнитьПараметрСтроки(ЗначениеСобытия,ТаблицаЗапросов,СтрокаТаблицаЗапросов,ИмяКолонкиТаблицаЗапросов,ЗначениеПараметра,СтрокаУдалена,ИмяСобытия);
			
           // СтрокаТаблицаЗапросов[ИмяКолонкиТаблицаЗапросов]=СокрЛП(ЗначениеПараметра);
			
					
		   Если СтрокаУдалена тогда
			   ТаблицаЗапросов.Удалить(СтрокаТаблицаЗапросов);
				Возврат;
			КонецЕсли;
			
            прервать;
            
		КонецЕсли; 
		
		
		Если СтрокаУдалена тогда
			ТаблицаЗапросов.Удалить(СтрокаТаблицаЗапросов);
			Возврат;
		КонецЕсли;
		
    КонецЦикла; 
    
	Если ПустаяСтрока(СтрокаТаблицаЗапросов.sql) тогда
		ТаблицаЗапросов.Удалить(СтрокаТаблицаЗапросов);
		Возврат;
	КонецЕсли;
 
КонецПроцедуры

Процедура ОтправкаДанныхЗапросов() Экспорт
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Если СтруктураПараметров.Количество() > 0 и НЕ СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах Тогда
		
		ОбработатьФайлыТехнологическогоЖурнала();
		
	КонецЕсли;
КонецПроцедуры

Процедура ОперативноеВключениеТехнологическогоЖурнала() Экспорт
	

	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Если СтруктураПараметров.Количество() > 0 и  СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах Тогда
		
		НомерПотока = Константы.ТекущийПотокТЖ.Получить();
		
		НомерПотока = ?(НомерПотока > 2,1,НомерПотока);
		
		ИмяПотока = "query"+?(НомерПотока > 1,Строка(НомерПотока),"");
		
		ВключитьТехнологическийЖурнал(ИмяПотока);
		
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ВключитьТехнологическийЖурналНеоперативный() Экспорт
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Если СтруктураПараметров.Количество() > 0 и НЕ СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах Тогда
		ВключитьТехнологическийЖурнал();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЛоговТехнологическогоЖурнала() Экспорт
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Если СтруктураПараметров.Количество() > 0 и  СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах Тогда
		
		ОбработатьФайлыТехнологическогоЖурнала();
		
	КонецЕсли;

КонецПроцедуры

Процедура ОперативнаяОтправкаТаблицыЗапросов() Экспорт
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Если СтруктураПараметров.Количество() > 0 и  СтруктураПараметров.ОперативныйРежимПолученияИнформацииОЗапросах Тогда
		
		ОтправитьДанныеЗапросов(СтруктураПараметров);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьДанныеЗапросов(СтруктураПараметров)  Экспорт
	 
	 ТаблицаОтправленныхЗапросов = Новый ТаблицаЗначений;
	 ТаблицаОтправленныхЗапросов.Колонки.Добавить("ПериодОбработки");
	 ТаблицаОтправленныхЗапросов.Колонки.Добавить("НомерПакета");
	 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеЗапросовДляОтправки.ПериодОбработки,
	|	ДанныеЗапросовДляОтправки.НомерПакета,
	|	ДанныеЗапросовДляОтправки.ДанныеЛоговТЖ,
	|	ДанныеЗапросовДляОтправки.ПериодФайлов КАК ПериодФайлов
	|ИЗ
	|	РегистрСведений.ДанныеЗапросовДляОтправки КАК ДанныеЗапросовДляОтправки
	|ГДЕ
	|	НЕ ДанныеЗапросовДляОтправки.Отправлен
	|ИТОГИ ПО
	|	ПериодФайлов";
		  
	
	ВыборкаПоПериоду = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоПериоду.Следующий() Цикл
		
		ТаблицаЗапросов = ПолучитьТаблицуЗапросов();
		
		Выборка = ВыборкаПоПериоду.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТаблицаИзПакета = Выборка.ДанныеЛоговТЖ.Получить();
			
			Для каждого СтрокаТаблицы из ТаблицаИзПакета Цикл
				СтрокаДанных = ТаблицаЗапросов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанных,СтрокаТаблицы);
			КонецЦикла;
			
			СтрокаОтправкиЗапросов = ТаблицаОтправленныхЗапросов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОтправкиЗапросов,Выборка);
			
			
		КонецЦикла;	
		
		ОтправитьТаблицуЗапросовНаСервер(ТаблицаЗапросов,СтруктураПараметров,ВыборкаПоПериоду.ПериодФайлов,1);
		
	КонецЦикла;	
	
	
	ТаблицаОтправленныхЗапросов.Свернуть("ПериодОбработки,НомерПакета");
	
	Для каждого СтрокаТЗ из ТаблицаОтправленныхЗапросов Цикл
		НаборДанных = РегистрыСведений.ДанныеЗапросовДляОтправки.СоздатьНаборЗаписей();
		НаборДанных.Отбор.ПериодОбработки.Установить(СтрокаТЗ.ПериодОбработки);
		НаборДанных.Отбор.НомерПакета.Установить(СтрокаТЗ.НомерПакета);
		НаборДанных.Прочитать();
		
		Для каждого ЭлементНабора из НаборДанных Цикл
			ЭлементНабора.Отправлен = Истина;
		КонецЦикла;  
		
		НаборДанных.Записать();
	КонецЦикла;	
			




 КонецПроцедуры

Функция ПроверитьВерсию() Экспорт
	
	ТекущаяВерсия = "1-34";
	Если ТекущаяДата()-Константы.ДатаПроверкиВерсии.Получить() > 24*60*60 Тогда
		Попытка
			АктуальнаяВерсия = ПолучитьАктуальнуюВерсию();
			Если АктуальнаяВерсия <> "" И ТекущаяВерсия <> АктуальнаяВерсия Тогда
				Сообщить("Вышла новая версия сервиса QueryTJ. Пожалуйста обновите конфигурацию с сайта http://gilev.ru/1c/cloud");
				Сообщить("	Установленная версия: " + ТекущаяВерсия);
				Сообщить("	Актуальная версия: " + АктуальнаяВерсия);
			КонецЕсли;
			Константы.ДатаПроверкиВерсии.Установить(ТекущаяДата());
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьОбновлениеРелиза(ТекущаяВерсия);

	
	Возврат ТекущаяВерсия
КонецФункции

Функция ПолучитьАктуальнуюВерсию() Экспорт
	
	АктуальнаяВерсия = "";

	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	Если СтруктураПараметров.Количество()=0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.ФормироватьПочтовыеФайлы Тогда
		
		Попытка
			Прокси = ПолучитьПодключениеКБазе(СтруктураПараметров);
		Исключение
			Возврат АктуальнаяВерсия;
		КонецПопытки;
	Иначе
		Возврат АктуальнаяВерсия;
	КонецЕсли;
	
	
	Попытка		
		АктуальнаяВерсия  = Прокси.GetCurrentVersion("1");
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка при проверке обновления", ,,,ОписаниеОшибки());
	КонецПопытки;

	Возврат АктуальнаяВерсия;
	
КонецФункции

 Процедура ВыполнитьОбновлениеРелиза(ТекущийНомерРелиза)  Экспорт
	
	
	Настройки = ПолучитьНастройкиТЖ();
	
	Если  Настройки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;   
	
	
	Если ТекущийНомерРелиза = Настройки.НомерРелиза Тогда
		Возврат;
	КонецЕсли;	
	
	
	Редакция =1;
	Часть = 1;
	
	Если НЕ ПустаяСтрока(Настройки.НомерРелиза) 
		Тогда
		Редация = Число(Лев(Настройки.НомерРелиза,Найти(Настройки.НомерРелиза,"-")-1));
		Часть = Число(Сред(Настройки.НомерРелиза,Найти(Настройки.НомерРелиза,"-")+1));
	КонецЕсли;	
	
	Если Редакция <= 1 и  Часть < 3 Тогда
		
		НаборНастройки =  РегистрыСведений.Настройки.СоздатьНаборЗаписей();
		НаборНастройки.Отбор.Период.Установить(Настройки.Период);
		НаборНастройки.Прочитать();
		
		ДЛя каждого СтрокаНабора из НаборНастройки Цикл
			СтрокаНабора.WSDL_УдаленноеПодключениеРезерв = "http://kitt.gilev.ru:8888/querytj/ws/QueryTJ.1cws?wsdl";
		КонецЦикла;	
		
		НаборНастройки.Записать();
		
	КонецЕсли;	
	
	
	
	НаборНастройки =  РегистрыСведений.Настройки.СоздатьНаборЗаписей();
	НаборНастройки.Отбор.Период.Установить(Настройки.Период);
	НаборНастройки.Прочитать();
	
	ДЛя каждого СтрокаНабора из НаборНастройки Цикл
		СтрокаНабора.НомерРелиза = ТекущийНомерРелиза;
	КонецЦикла;	
	
	НаборНастройки.Записать();

	
КонецПроцедуры	

// Контроль чтения данных ТЖ
//
Процедура ВыполнитьКонтрольЧтенияТЖ() Экспорт
	
	СостояниеТестирования = РегистрыСведений.СостояниеТестирования.СоздатьНаборЗаписей();
	СостояниеТестирования.Записать();
	ЗаписьСостояниетестирования = СостояниеТестирования.Добавить();
	
	// этап 1
	Результат = НачатьТестовыйАнализДолгихЗапросов();
	
	ЗаписьСостояниетестирования.Этап = 1;
	ЗаполнитьЗначенияСвойств(ЗаписьСостояниетестирования, Результат);
	СостояниеТестирования.Записать();
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	// этап 2
	Результат = НачатьТестовыйСборОшибок();
	
	ЗаписьСостояниетестирования.Этап = 2;
	ЗаполнитьЗначенияСвойств(ЗаписьСостояниетестирования, Результат);
	СостояниеТестирования.Записать();
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;

	// этап 3
	ЗаписьСостояниетестирования.Этап = 3;
	ЗаписьСостояниетестирования.Успех = Истина;
	ЗаписьСостояниетестирования.СообщениеобОшибке = "Ожидание применения настроек";
	СостояниеТестирования.Записать();

	ОбщегоНазначения.лПауза(60);
	
	// этап 4
	ЗаписьСостояниетестирования.Этап = 4;
	ЗаписьСостояниетестирования.Успех = Истина;
	ЗаписьСостояниетестирования.СообщениеобОшибке = "Имитация ошибок для анализа";
	СостояниеТестирования.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.Настройки КАК Настройки";
	Запрос.Выполнить();
	
	МассивЗаданий = Новый Массив;
	
	Задание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВызватьОшибку");
	МассивЗаданий.Добавить(Задание);

	Попытка
		ФоновыеЗадания.ОжидатьЗавершения(МассивЗаданий);
	Исключение
	КонецПопытки;
	
	// этап 5
	ЗаписьСостояниетестирования.Этап = 5;
	ЗаписьСостояниетестирования.Успех = Истина;
	ЗаписьСостояниетестирования.СообщениеобОшибке = "Отключение анализа ошибок";
	СостояниеТестирования.Записать();
	
	УдалитьСекциюИзКонфигурационногоФайла("query999");
	УдалитьСекциюИзКонфигурационногоФайла("er_excp999");
	
	ОбщегоНазначения.лПауза(60);
	
	// этап 6
	ЗаписьСостояниетестирования.Этап = 6;
	ЗаписьСостояниетестирования.Успех = Истина;
	ЗаписьСостояниетестирования.СообщениеобОшибке = "Отключение сбора событий и обработка результата";
	СостояниеТестирования.Записать();
	
	Результат = ВыполнитьЧтениеТестовыхОшибок();
	
	// этап 7
	ЗаписьСостояниетестирования.Этап = 7;
	ЗаписьСостояниетестирования.Успех = Результат.ПроверкаАнализаЗапросов или Результат.ПроверкаСборкаОшибок;
	
	СообщениеобОшибке = "Тестирование завершено." + Символы.ПС;
	СообщениеобОшибке = СообщениеобОшибке + "Сбор данных запросов: " + ?(Результат.ПроверкаАнализаЗапросов,"ВЫПОЛНЕНО", "НЕ ВЫПОЛНЕНО") + Символы.ПС;
	СообщениеобОшибке = СообщениеобОшибке + "Сбор данных об ошибках: " + ?(Результат.ПроверкаСборкаОшибок,"ВЫПОЛНЕНО", "НЕ ВЫПОЛНЕНО");
	ЗаписьСостояниетестирования.СообщениеобОшибке = СообщениеобОшибке;
	СостояниеТестирования.Записать();

КонецПроцедуры
	
Функция НачатьТестовыйАнализДолгихЗапросов()
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();

	ПутьКФайлу = СтрЗаменить(СтруктураПараметров.ПутьККонфигурационномуФайлу+"/logcfg.xml","/","\");
	
	ПутьКВременномуЛогу = ПолучитьИмяВременногоФайла("xml");
	
	ПространствоИменЛогаТЖ = "http://v8.1c.ru/v8/tech-log"; 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКВременномуЛогу, "UTF-8");        
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ИмяПотока = "query999";
	
	НомерСеанса = Формат(НомерСеансаИнформационнойБазы(), "ЧГ=0");
	
	Результат =  ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,ИмяПотока);
	
	Если НЕ Результат Тогда
		
		СообщениеОбОшибке = "Существующий конфигурационный файл не соответствует принятому формату: "+ПутьКФайлу+" "+ ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		СообщениеОбОшибке); 
		
		Возврат Новый Структура("Успех, СообщениеОбОшибке", Ложь, СообщениеОбОшибке);
	КонецЕсли; 
	
	ПериодХраненияТЖ = СтруктураПараметров.ПериодХраненияЛоговТехнологическогоЖурнала;
	Местоположение = СтруктураПараметров.ПутьКФайламЛоговТЖ;

	ПериодВключения = ТекущаяДата();	
	Набор = Неопределено;
	
	ИмяСобытия = ИмяСобытияDB(СтруктураПараметров.ТипСУБД);
	
	ДлительностьПорога = 0;
	
	ПутьМестоположение = Местоположение+"\SelfTest\Query1с_";
		
	ДлительныеЗапросы1с = СоздатьЭлементКаталогаЖурнала(ЗаписьXML,ПутьМестоположение,ПространствоИменЛогаТЖ,ПериодХраненияТЖ,ИмяПотока);
		
	ДобавитьСобытиеАнализДлительныхЗапросов(ДлительныеЗапросы1с,ДлительностьПорога,
		СтруктураПараметров.ВключатьПланыЗапросов, ИмяСобытия,ИмяПотока,НомерСеанса);
			
	Если СтруктураПараметров.ВключатьПланыЗапросов Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяПотока+":plansql"); 
		ЗаписьXML.ЗаписатьАтрибут("xmlns:"+ИмяПотока, ПространствоИменЛогаТЖ);
		ЗаписьXML.ЗаписатьАтрибут("location", ПутьМестоположение);
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;

	//Если  ОперативныйРежимПолученияИнформацииОЗапросах Тогда
	//	Набор = РегистрыСведений.ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
	//	СтрокаНабора = Набор.Добавить();
	//	СтрокаНабора.Период = ПериодВключения;
	//	СтрокаНабора.ПутьККаталогу = ПутьМестоположение;
	//	СтрокаНабора.НомерПотока = НомерПотока;
	//КонецЕсли;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	Ошибка = Ложь;
	
	Попытка
		
		КопироватьФайл(ПутьКВременномуЛогу,ПутьКФайлу);
		
		//Если Набор <> Неопределено Тогда
		//	Набор.Записать(Ложь);
		//	Константы.ТекущийПотокТЖ.Установить(НомерПотока+1);
		//КонецЕсли;
		
	Исключение
			
		СообщениеОбОшибке = "Не удалось записать файл настройки лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		СообщениеОбОшибке); 
		
		Возврат Новый Структура("Успех, СообщениеОбОшибке", Истина, СообщениеОбОшибке);

	КонецПопытки;
	
	СообщениеОбОшибке = "Настройки сбора долгих запросов включены";
	Возврат Новый Структура("Успех, СообщениеОбОшибке", Истина, СообщениеОбОшибке);
	
КонецФункции

Функция НачатьТестовыйСборОшибок()
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();

	ПутьКФайлу = СтрЗаменить(СтруктураПараметров.ПутьККонфигурационномуФайлу+"/logcfg.xml","/","\");
	
	ПутьКВременномуЛогу = ПолучитьИмяВременногоФайла("xml");
	
	ПространствоИменЛогаТЖ = "http://v8.1c.ru/v8/tech-log"; 
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКВременномуЛогу, "UTF-8");        
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ИмяПотока = "er_excp999";
	
	НомерСеанса = Формат(НомерСеансаИнформационнойБазы(), "ЧГ=0");
	
	Результат =  ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,ИмяПотока);
	
	Если НЕ Результат Тогда
		
		СообщениеОбошибке = "Существующий конфигурационный файл не соответствует принятому формату: "+ПутьКФайлу+" "+ ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		СообщениеОбошибке); 
		
		Возврат Новый Структура("Успех, СообщениеОбОшибке", Ложь, СообщениеОбОшибке);
	КонецЕсли; 
	
	
	ПериодХраненияТЖ = СтруктураПараметров.ПериодХраненияЛоговТехнологическогоЖурнала;
	Местоположение = СтруктураПараметров.ПутьКФайламЛоговТЖ;
	
	ПериодВключения = ТекущаяДата();	
	Набор = Неопределено;
	
	ПутьМестоположение = Местоположение+"\SelfTest\ERROR_EXCP";
	
	ОшибкиИсключения = СоздатьЭлементКаталогаЖурнала(ЗаписьXML,ПутьМестоположение,ПространствоИменЛогаТЖ,ПериодХраненияТЖ,ИмяПотока);
	
	ДобавитьСобытиеОшибкиИсключения(ОшибкиИсключения,ИмяПотока);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	Попытка
		
		КопироватьФайл(ПутьКВременномуЛогу,ПутьКФайлу);
		
	Исключение
		
		СообщениеОбОшибке = "Не удалось записать файл настройки лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		СообщениеОбошибке); 
		
		Возврат Новый Структура("Успех, СообщениеОбОшибке", Ложь, СообщениеОбОшибке);
		
	КонецПопытки;

	СообщениеОбОшибке = "Настройки сбора ошибок включены";
	Возврат Новый Структура("Успех, СообщениеОбОшибке", Истина, СообщениеОбОшибке);
	
КонецФункции

Процедура ДобавитьСобытиеОшибкиИсключения(ЭлементXML,ИмяПотока,НомерСеанса = "") 
	
	
	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "PROC");
	Если ЗначениеЗаполнено(НомерСеанса) Тогда
		ДобавитьУсловие(Событие, ИмяПотока+":eq", "SessionID", НомерСеанса);
	КонецЕсли;
	Событие.ЗаписатьКонецЭлемента();
	
	//Событие = ДобавитьСобытие(ЭлементXML);
	//ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "SCOM");
	//Событие.ЗаписатьКонецЭлемента();

	//Событие = ДобавитьСобытие(ЭлементXML);
	//ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "CONN");
	//Событие.ЗаписатьКонецЭлемента();

	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "ADMIN");
	Если ЗначениеЗаполнено(НомерСеанса) Тогда
		ДобавитьУсловие(Событие, ИмяПотока+":eq", "SessionID", НомерСеанса);
	КонецЕсли;
	Событие.ЗаписатьКонецЭлемента();

	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "EXCP");
	Если ЗначениеЗаполнено(НомерСеанса) Тогда
		ДобавитьУсловие(Событие, ИмяПотока+":eq", "SessionID", НомерСеанса);
	КонецЕсли;
	Событие.ЗаписатьКонецЭлемента();
	
	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "EXCPCNTX");
	Если ЗначениеЗаполнено(НомерСеанса) Тогда
		ДобавитьУсловие(Событие, ИмяПотока+":eq", "SessionID", НомерСеанса);
	КонецЕсли;
	Событие.ЗаписатьКонецЭлемента();

	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "QERR");
	Если ЗначениеЗаполнено(НомерСеанса) Тогда
		ДобавитьУсловие(Событие, ИмяПотока+":eq", "SessionID", НомерСеанса);
	КонецЕсли;
	Событие.ЗаписатьКонецЭлемента();

	
	ДобавитьСвойство(ЭлементXML, "all",ИмяПотока);
	
	
	ЭлементXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура УдалитьСекциюИзКонфигурационногоФайла(ИмяСекции)
	
	Настройки = ПолучитьНастройкиТЖ();
	
	ПутьКФайлу = СтрЗаменить(Настройки.ПутьККонфигурационномуФайлу+"/logcfg.xml","/","\");
	
	КонфигурационныйФайлТЖ = Новый Файл(ПутьКФайлу);
	
	Если НЕ КонфигурационныйФайлТЖ.Существует() Тогда
		Возврат;
	КонецЕсли;	
	
	ПутьКВременномуЛогу = ПолучитьИмяВременногоФайла("xml");
	
	ПространствоИменЛогаТЖ = "http://v8.1c.ru/v8/tech-log"; 
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКВременномуЛогу, "UTF-8");        
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// получим хмл-файл без секции
	Результат =  ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,ИмяСекции);
	
	Если НЕ Результат Тогда
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Существующий конфигурационный файл не соответствует принятому формату: "+ПутьКФайлу+" "+ ОписаниеОшибки()); 
		
		Возврат;
	КонецЕсли; 
		
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	Попытка
		
		КопироватьФайл(ПутьКВременномуЛогу,ПутьКФайлу);
		
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Возможно нет прав на доступ к каталогу для создания файла: "+ПутьКФайлу+" "+ ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Не удалось записать файл настройки лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
		
	КонецПопытки;
	
	
КонецПроцедуры

Функция ВыполнитьЧтениеТестовыхОшибок()
	
	ПроверкаАнализаЗапросов = Ложь;
	ПроверкаСборкаОшибок = Ложь;
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	ПутьКФайламЛоговТЖ = СтруктураПараметров.ПутьКФайламЛоговТЖ;
	
	СтруктураПараметров.НомерКлиентскойЧасти = 0;
	СтруктураПараметров.МетодОбработкиПороговДлительности = Перечисления.ОбработкаПорговДлительности.Первый;
	СтруктураПараметров.ПутьКФайламЛоговТЖ = СтруктураПараметров.ПутьКФайламЛоговТЖ + "\SelfTest\Query1с_";
	
	ТаблицаПутейКФайлам = ПолучитьТаблицуПутейФайлов(СтруктураПараметров);
	
	Константы.НомерФайла.Установить(0);
	
	НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
	НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
	НаборЗаписейИндикатора.Записать();

	ВсегоФайлов =  ТаблицаПутейКФайлам.Количество();
	
	Если ТаблицаПутейКФайлам.Колонки.Найти("Сервис") = Неопределено Тогда
		ТаблицаПутейКФайлам.Колонки.Добавить("Сервис");
		ТаблицаПутейКФайлам.ЗаполнитьЗначения(Перечисления.Сервисы.QueryTJ, "Сервис");
	КонецЕсли;
	
	НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
	НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.QueryTJ);
	НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(0);
	
	СтрокаНбора = НаборЗаписейИндикатора.Добавить();
	СтрокаНбора.Сервис = Перечисления.Сервисы.QueryTJ;
	СтрокаНбора.НомерПотока = 0;
	СтрокаНбора.ВсегоФайлов = ВсегоФайлов; 
	
	НаборЗаписейИндикатора.Записать();
	
	ОбработатьПотокЛоговТЖ(0,ТаблицаПутейКФайлам,СтруктураПараметров);
	
	НаборЗаписейИндикатора.Прочитать();
	Для Каждого Запись ИЗ НаборЗаписейИндикатора Цикл
		
		Если Запись.ОтправленоЗапросов > 0 Тогда
			ПроверкаАнализаЗапросов = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// проверка чтения ошибок
	СтруктураПараметров.Вставить("БазыМониторинга", Новый Структура);
	СтруктураПараметров.ПутьКФайламЛоговТЖ = ПутьКФайламЛоговТЖ + "\SelfTest\ERROR_EXCP";
	
	ТаблицаПутейКФайлам = ТехнологическийЖурнал_Status.ПолучитьТаблицуПутейФайлов(СтруктураПараметров);
	
	Константы.НомерФайла.Установить(0);
	
	НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
	НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
	НаборЗаписейИндикатора.Записать();

	ВсегоФайлов =  ТаблицаПутейКФайлам.Количество();
	
	Если ТаблицаПутейКФайлам.Колонки.Найти("Сервис") = Неопределено Тогда
		ТаблицаПутейКФайлам.Колонки.Добавить("Сервис");
		ТаблицаПутейКФайлам.ЗаполнитьЗначения(Перечисления.Сервисы.Status, "Сервис");
	КонецЕсли;
	
	НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
	НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
	НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(0);
	
	СтрокаНбора = НаборЗаписейИндикатора.Добавить();
	СтрокаНбора.Сервис = Перечисления.Сервисы.Status;
	СтрокаНбора.НомерПотока = 0;
	СтрокаНбора.ВсегоФайлов = ВсегоФайлов; 
	
	НаборЗаписейИндикатора.Записать();
	
	ТехнологическийЖурнал_Status.ОбработатьПотокЛоговТЖ(0,ТаблицаПутейКФайлам,СтруктураПараметров);
	
	НаборЗаписейИндикатора.Прочитать();
	Для Каждого Запись ИЗ НаборЗаписейИндикатора Цикл
		
		Если Запись.ОтправленоЗапросов > 0 Тогда
			ПроверкаСборкаОшибок = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		УдалитьФайлы(ПутьКФайламЛоговТЖ + "\SelfTest");
	Исключение
	КонецПопытки;
	
	Возврат Новый Структура("ПроверкаАнализаЗапросов, ПроверкаСборкаОшибок", ПроверкаАнализаЗапросов, ПроверкаСборкаОшибок);
	
КонецФункции