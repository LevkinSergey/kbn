
Функция ПолучитьНастройкиТЖ()  Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.Настройки.СрезПоследних() КАК Настройки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КолекцияКолонок = РезультатЗапроса.Колонки;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() тогда
		
		Для каждого Колонка из КолекцияКолонок Цикл
			ИмяКолонки = Колонка.Имя;
			
			СтруктураПараметров.Вставить(ИмяКолонки,Выборка[ИмяКолонки]);
		КонецЦикла;	
		
	КонецЕсли;	
		
	
	Возврат СтруктураПараметров;
КонецФункции	


//Включение ТЖ

Процедура ВключитьТехнологическийЖурнал(Сервер1с,ИмяПотока="er_excp") Экспорт   
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Сервер1с = СтруктураПараметров; // пока так заглушим	
	
	Если СтруктураПараметров.ВыключитьМониторингОшибки Тогда
		Возврат;		
	КонецЕсли;	
	

	
	ПутьКФайлу = СтрЗаменить(Сервер1с.ПутьККонфигурационномуФайлу+"/logcfg.xml","/","\");
	
	
	ПутьКВременномуЛогу = ПолучитьИмяВременногоФайла("xml");
	
	ПространствоИменЛогаТЖ = "http://v8.1c.ru/v8/tech-log"; 
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКВременномуЛогу, "UTF-8");        
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	НомерПотока = СтрЗаменить(ИмяПотока,"er_excp","");
	
	НомерПотока = ?(НомерПотока="",1,Число(НомерПотока)); 
	
	ИмяПотока = "er_excp"+?(СтруктураПараметров.НомерКлиентскойЧасти > 0,"_"+Строка(СтруктураПараметров.НомерКлиентскойЧасти)+"_","")+?(НомерПотока > 1,"_b",?(СтруктураПараметров.ОперативныйРежимПолученияИнформацииОбОшибках,"_a",""));

	
	Результат =  ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,ИмяПотока);
	
	
	Если НЕ Результат Тогда
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Существующий конфигурационный файл не соответствует принятому формату: "+ПутьКФайлу+" "+ ОписаниеОшибки()); 
		
		Возврат;
	КонецЕсли; 
	
	
	
	ПериодХраненияТЖ = Сервер1с.ПериодХраненияЛоговТехнологическогоЖурнала;
	Местоположение = Сервер1с.ПутьКФайламЛоговТЖ+?(СтруктураПараметров.НомерКлиентскойЧасти > 0,"\"+Строка(СтруктураПараметров.НомерКлиентскойЧасти),"");;
	
	ОперативныйРежимПолученияИнформации = СтруктураПараметров.ОперативныйРежимПолученияИнформацииОбОшибках;
	
	ПериодВключения = ТекущаяДата();	
	Набор = Неопределено;


			
	ПутьМестоположение = Местоположение+"\ERROR_EXCP";
	
	
	Если НЕ ОперативныйРежимПолученияИнформации Тогда
		ПутьМестоположение = Местоположение+"\ERROR_EXCP";
	Иначе
		ПутьМестоположение = Местоположение+"\ERROR_EXCP\"+Строка(НомерПотока)+"\"+Формат(ТекущаяДата(),"ДФ=HH_mm_ss");
	КонецЕсли;

	
	ОшибкиИсключения = СоздатьЭлементКаталогаЖурнала(ЗаписьXML,ПутьМестоположение,ПространствоИменЛогаТЖ,ПериодХраненияТЖ,ИмяПотока);
	
	ДобавитьСобытиеОшибкиИсключения(ОшибкиИсключения,ИмяПотока);
	
	
	Если  ОперативныйРежимПолученияИнформации Тогда
		Набор = РегистрыСведений.Status_ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
		СтрокаНабора = Набор.Добавить();
		//СтрокаНабора.Сервер1с = Сервер1с;
		СтрокаНабора.Период = ПериодВключения;
		СтрокаНабора.ПутьККаталогу = ПутьМестоположение;
		СтрокаНабора.НомерПотока = НомерПотока;
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	Ошибка = Ложь;
	
	Попытка
		
		КопироватьФайл(ПутьКВременномуЛогу,ПутьКФайлу);
		
		Если Набор <> Неопределено Тогда
			Набор.Записать(Ложь);
			
			НаборПотоков = РегистрыСведений.НомераПотоковПоСерверам.СоздатьНаборЗаписей();
			НаборПотоков.Отбор.Сервер1с.Установить(Сервер1с);
			
			СтрокаНабораПотоков = НаборПотоков.Добавить();
			//СтрокаНабораПотоков.Сервер1с = Сервер1с;
			СтрокаНабораПотоков.НомерПотока = НомерПотока+1;
			
			НаборПотоков.Записать();
			
		КонецЕсли;

	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Возможно нет прав на доступ к каталогу для создания файла: "+ПутьКФайлу+" "+ ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Не удалось записать файл настройки лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
		
		Ошибка = Истина;
		
	КонецПопытки;
	
	Если Не Ошибка Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Настройки технологического журнала включены в файле настроек: "+ПутьКФайлу;
		Сообщение.Сообщить();

	КонецЕсли;	

	
КонецПроцедуры


Функция ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,ИмяПотока)
	
	ИмяНачальногоЭлемента = "config"; 
	
	СуществующийФайл = Новый Файл(ПутьКФайлу);
	
	Если СуществующийФайл.Существует() тогда
		
		
		ЧтениеXML = Новый ЧтениеXML();
		
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
		
		
		Попытка			
			
			ЧтениеXML.Прочитать();//Корневой элемент
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();
			
			//ЗаписьЖурналаРегистрации("Ошибка чтения журнала ТЖ",УровеньЖурналаРегистрации.Ошибка,,ТекстОшибки);
			
			Если Найти(ТекстОшибки,"Ошибка разбора XML") > 0 Тогда
				
				
				ПутьТекущегоФайла = СуществующийФайл.ПолноеИмя;
				НовыйПутьФайла = СуществующийФайл.Путь+"logcfg_BAD_"+Строка(Новый УникальныйИдентификатор)+".xml";
				
				ЧтениеXML.Закрыть();
				
				ПереместитьФайл(ПутьТекущегоФайла,НовыйПутьФайла);
				
				
				ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяНачальногоЭлемента);     
				ЗаписьXML.ЗаписатьАтрибут("xmlns", ПространствоИменЛогаТЖ);
				
			КонецЕсли;	
			
			Возврат ИСТИНА;
		КонецПопытки;

		
		ИмяНачальногоЭлемента = ЧтениеXML.Имя;
		
		Если Найти(ИмяНачальногоЭлемента,"config")=0 тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("config");     
			ЗаписьXML.ЗаписатьАтрибут("xmlns", ПространствоИменЛогаТЖ);
			
			ЧтениеXML.Закрыть();
			
			Возврат ИСТИНА;
		Иначе
			ИмяНачальногоЭлемента = "config";
		КонецЕсли;	
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяНачальногоЭлемента);     
		
		Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ИмяАтрибута = ЧтениеXML.Имя;
				
				Если Найти(ИмяАтрибута,"xmlns") > 0 Тогда
					ИмяАтрибута = "xmlns"; 
				КонецЕсли;	
				
				ЗначениеАтрибута = ЧтениеXML.Значение; 
				
				ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, ЗначениеАтрибута);
				
			КонецЦикла;
		КонецЕсли;
		
		
		
		ИмяЭлемента = "";
		ВложенныеЭлементы = Новый СписокЗначений();
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				ИмяЭлемента = ЧтениеXML.Имя;
				
				Если Найти(ИмяЭлемента, ИмяПотока)>0 тогда
					продолжить;
				КонецЕсли;	
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента тогда
				КоличествоЭлементов = ВложенныеЭлементы.Количество();
				Если КоличествоЭлементов>0 тогда
					ЗаписьXML = ВложенныеЭлементы[КоличествоЭлементов-1].Значение;
					ЗаписьXML.ЗаписатьКонецЭлемента();
					ВложенныеЭлементы.Удалить(КоличествоЭлементов-1);
				КонецЕсли;    
				продолжить;
			Иначе 
				Продолжить;
			КонецЕсли;	
			
			
			ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяЭлемента);
			
			Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					ИмяАтрибута = ЧтениеXML.Имя;
					ЗначениеАтрибута = ЧтениеXML.Значение; 
					
					ЗаписьXML.ЗаписатьАтрибут(ИмяАтрибута, ЗначениеАтрибута);
					
				КонецЦикла;
			КонецЕсли;
			
			ВложенныеЭлементы.Добавить(ЗаписьXML);
			
		КонецЦикла;
		
		
		ЧтениеXML.Закрыть();
	Иначе
		ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяНачальногоЭлемента);     
		ЗаписьXML.ЗаписатьАтрибут("xmlns", ПространствоИменЛогаТЖ);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ()


Функция СоздатьЭлементКаталогаЖурнала(ЭлементXML,Местоположение,ПространствоИменЛогаТЖ,ПериодХранения,ИмяПотока)
	
	
	ЭлементXML.ЗаписатьНачалоЭлемента(ИмяПотока+":log");
	ЭлементXML.ЗаписатьАтрибут("xmlns:"+ИмяПотока, ПространствоИменЛогаТЖ);
	ЭлементXML.ЗаписатьАтрибут("location", Местоположение);
	ЭлементXML.ЗаписатьАтрибут("history",  Строка(ПериодХранения));
	
	Возврат ЭлементXML;
КонецФункции // ()

Функция ДобавитьСобытие(ЭлементXML,ИмяПотока) 
	
	ЭлементXML.ЗаписатьНачалоЭлемента(ИмяПотока+":event");
	
	Возврат ЭлементXML;
	
КонецФункции 

Процедура ДобавитьСвойство(ЭлементXML, Имя,ИмяПотока) 
	
	ЭлементXML.ЗаписатьНачалоЭлемента(ИмяПотока+":property");
	ЭлементXML.ЗаписатьАтрибут("name", Имя);
	ЭлементXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ДобавитьУсловие(ЭлементXML, ТипУсловия, Свойство, Значение)
	
	
	ЭлементXML.ЗаписатьНачалоЭлемента(ТипУсловия);
	ЭлементXML.ЗаписатьАтрибут("property", Свойство);
	ЭлементXML.ЗаписатьАтрибут("value",  Значение);
	ЭлементXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры 


//Обработка логов ТЖ
Функция ПолучитьТаблицуПутейФайлов(СтруктураПараметров,ТаблицаПутейФайлов = Неопределено) Экспорт
	
	ПутьКФайламЛоговТЖ = СтруктураПараметров.ПутьКФайламЛоговТЖ+?(СтруктураПараметров.НомерКлиентскойЧасти > 0,"\"+Строка(СтруктураПараметров.НомерКлиентскойЧасти),"");
	
	Если  ТаблицаПутейФайлов <> Неопределено Тогда
		СформироватьТаблицуВременныхФайлов(ПутьКФайламЛоговТЖ,ТаблицаПутейФайлов);
	Иначе
		ТаблицаПутейФайлов = Новый ТаблицаЗначений;
		ТаблицаПутейФайлов.Колонки.Добавить("ПутьКФайлу");
		ТаблицаПутейФайлов.Колонки.Добавить("Путь");
		ТаблицаПутейФайлов.Колонки.Добавить("КороткоеИмяФайла");
		ТаблицаПутейФайлов.Колонки.Добавить("ДатаФайла");
		ТаблицаПутейФайлов.Колонки.Добавить("ИмяПроцесса");
		ТаблицаПутейФайлов.Колонки.Добавить("РазмерФайла");
		
		СформироватьТаблицуВременныхФайлов(ПутьКФайламЛоговТЖ,ТаблицаПутейФайлов);
		
		//ТаблицаПутейФайлов.Сортировать("Порог Убыв");
		
	КонецЕсли;
	
	
	
	Возврат ТаблицаПутейФайлов;
	
КонецФункции 


Функция ПолучитьТаблицуПутейФайлов_(ПутьКФайламЛоговТЖ) 

	
	  
	ТаблицаПутейФайлов = Новый ТаблицаЗначений;
	ТаблицаПутейФайлов.Колонки.Добавить("ПутьКФайлу");
	ТаблицаПутейФайлов.Колонки.Добавить("Путь");
	ТаблицаПутейФайлов.Колонки.Добавить("ДатаФайла");
	ТаблицаПутейФайлов.Колонки.Добавить("ИмяПроцесса");
	ТаблицаПутейФайлов.Колонки.Добавить("РазмерФайла");


	
	СформироватьТаблицуВременныхФайлов(ПутьКФайламЛоговТЖ,ТаблицаПутейФайлов);
	
		
	
	Возврат ТаблицаПутейФайлов;
 
КонецФункции 

Процедура СформироватьТаблицуВременныхФайлов(ПутьКФайламЖурнала,ТаблицаПутейФайлов,Оперативный = Ложь,ОбрабатыватьПустыеФайлы = Ложь,КоличествоФайловПоиска = 0) Экспорт
	
	МассивФайлов=НайтиФайлы(ПутьКФайламЖурнала,"*");
	
	Для Каждого Файл Из МассивФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда
			СформироватьТаблицуВременныхФайлов(Файл.ПолноеИмя,ТаблицаПутейФайлов, Оперативный, ОбрабатыватьПустыеФайлы,КоличествоФайловПоиска);
		ИначеЕсли Файл.Расширение=".log" Тогда
			
			Попытка
				ЗаполнитьИнформациюОФайлеЛога(Файл,ТаблицаПутейФайлов,ОбрабатыватьПустыеФайлы);
				
				Если  КоличествоФайловПоиска > 0 и  КоличествоФайловПоиска <= ТаблицаПутейФайлов.Количество() Тогда
					Прервать;
				КонецЕсли;	
				
			Исключение
				//ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
				//УровеньЖурналаРегистрации.Ошибка, 
				//"ОбработкаДанныхТехнологическогоЖурнала",, 
				//"Не удалось прочитать файл лога ТЖ: "+Строка(Файл.ПолноеИмя)+" "+ОписаниеОшибки()); 
				
			КонецПопытки;
			
		КонецЕсли; 
	КонецЦикла; 

	
КонецПроцедуры	

Процедура ЗаполнитьИнформациюОФайлеЛога(Файл,ТаблицаПутейФайлов,ОбрабатыватьПустыеФайлы)
	Если Файл.Расширение=".log" Тогда
		
		РазмерФайла = Файл.Размер();
		
		Если РазмерФайла > 3 или ОбрабатыватьПустыеФайлы тогда
			ИмяФайла=Файл.ПолноеИмя;
			ИмяФайлаБезРасширения=Файл.ИмяБезРасширения;
			
			ИмяПроцесса = СтрЗаменить(ИмяФайла,"\"+Файл.Имя,"");
			ЧислоКаталогов = СтрЧислоВхождений(ИмяПроцесса,"\");
			
			Пока ЧислоКаталогов  > 0 Цикл
				ИмяПроцесса = Прав(ИмяПроцесса,СтрДлина(ИмяПроцесса) - Найти(ИмяПроцесса,"\"));
				ЧислоКаталогов = ЧислоКаталогов - 1;
			КонецЦикла;    
			
			
			ДатаФайлаЛога=Дата("20"+Сред(ИмяФайлаБезРасширения,1,2)+Сред(ИмяФайлаБезРасширения,3,2)+Сред(ИмяФайлаБезРасширения,5,2)+Сред(ИмяФайлаБезРасширения,7,2)+"0000");
			
			СтрокаТаблицыПутейФайлов = ТаблицаПутейФайлов.Добавить();
			СтрокаТаблицыПутейФайлов.ПутьКФайлу = ИмяФайла;
			СтрокаТаблицыПутейФайлов.Путь = Файл.Путь;
			СтрокаТаблицыПутейФайлов.ДатаФайла = ДатаФайлаЛога;
			СтрокаТаблицыПутейФайлов.ИмяПроцесса = СокрЛП(ИмяПроцесса);
			СтрокаТаблицыПутейФайлов.РазмерФайла = РазмерФайла;
		КонецЕсли;	
		
		
	КонецЕсли; 
КонецПроцедуры	

Процедура ОбработатьФайлыТехнологическогоЖурнала(Сервер1с) Экспорт
		
	
	Константы.НомерФайла_Status.Установить(0);
	
	НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
	НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
	НаборЗаписейИндикатора.Записать();

		
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	//СтруктураПараметров.Вставить("Сервер1с",Сервер1с);
	
	//ДополнитьПпараметрыДляОфлайнМониторинга(СтруктураПараметров,Сервер1с);
	СтруктураПараметров.Вставить("БазыМониторинга",Новый Структура);


	ОперативныйРежимПолученияИнформации = СтруктураПараметров.ОперативныйРежимПолученияИнформацииОбОшибках;
	
	//ПутьКФайламЛоговТЖ = Сервер1с.ПутьКФайламЛоговТЖ+"\ERROR_EXCP";
	ПутьКФайламЛоговТЖ = СтруктураПараметров.ПутьКФайламЛоговТЖ+"\ERROR_EXCP";
	
    //ТаблицаПутейКФайлам = ПолучитьТаблицуПутейФайлов(ПутьКФайламЛоговТЖ);

	Если  ОперативныйРежимПолученияИнформации Тогда
		
		ТаблицаПутейКФайлам = ПолучитьТаблицуПутейОперативныхЛоговТЖ(Сервер1с,СтруктураПараметров);
		
	Иначе
		
		СтруктураПараметров.Вставить("ПутьКФайламЛоговТЖ",ПутьКФайламЛоговТЖ);
		
		ТаблицаПутейКФайлам = ПолучитьТаблицуПутейФайлов(СтруктураПараметров);
	КонецЕсли;
	
	ВсегоФайлов =  ТаблицаПутейКФайлам.Количество();
	КоличествоПотоков = СтруктураПараметров.КоличествоПотоковДляОбработкиЛогов;
	
	Если ТаблицаПутейКФайлам.Колонки.Найти("Сервис") = Неопределено Тогда
		ТаблицаПутейКФайлам.Колонки.Добавить("Сервис");
		ТаблицаПутейКФайлам.ЗаполнитьЗначения(Перечисления.Сервисы.Status, "Сервис");
	КонецЕсли;
	
	Если КоличествоПотоков > 1 и ВсегоФайлов > 0  Тогда
		
		ШаблонТаблицаПотока = ТаблицаПутейКФайлам.Скопировать();
		ШаблонТаблицаПотока.Колонки.Добавить("НомерПотока",Новый ОписаниеТипов("Число"));
		
		
		РегистрПотоков = РегистрыСведений.ДанныеДляПотоков;
		
		Набор = РегистрПотоков.СоздатьНаборЗаписей();
		Набор.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
		Набор.Загрузить(ТаблицаПутейКФайлам);
		Набор.Записать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сервис", Перечисления.Сервисы.Status);
		
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ "+Строка(КоличествоПотоков)+"
		|	ДанныеДляПотоков.ДатаФайла КАК ДатаФайла,
		|	ДанныеДляПотоков.ПутьКФайлу,
		|	ДанныеДляПотоков.Путь,
		|	ДанныеДляПотоков.ИмяПроцесса,
		|	ДанныеДляПотоков.РазмерФайла КАК РазмерФайла
		|ИЗ
		|	РегистрСведений.ДанныеДляПотоков КАК ДанныеДляПотоков
		|ГДЕ
		|	ДанныеДляПотоков.Сервис = &Сервис	
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаФайла,
		|	РазмерФайла УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НомерПотока = 0;
		Пока Выборка.Следующий() Цикл
			НомерПотока = НомерПотока + 1;
			
			
			Набор = РегистрПотоков.СоздатьНаборЗаписей();
			Набор.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
			Набор.Отбор.ДатаФайла.Установить(Выборка.ДатаФайла);
			Набор.Отбор.ПутьКФайлу.Установить(Выборка.ПутьКФайлу);
			Набор.Прочитать();
			
			Для каждого СтрокаНабора  из Набор Цикл
				СтрокаНабора.НомерПотока = НомерПотока;
			КонецЦикла;	  
			Набор.Записать();
			
			
			ШаблонТаблицаПотока.Очистить();
			
			СтрокаТаблицы = ШаблонТаблицаПотока.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
			СтрокаТаблицы.НомерПотока = НомерПотока;
			
			
			НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
			НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
			НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
			
			СтрокаНбора = НаборЗаписейИндикатора.Добавить();
			СтрокаНбора.Сервис = Перечисления.Сервисы.Status;
			СтрокаНбора.НомерПотока = НомерПотока;
			СтрокаНбора.ВсегоФайлов = ВсегоФайлов; 
			
			НаборЗаписейИндикатора.Записать();

			
			МассивПараметров  = Новый Массив;
			МассивПараметров.Добавить(НомерПотока);
			МассивПараметров.Добавить(ШаблонТаблицаПотока);
			МассивПараметров.Добавить(СтруктураПараметров);
			
			ФоновыеЗадания.Выполнить("ТехнологическийЖурнал_Status.ОбработатьПотокЛоговТЖ",МассивПараметров,НомерПотока,"Обработка логов ТЖ, поток: "+Строка(НомерПотока));

			
		КонецЦикла;  
		
		
		
	Иначе
		
		НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
		НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
		НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(0);
		
		СтрокаНбора = НаборЗаписейИндикатора.Добавить();
		СтрокаНбора.Сервис = Перечисления.Сервисы.Status;
		СтрокаНбора.НомерПотока = 0;
		СтрокаНбора.ВсегоФайлов = ВсегоФайлов; 
		
		НаборЗаписейИндикатора.Записать();

		ОбработатьПотокЛоговТЖ(0,ТаблицаПутейКФайлам,СтруктураПараметров);

	КонецЕсли;	
	
	
КонецПроцедуры

Процедура ПодготовитьНовуюТаблицуФайловДляПотока(ТаблицаПутейПотока,НомерПотока)
	
	ТаблицаПутейПотока.Очистить();
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеДляПотоков");
	СтрокаБлокировки.УстановитьЗначение("Сервис", Перечисления.Сервисы.Status);
	СтрокаБлокировки.УстановитьЗначение("НомерПотока", 0);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервис", Перечисления.Сервисы.Status);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДляПотоков.ДатаФайла КАК ДатаФайла,
	|	ДанныеДляПотоков.ПутьКФайлу,
	|	ДанныеДляПотоков.РазмерФайла КАК РазмерФайла,
	|	ДанныеДляПотоков.ИмяПроцесса,
	|	ДанныеДляПотоков.Путь
	|ИЗ
	|	РегистрСведений.ДанныеДляПотоков КАК ДанныеДляПотоков
	|ГДЕ
	|	ДанныеДляПотоков.НомерПотока = 0
	|	И ДанныеДляПотоков.Сервис = &Сервис
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаФайла,
	|	РазмерФайла УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДанныеДляПотоков.СоздатьНаборЗаписей();
		Набор.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
		Набор.Отбор.ДатаФайла.Установить(Выборка.ДатаФайла);
		Набор.Отбор.ПутьКФайлу.Установить(Выборка.ПутьКФайлу);
		Набор.Прочитать();
		
		Для каждого СтрокаНабора  из Набор Цикл
			СтрокаНабора.НомерПотока = НомерПотока;
		КонецЦикла;	  
		Набор.Записать();
		
		
		СтрокаТаблицы = ТаблицаПутейПотока.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Выборка);
		СтрокаТаблицы.НомерПотока = НомерПотока;
		
	КонецЦикла;  
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры


Процедура СформироватьСтрокуОшибкиДляБольшогоФайлаЛога(ТаблицаОшибок,СтруктураПараметров)
	
    ПутьКФайлу = СокрЛП(СтруктураПараметров.ПутьКФайлу);
	Путь = СокрЛП(СтруктураПараметров.Путь);
    ДатаФайла = СтруктураПараметров.ДатаФайла;
	
    
    ДатаСобытия = Дата(ДатаФайла+"0000");
	
  	
	СтрокаТаблицаОшибок = ТаблицаОшибок.Добавить();
    СтрокаТаблицаОшибок.ИмяПроцесса = СтруктураПараметров.ИмяПроцесса;
    СтрокаТаблицаОшибок.ТипСобытия =  "excp";
	СтрокаТаблицаОшибок.СтрокаСобытияЦеликом = "ФАЙЛ ЛОГА ПРЕВЫШАЕТ АДЕКВАТНЫЙ РАЗМЕР ДЛЯ ОБРАБОТКИ СЕРВИСОМ. Необходимо в ручном режиме просмотреть состав событий файла: "+ПутьКФайлу;
	СтрокаТаблицаОшибок.Пояснение = "ФАЙЛ ЛОГА ПРЕВЫШАЕТ АДЕКВАТНЫЙ РАЗМЕР ДЛЯ ОБРАБОТКИ СЕРВИСОМ";
    СтрокаТаблицаОшибок.ДатаВремяСобытия = ДатаСобытия;
	СтрокаТаблицаОшибок.ДатаФайла = Дата(ДатаФайла+"0000");	
	СтрокаТаблицаОшибок.Индекс = ТаблицаОшибок.Количество() - 1;
    
КонецПроцедуры



Процедура ОбработатьПотокЛоговТЖ(НомерПотока,ТаблицаПутейПотока,СтруктураПараметров) Экспорт
	
	
	
	НачалоОбработки = ТекущаяДата();
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("НачальнаяСтрока",1);
	ПараметрыФайла.Вставить("ЗагружатьЛогиВПамятьДляОбработки",СтруктураПараметров.ЗагружатьЛогиВПамятьДляОбработки);
	
	ТаблицаОшибок = ПолучитьТаблицуОшибок();
	
	ПериодФайлов = '00010101';
	
	ОбщееКоличествоСтрок = 0;
	ОбщийРазмерФайлов = 0;
	
	
	Для каждого СтрокаТЗ из  ТаблицаПутейПотока Цикл
		
		ПериодФайлов = СтрокаТЗ.ДатаФайла;
		
		НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
		НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
		НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
		НаборЗаписейИндикатора.Прочитать();
		
		СтрокаНбора = НаборЗаписейИндикатора[0];
		СтрокаНбора.НомерТекущегоФайла = СтрокаНбора.НомерТекущегоФайла+1;
		СтрокаНбора.ПутьКФайлу = СтрокаТЗ.ПутьКФайлу;
		СтрокаНбора.ДатаФайла = СтрокаТЗ.ДатаФайла;
		НаборЗаписейИндикатора.Записать();
		
		
		ПараметрыФайла.Вставить("ПутьКФайлу",СтрокаТЗ.ПутьКФайлу);
		ПараметрыФайла.Вставить("Путь",СтрокаТЗ.Путь);
		ПараметрыФайла.Вставить("ДатаФайла",СтрокаТЗ.ДатаФайла);
		ПараметрыФайла.Вставить("ИмяПроцесса",СтрокаТЗ.ИмяПроцесса);
		ПараметрыФайла.Вставить("СтруктураПараметров",СтруктураПараметров);
		
		//Если НЕ ТипЗнч(СтрокаТЗ.РазмерФайла) = Тип("Число") Тогда
		//	
		//	ЗаписьЖурналаРегистрации("ОШибка обработки", УровеньЖурналаРегистрации.Предупреждение, ,,"Таблица путей потока пустая",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		//	Возврат;
		//	
		//КонецЕсли;
		
		Если НЕ ТипЗнч(СтрокаТЗ.РазмерФайла) = Тип("Число") Тогда
			
			СтрокаТЗ.РазмерФайла = 0;
			
		КонецЕсли;
		
		
		Если  СтрокаТЗ.РазмерФайла > 50000000 Тогда
			//значит лог содержит большое количество событий одной и той же ошибки, нужно смотреть сам лог
			СформироватьСтрокуОшибкиДляБольшогоФайлаЛога(ТаблицаОшибок,ПараметрыФайла);
		Иначе
			Попытка 
				КоличествоСтрок = 0;
				
				ОбработатьСтрокиФайлаТЖ(НомерПотока,ТаблицаОшибок,ПараметрыФайла,КоличествоСтрок);
				
				ОбщееКоличествоСтрок = ОбщееКоличествоСтрок + КоличествоСтрок; 
				ОбщийРазмерФайлов = ОбщийРазмерФайлов + СтрокаТЗ.РазмерФайла;
			Исключение
				ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
				УровеньЖурналаРегистрации.Ошибка, 
				"ОбработкаДанныхТехнологическогоЖурнала",, 
				"Не удалось обработать данные файла лога ТЖ: "+Строка(СтрокаТЗ.ПутьКФайлу)+" "+ОписаниеОшибки()); 
				
			КонецПопытки;
		КонецЕсли;
		
		
		ВремяОбработки = Цел((ТекущаяДата() - НачалоОбработки)/60);
		
		ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Информация, 
		"ОбработкаДанныхТехнологическогоЖурнала",, 
		"Обработаны данные файла лога ТЖ: "+СокрЛП(СтрокаТЗ.ПутьКФайлу)+" Время обработки (сек): "+Строка(ВремяОбработки)+" Поток: "+Строка(НомерПотока)); 
		
		
		Если НомерПотока > 0 Тогда
			
			НаборЗаписейПотока =  РегистрыСведений.ДанныеДляПотоков.СоздатьНаборЗаписей();
			НаборЗаписейПотока.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
			НаборЗаписейПотока.Отбор.ДатаФайла.Установить(СтрокаТЗ.ДатаФайла);
			НаборЗаписейПотока.Отбор.ПутьКФайлу.Установить(СтрокаТЗ.ПутьКФайлу);
			НаборЗаписейПотока.Отбор.НомерПотока.Установить(НомерПотока);
			НаборЗаписейПотока.Прочитать();
			
			Для каждого СтрокаНабора из НаборЗаписейПотока Цикл
				СтрокаНабора.Обработан = Истина;
				СтрокаНабора.ВремяОбработки = ВремяОбработки;
				СтрокаНабора.ДатаОкончания = ТекущаяДата();
				
			КонецЦикла;	
			
			НаборЗаписейПотока.Записать();
				
		КонецЕсли;

		
		
	КонецЦикла;	
	

	
	ПотокЗавершен = ?(НомерПотока = 0,Истина,Ложь);
	
	

	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		
		//Сервер1с = СтруктураПараметров.Сервер1с;
		Сервер1с = Справочники.Сервер1С.ПустаяСсылка();
		
		ТаблицаОшибок.Колонки.Добавить("Каталог",Новый ОписаниеТипов("Строка"));
		ТаблицаОшибок.ЗаполнитьЗначения(СтруктураПараметров.ПутьКФайламЛоговТЖ,"Каталог");
		
		Если  СтруктураПараметров.ИспользуетсяОфлайнМониторинг Тогда
			
			Попытка
				Мониторинг.ЗаписатьДанныеВБазуМониторинга(СтруктураПараметров,ТаблицаОшибок);
			Исключение
				ЗаписьЖурналаРегистрации( "ЗаписатьДанныеВБазуМониторинга",
				УровеньЖурналаРегистрации.Ошибка, 
				"ЗаписатьДанныеВБазуМониторинга",, 
				"Не удалось записать данные для мониторинга "+ОписаниеОшибки()); 
				
			КонецПопытки;
			
			ОчиститьТаблицуОтСлужебныхСтрок(ТаблицаОшибок);
			
			
		КонецЕсли;	
		
		
		
		Если СтруктураПараметров.ОперативныйРежимПолученияИнформацииОбОшибках Тогда
			ЗафиксироватьТаблицуТЖДляОтправки(Сервер1с,ТаблицаОшибок,ПериодФайлов);
		Иначе
			ОтправитьТаблицуТЖНаСервер(ТаблицаОшибок,СтруктураПараметров,Сервер1с);
		КонецЕсли;
				
		
	КонецЕсли;

	
	Если НомерПотока > 0  Тогда
		
		ПодготовитьНовуюТаблицуФайловДляПотока(ТаблицаПутейПотока,НомерПотока);
		
		Если  ТаблицаПутейПотока.Количество() >0 Тогда
			
			НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
			НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
			НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
			НаборЗаписейИндикатора.Прочитать();
			
			СтрокаНабора = НаборЗаписейИндикатора[0];
			СтрокаНабора.ОтправленоЗапросов = СтрокаНабора.ОтправленоЗапросов+ТаблицаОшибок.Количество();
			СтрокаНабора.ВсегоСтрокОбработано = СтрокаНабора.ВсегоСтрокОбработано+ОбщееКоличествоСтрок;
			СтрокаНабора.РазмерОбработанныхФайлов = СтрокаНабора.РазмерОбработанныхФайлов+ОбщийРазмерФайлов;
			НаборЗаписейИндикатора.Записать();

			
			ОбработатьПотокЛоговТЖ(НомерПотока,ТаблицаПутейПотока,СтруктураПараметров);
		Иначе
			ПотокЗавершен = Истина;
		КонецЕсли;
		
	КонецЕсли;

	
	
	Если ПотокЗавершен Тогда
		
		НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
		НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
		НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
		НаборЗаписейИндикатора.Прочитать();
		
		СтрокаНабора = НаборЗаписейИндикатора[0];
		СтрокаНабора.ОтправленоЗапросов = СтрокаНабора.ОтправленоЗапросов+ТаблицаОшибок.Количество();
		СтрокаНабора.ВсегоСтрокОбработано = СтрокаНабора.ВсегоСтрокОбработано+ОбщееКоличествоСтрок;
		СтрокаНабора.РазмерОбработанныхФайлов = СтрокаНабора.РазмерОбработанныхФайлов+ОбщийРазмерФайлов;
		
		СтрокаНабора.ОбработкаЗавершена = Истина;
		НаборЗаписейИндикатора.Записать();
		
		
		Если  СтруктураПараметров.Свойство("ТЗПутейОперативногоТЖ") Тогда
			
			УстановитьОтметкуУОбработанныхПутейТЖ(СтруктураПараметров.ТЗПутейОперативногоТЖ);
			
		КонецЕсли;	
		
		
	КонецЕсли;
		

	
КонецПроцедуры	

Процедура УстановитьОтметкуУОбработанныхПутейТЖ(ТаблицаПутей) 

	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеДляПотоков");
	СтрокаБлокировки.УстановитьЗначение("Сервис", Перечисления.Сервисы.Status);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервис", Перечисления.Сервисы.Status);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДляПотоков.ДатаФайла КАК ДатаФайла,
	|	ДанныеДляПотоков.ПутьКФайлу,
	|	ДанныеДляПотоков.РазмерФайла КАК РазмерФайла,
	|	ДанныеДляПотоков.ИмяПроцесса
	|ИЗ
	|	РегистрСведений.ДанныеДляПотоков КАК ДанныеДляПотоков
	|ГДЕ
	|	НЕ ДанныеДляПотоков.Обработан
	|	И ДанныеДляПотоков.Сервис = &Сервис
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаФайла,
	|	РазмерФайла УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗафиксироватьТранзакцию();

	Если НЕ Выборка.Следующий() Тогда
		
		Для каждого СтрокаТаблицы из ТаблицаПутей Цикл
			
			НаборРегистра = РегистрыСведений.Status_ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
			НаборРегистра.Отбор.Период.Установить(СтрокаТаблицы.Период);
			НаборРегистра.Прочитать();
			
			Для каждого СтрокаНабора из НаборРегистра Цикл
				СтрокаНабора.Обработан = Истина;
			КонецЦикла;	
			
			НаборРегистра.Записать();
			
		КонецЦикла;	
		
	КонецЕсли;  
	

	
КонецПроцедуры

Процедура ЗафиксироватьТаблицуТЖДляОтправки(Сервер1с,ТаблицаОшибок,ПериодФайлов)
	
	
	ПериодОбработки = ТекущаяДата();
	
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеТЖДляОтправки");
	ЭлементБлокировки.УстановитьЗначение("Сервер1с", Сервер1с);
	ЭлементБлокировки.УстановитьЗначение("ПериодОбработки", ПериодОбработки);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	
	НаборРегистра = РегистрыСведений.ДанныеТЖДляОтправки.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.ПериодОбработки.Установить(ПериодОбработки);
	НаборРегистра.Отбор.Сервер1с.Установить(Сервер1с);
	НаборРегистра.Прочитать();
	
	СтрокаНабора = НаборРегистра.Добавить();
	СтрокаНабора.ПериодОбработки = ПериодОбработки;
	СтрокаНабора.Сервер1с = Сервер1с;
	СтрокаНабора.НомерПакета  =  НаборРегистра.Количество();
	СтрокаНабора.ДанныеЛоговТЖ = Новый ХранилищеЗначения(ТаблицаОшибок,Новый СжатиеДанных(9));
	СтрокаНабора.ТЖКоличество = ТаблицаОшибок.Количество();
	СтрокаНабора.ПериодФайлов = ПериодФайлов;
	
	НаборРегистра.Записать();
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры	

Процедура  ОтправитьТаблицуТЖНаСервер(ТаблицаОшибок,СтруктураПараметров,Сервер1с) Экспорт

	Если НЕ СтруктураПараметров.ФормироватьПочтовыеФайлы Тогда	
		Попытка
			Прокси = ПолучитьПодключениеКБазе(СтруктураПараметров);
		Исключение
			ЗаписьЖурналаРегистрации( "ПолучитьПодключениеКБазе",
			УровеньЖурналаРегистрации.Ошибка, 
			"ПолучитьПодключениеКБазе",, 
			"Не удалось вызвать веб-сервис: "+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	
	
	Если СтруктураПараметров.ФормироватьПочтовыеФайлы Тогда
		
		СформироватьФайлыПочтовыхВложений(ТаблицаОшибок,СтруктураПараметров,Сервер1с);
		
	Иначе	
		
		ОтправитьТаблицуОшибокПоВебСервису(Прокси,Сервер1с,ТаблицаОшибок,СтруктураПараметров.ИденификаторБазы);
	КонецЕсли;
	
	
	НаборЗаписей = РегистрыСведений.Status_ЛогОтправкиДанных.СоздатьНаборЗаписей();
	
	СтрокаНабора = НаборЗаписей.Добавить();
	СтрокаНабора.Период = ТекущаяДата();
	СтрокаНабора.Сервер1с  = Сервер1с;
	СтрокаНабора.КоличествоЗаписейОтправлено  = ТаблицаОшибок.Количество();
	
	Попытка
		НаборЗаписей.Записать(Ложь);
	Исключение
		
	КонецПопытки;

	
	
КонецПроцедуры

Функция ПолучитьТаблицуОшибок()
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ТипСобытия",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("Индекс",Новый ОписаниеТипов("Число"));
	ТаблицаОшибок.Колонки.Добавить("ИмяПроцесса",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("Уровень",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("ДатаФайла",Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("ДатаВремяСобытия",Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("МоментВремени",Новый ОписаниеТипов("Число"));
	ТаблицаОшибок.Колонки.Добавить("Пояснение",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("СтрокаСобытияЦеликом",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("ИмяБазы",Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("ОфлайнМониторинг",Новый ОписаниеТипов("Булево"));
	ТаблицаОшибок.Колонки.Добавить("КатегорияСобытия",Новый ОписаниеТипов("Число"));
	ТаблицаОшибок.Колонки.Добавить("СлужебнаяСтрока",Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаОшибок;
	
КонецФункции	

Функция  ПолучитьПодключениеКБазе(СтруктураПараметров) Экспорт
    
	WS_Определение = ПолучитьОпределениеВебСервиса(СтруктураПараметров);
	
	Если WS_Определение = НЕОПРЕДЕЛЕНО Тогда
		
		ВызватьИсключение "Не удается инициализировать подключение к серверной части сервиса!";
		
	КонецЕсли; 


	
	Прокси = Новый WSПрокси(WS_Определение, 
	"http://www.status.org/webservice",
	"status",
	"statusSoap");
	
	
	Прокси.Пользователь = СтруктураПараметров.WSDL_Status_Пользователь;
	Прокси.Пароль		= СтруктураПараметров.WSDL_Status_Пароль;
	
    
    Возврат Прокси;
КонецФункции	



Функция ПолучитьОпределениеВебСервиса(СтруктураПараметров)

	Успешно = Ложь;
	ИмяВебСервисаРезерв = СтруктураПараметров.WSDL_Status_УдаленноеПодключениеРезерв;
	
	WS_Определение = НЕОПРЕДЕЛЕНО;


	Попытка
		WS_Определение = Новый WSОпределения(СтруктураПараметров.WSDL_Status_УдаленноеПодключение, СтруктураПараметров.WSDL_Status_Пользователь, СтруктураПараметров.WSDL_Status_Пароль);
		
		Успешно = ИСТИНА;
	Исключение
		
	КонецПопытки;
	
	
	Если НЕ Успешно и НЕ ПустаяСтрока(ИмяВебСервисаРезерв)Тогда
			
		Попытка
			WS_Определение = Новый WSОпределения(ИмяВебСервисаРезерв, СтруктураПараметров.WSDL_Status_Пользователь, СтруктураПараметров.WSDL_Status_Пароль);
			
			Успешно = ИСТИНА;
		Исключение
			
		КонецПопытки;
		
	КонецЕсли; 
	
	Если НЕ Успешно Тогда
		
		ДанныеМаршрутовССайта = ТехнологическийЖурнал.ПолучитьТаблицуМаршрутовССайта("Status");
		
		Если  ЗначениеЗаполнено(ДанныеМаршрутовССайта) Тогда
			
			ТекНастройки = РегистрыСведений.Настройки.СоздатьНаборЗаписей();
			ТекНастройки.Прочитать();
			
			Если ТекНастройки.Количество() = 0  Тогда
				СтрокаНастройки = ТекНастройки.Добавить();
			Иначе
				СтрокаНастройки =  ТекНастройки[0];
			КонецЕсли; 
			
			Сч = 0;
			ФлагиПроверкиВеб = Новый Соответствие();
			
			Пока Сч < 4 Цикл
				Сч = Сч +1;
				
				ТекущийПроверяемыйМаршрут  =  ДанныеМаршрутовССайта[Сч];
				
				Попытка
					WS_Определение = Новый WSОпределения(ТекущийПроверяемыйМаршрут, СтруктураПараметров.WSDL_Status_Пользователь, СтруктураПараметров.WSDL_Status_Пароль);
					
					Успешно = ИСТИНА;
					
					ФлагиПроверкиВеб.Вставить(Сч,ИСТИНА);
					
				Исключение
					ФлагиПроверкиВеб.Вставить(Сч,Ложь);
					
				КонецПопытки;
				
			КонецЦикла; 
			
			
			Если (ФлагиПроверкиВеб.Получить(1) и ФлагиПроверкиВеб.Получить(2))
				ИЛИ (ФлагиПроверкиВеб.Получить(1) и НЕ ФлагиПроверкиВеб.Получить(2))  Тогда
				СтрокаНастройки.WSDL_Status_УдаленноеПодключение =  ДанныеМаршрутовССайта.ОсновнойСервис;
			ИначеЕсли (НЕ ФлагиПроверкиВеб.Получить(1) и ФлагиПроверкиВеб.Получить(2))	Тогда 	
				СтрокаНастройки.WSDL_Status_УдаленноеПодключение =  ДанныеМаршрутовССайта.ОсновнойСервисIP;
			КонецЕсли; 
			
			Если (ФлагиПроверкиВеб.Получить(3) и ФлагиПроверкиВеб.Получить(4))
				ИЛИ (ФлагиПроверкиВеб.Получить(3) и НЕ ФлагиПроверкиВеб.Получить(4))  Тогда
				СтрокаНастройки.WSDL_Status_УдаленноеПодключениеРезерв =  ДанныеМаршрутовССайта.РезервныйСервис;
			ИначеЕсли (НЕ ФлагиПроверкиВеб.Получить(3) и ФлагиПроверкиВеб.Получить(4))	Тогда 	
				СтрокаНастройки.WSDL_Status_УдаленноеПодключениеРезерв =  ДанныеМаршрутовССайта.РезервныйСервисIP;
			КонецЕсли; 
			
			Если ТекНастройки.Модифицированность() Тогда
				ТекНастройки.Записать();
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат  WS_Определение;
	

КонецФункции // ()



Функция ПроверкаВебСервиса() Экспорт
	
    Ошибка="";
		
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	Попытка
		Прокси = ПолучитьПодключениеКБазе(СтруктураПараметров);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Попытка
		
		Прокси.WebAccess();

	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Ошибка;
	
КонецФункции	

Процедура ОбработатьСтрокиФайлаТЖ(НомерПотока,ТаблицаОшибок,ПараметрыФайла,КонечнаяСтрока)    
	
	ОсновныеНастройки = ПараметрыФайла.СтруктураПараметров;
	
	ПутьКФайлу = ПараметрыФайла.ПутьКФайлу;
	Путь = ПараметрыФайла.Путь;
	ДатаФайла = ПараметрыФайла.ДатаФайла;
	НачальнаяСтрока = ПараметрыФайла.НачальнаяСтрока;
    ЗагружатьЛогиВПамятьДляОбработки = ПараметрыФайла.ЗагружатьЛогиВПамятьДляОбработки;
	
		
	ПолнаяСтрокаСобытия="";
    
     
    СтруктураПараметров = Новый Структура();
    СтруктураПараметров.Вставить("ИмяПроцесса",ПараметрыФайла.ИмяПроцесса);
	СтруктураПараметров.Вставить("ПутьКФайлу",ПутьКФайлу);
	СтруктураПараметров.Вставить("Путь",Путь);
    СтруктураПараметров.Вставить("ДатаФайла",ДатаФайла);
	СтруктураПараметров.Вставить("ИспользуетсяОфлайнМониторинг",ОсновныеНастройки.ИспользуетсяОфлайнМониторинг);
	СтруктураПараметров.Вставить("БазыМониторинга",ОсновныеНастройки.БазыМониторинга);

	
	Если ЗагружатьЛогиВПамятьДляОбработки Тогда
		
		ТекстовыйДокумент=Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(ПутьКФайлу,КодировкаТекста.UTF8);
		Исключение
			//ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
			//УровеньЖурналаРегистрации.Ошибка, 
			//"ОбработкаДанныхТехнологическогоЖурнала",, 
			//"Не удалось прочитать данные файла лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
			
			Возврат;
		КонецПопытки; 
		
		КонечнаяСтрока = ТекстовыйДокумент.КоличествоСтрок();
		МаксимальнаяСтрока = КонечнаяСтрока;
		
		
		
		Пока Истина Цикл
			СтрНачальная = ТекстовыйДокумент.ПолучитьСтроку(НачальнаяСтрока);
			Если Сред(СтрНачальная,3,1)=":" И Сред(СтрНачальная,6,1)="." Тогда
				прервать;
			КонецЕсли;
			Если НачальнаяСтрока = 10000 тогда //если первые 10000  не являются началом значит файл либо испорченный либо пустой
				Возврат;
			КонецЕсли;	
			НачальнаяСтрока = НачальнаяСтрока + 1;
		КонецЦикла;	
		
		
		
		Пока НачальнаяСтрока<= КонечнаяСтрока Цикл
			СтрокаСобытия = ТекстовыйДокумент.ПолучитьСтроку(НачальнаяСтрока);
			
			Если НачальнаяСтрока%1000=0 Тогда
				
				НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
				НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
				НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
				НаборЗаписейИндикатора.Прочитать();
				
				СтрокаНбора = НаборЗаписейИндикатора[0];
				СтрокаНбора.НомерТекущейСтроки = НачальнаяСтрока;
				СтрокаНбора.ВсегоСтрок = КонечнаяСтрока;
				НаборЗаписейИндикатора.Записать();
				
			КонецЕсли;
			
			
			СтруктураПараметров.Вставить("НомерСтрокиФайла",НачальнаяСтрока);
			
			Если Сред(СтрокаСобытия,3,1)=":" И Сред(СтрокаСобытия,6,1)="." и ПолнаяСтрокаСобытия<>"" Тогда
				ЗаполнитьДаннымиТаблицуОшибок(ТаблицаОшибок,ПолнаяСтрокаСобытия,СтруктураПараметров);
				ПолнаяСтрокаСобытия=СтрокаСобытия;
			Иначе
				ПолнаяСтрокаСобытия=ПолнаяСтрокаСобытия+СтрокаСобытия;
			КонецЕсли;	
			
			НачальнаяСтрока = НачальнаяСтрока + 1;
		КонецЦикла;	
		
		
	Иначе
		Попытка
			ТекстовыйДокумент= Новый ЧтениеТекста(ПутьКФайлу,КодировкаТекста.UTF8);
		Исключение
			//ЗаписьЖурналаРегистрации( "ОбработкаДанныхТехнологическогоЖурнала",
			//УровеньЖурналаРегистрации.Ошибка, 
			//"ОбработкаДанныхТехнологическогоЖурнала",, 
			//"Не удалось прочитать данные файла лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
			
			Возврат;
		КонецПопытки; 
		
		
		СтрокаСобытия = ТекстовыйДокумент.ПрочитатьСтроку();
		
		Пока СтрокаСобытия <> Неопределено  Цикл
			
			Если НачальнаяСтрока%1000=0 Тогда
				
				НаборЗаписейИндикатора =  РегистрыСведений.ДанныеИндикатораОбработки.СоздатьНаборЗаписей();
				НаборЗаписейИндикатора.Отбор.Сервис.Установить(Перечисления.Сервисы.Status);
				НаборЗаписейИндикатора.Отбор.НомерПотока.Установить(НомерПотока);
				НаборЗаписейИндикатора.Прочитать();
				
				СтрокаНбора = НаборЗаписейИндикатора[0];
				СтрокаНбора.НомерТекущейСтроки = НачальнаяСтрока;
				НаборЗаписейИндикатора.Записать();
				
			КонецЕсли;
			
			
			СтруктураПараметров.Вставить("НомерСтрокиФайла",НачальнаяСтрока);
			
			Если Сред(СтрокаСобытия,3,1)=":" И Сред(СтрокаСобытия,6,1)="." и ПолнаяСтрокаСобытия<>"" Тогда
				
				
				Если НЕ СобытиеЯвляетсяИнформационнымШумом(ПолнаяСтрокаСобытия) Тогда
					
					ЗаполнитьДаннымиТаблицуОшибок(ТаблицаОшибок,ПолнаяСтрокаСобытия,СтруктураПараметров);
					
				КонецЕсли;
			
				ПолнаяСтрокаСобытия=СтрокаСобытия;
			Иначе
				ПолнаяСтрокаСобытия=ПолнаяСтрокаСобытия+СтрокаСобытия;
			КонецЕсли;	
			
			СтрокаСобытия = ТекстовыйДокумент.ПрочитатьСтроку();
			
			НачальнаяСтрока = НачальнаяСтрока + 1;
			
		КонецЦикла;	
		

	КонецЕсли;
	
	ЗаполнитьДаннымиТаблицуОшибок(ТаблицаОшибок,ПолнаяСтрокаСобытия,СтруктураПараметров);
    	
	
      
КонецПроцедуры	


Функция СобытиеЯвляетсяИнформационнымШумом(ПолнаяСтрокаСобытия)
	
	Флаг = Ложь;
	
	Если  Найти(ПолнаяСтрокаСобытия,"Файл не обнаружен") > 0 Тогда
		Флаг = Истина;
	ИначеЕсли  Найти(ПолнаяСтрокаСобытия,"regAuthenticate") > 0 Тогда
		Флаг = Истина;
	ИначеЕсли  Найти(ПолнаяСтрокаСобытия,"authenticateAdmin") > 0 Тогда
		Флаг = Истина;
	ИначеЕсли  Найти(ПолнаяСтрокаСобытия,"agentAuthenticate") > 0 Тогда
		Флаг = Истина;
	ИначеЕсли  Найти(ПолнаяСтрокаСобытия,"authenticateSrvrUser") > 0 Тогда
		Флаг = Истина;
	ИначеЕсли  Найти(ПолнаяСтрокаСобытия,"ClientComputerName=,ServerComputerName=,") > 0 Тогда
		Флаг = Истина;
	ИначеЕсли  Найти(ПолнаяСтрокаСобытия,"recv returns zero") > 0 Тогда
		Флаг = Истина;
	КонецЕсли;
	
	Возврат Флаг;	
	
	
КонецФункции	

Процедура ДобавитьСобытиеОшибкиИсключения(ЭлементXML,ИмяПотока) 
	
	
	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "PROC");
	Событие.ЗаписатьКонецЭлемента();
	
	//Событие = ДобавитьСобытие(ЭлементXML);
	//ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "SCOM");
	//Событие.ЗаписатьКонецЭлемента();

	//Событие = ДобавитьСобытие(ЭлементXML);
	//ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "CONN");
	//Событие.ЗаписатьКонецЭлемента();

	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "ADMIN");
	Событие.ЗаписатьКонецЭлемента();

	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "EXCP");
	Событие.ЗаписатьКонецЭлемента();
	
	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "EXCPCNTX");
	Событие.ЗаписатьКонецЭлемента();

	Событие = ДобавитьСобытие(ЭлементXML,ИмяПотока);
	ДобавитьУсловие(Событие, ИмяПотока+":eq", "Name", "QERR");
	Событие.ЗаписатьКонецЭлемента();

	
	ДобавитьСвойство(ЭлементXML, "all",ИмяПотока);
	
	
	ЭлементXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ОтправитьТаблицуОшибокПоВебСервису(Прокси,Сервер1с,ТаблицаОшибок,ИденификаторБазы)
	
	ТаблицаОшибокСтрокой = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(ТаблицаОшибок,Новый СжатиеДанных(9)));
	
	Прокси.SendQuery(ТаблицаОшибокСтрокой,ИденификаторБазы,Сервер1с.Наименование);
	
КонецПроцедуры	

Процедура ЗаполнитьДаннымиТаблицуОшибок(ТаблицаОшибок,ОбрабатываемаяСтрока,СтруктураПараметров)
	
	
	
	Если ОбрабатываемаяСтрока="" Тогда
        Возврат;
    КонецЕсли; 
    
    СтрокаУдалена = Ложь; 

	ИспользуетсяОфлайнМониторинг = СтруктураПараметров.ИспользуетсяОфлайнМониторинг;
	БазыМониторинга = СтруктураПараметров.БазыМониторинга;

	
    НомерСтрокиФайла = СтруктураПараметров.НомерСтрокиФайла;
    ПутьКФайлу = СокрЛП(СтруктураПараметров.ПутьКФайлу);
	Путь = СокрЛП(СтруктураПараметров.Путь);
    ДатаФайла = СтруктураПараметров.ДатаФайла;
	
	СтрокаСобытия = ОбрабатываемаяСтрока;
	
	ВремяЗаписи = Лев(ОбрабатываемаяСтрока, Найти(ОбрабатываемаяСтрока,"-") - 1);
	МоментВремени = Сред(ПутьКФайлу, СтрДлина(Лев(Путь, СтрДлина(Путь) - 1))+2,8) + Лев(ВремяЗаписи,2) + Сред(ВремяЗаписи,4,2) + Сред(ВремяЗаписи, Найти(ВремяЗаписи,".")+1);

	
    ПозицияРазделителя=Найти(ОбрабатываемаяСтрока,",");
    
    ТекСтрока=Лев(ОбрабатываемаяСтрока,ПозицияРазделителя-1);
    
    ДатаСобытия = Дата(ДатаФайла+"0000");
    //МоментВремени = 0;
    
    ДатаСобытия=Дата(ДатаФайла+(Число(Сред(ТекСтрока,1,2))*60)+Число(Сред(ТекСтрока,4,2)));
	
	//МоментВремени=Сред(ТекСтрока,7,4);
     
    ОбрабатываемаяСтрока=Сред(ОбрабатываемаяСтрока,ПозицияРазделителя+1);
    
    Длительность=Число(Сред(ТекСтрока,Найти(ТекСтрока,"-")+1)/10000);
    
    ПозицияРазделителя=Найти(ОбрабатываемаяСтрока,",");
    ЗначениеСобытия = НРЕГ(Лев(ОбрабатываемаяСтрока,ПозицияРазделителя-1));
    
	
	Если 
		ЗначениеСобытия <> "excp"
		и ЗначениеСобытия <> "excpcntx"
		и ЗначениеСобытия <> "context"
		и ЗначениеСобытия <> "proc"
		и ЗначениеСобытия <> "admin"
		и ЗначениеСобытия <> "qerr"
		тогда
		Возврат;
	КонецЕсли;	
	
	СтрокаТаблицаОшибок = ТаблицаОшибок.Добавить();
    СтрокаТаблицаОшибок.ИмяПроцесса = СтруктураПараметров.ИмяПроцесса;
    СтрокаТаблицаОшибок.МоментВремени=МоментВремени;
    СтрокаТаблицаОшибок.ТипСобытия =  ЗначениеСобытия;
	СтрокаТаблицаОшибок.СтрокаСобытияЦеликом = СтрокаСобытия;
    СтрокаТаблицаОшибок.ДатаВремяСобытия = ДатаСобытия;//Дата("20"+Лев(МоментВремени,12));
	СтрокаТаблицаОшибок.ДатаФайла = Дата(ДатаФайла+"0000");
	
	ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ПозицияРазделителя + 1);
	
	ПозицияРазделителя = Найти(ОбрабатываемаяСтрока,",");
	СтрокаТаблицаОшибок.Уровень = Лев(ОбрабатываемаяСтрока, ПозицияРазделителя - 1); 
	
	ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ПозицияРазделителя + 1);
	
	
	ПозицияИмениБазы = Найти(ОбрабатываемаяСтрока,"p:processName");
	Если ПозицияИмениБазы <> 0 Тогда
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ПозицияИмениБазы);
		ПозицияРазделителя = Найти(ОбрабатываемаяСтрока,",");
		СтрокаТаблицаОшибок.ИмяБазы = СтрЗаменить(Лев(ОбрабатываемаяСтрока, ПозицияРазделителя - 1),"p:processName=",""); 

		
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ПозицияРазделителя + 1); 
	КонецЕсли;

	СвойствоОписания = "Descr=";
	
	Если  ЗначениеСобытия = "admin" тогда
		
		СвойствоОписания = "Func=";
				
	ИначеЕсли  ЗначениеСобытия = "proc" тогда
		
		СвойствоОписания = "Txt=";
		
	КонецЕсли;	
	
	
	ПозицияСвойства = Найти(ОбрабатываемаяСтрока,СвойствоОписания);
	
	Если ЗначениеСобытия = "excp" и ПозицияСвойства = 0 Тогда
		 СвойствоОписания = "Exception=";
		 ПозицияСвойства = Найти(ОбрабатываемаяСтрока,СвойствоОписания);
	КонецЕсли;	
	
	
	Если ПозицияСвойства <> 0 Тогда
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ПозицияСвойства);
		ПозицияРазделителя = Найти(ОбрабатываемаяСтрока,СвойствоОписания) + СтрДлина(СвойствоОписания)-1;
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ПозицияРазделителя + 1);
		
		СтрокаТаблицаОшибок.Пояснение = Сред(ОбрабатываемаяСтрока, 1,СтрДлина(ОбрабатываемаяСтрока)); 
	КонецЕсли;

	
	Если ИспользуетсяОфлайнМониторинг  Тогда
		
		
		Если ЗначениеСобытия = "excp" И Не ПустаяСтрока(СтрокаТаблицаОшибок.ИмяБазы) И  БазыМониторинга.Свойство(СтрокаТаблицаОшибок.ИмяБазы)  Тогда
			
			КатегорияСобытия = ПолучитьКатегориюСобытийДЛяОфлайнМониторинга(СтрокаСобытия);
			Если КатегорияСобытия > 0 Тогда
				СтрокаТаблицаОшибок.ОфлайнМониторинг = Истина;
				СтрокаТаблицаОшибок.КатегорияСобытия = КатегорияСобытия;
			КонецЕсли;
		ИначеЕсли ЗначениеСобытия = "excp" и Найти(СтрокаСобытия,"DumpFile=") > 0 Тогда
			Для каждого ЭлементБазы из БазыМониторинга Цикл
				
				НоваяСтрокаТаблицыОшибок = ТаблицаОшибок.Добавить(); 
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыОшибок,СтрокаТаблицаОшибок);
				НоваяСтрокаТаблицыОшибок.ОфлайнМониторинг = Истина;
				НоваяСтрокаТаблицыОшибок.КатегорияСобытия = 7;
				НоваяСтрокаТаблицыОшибок.СлужебнаяСтрока = Истина;

			КонецЦикла;	
			
			
		КонецЕсли;
		
	КонецЕсли;	
	
	
	СтрокаТаблицаОшибок.Индекс = ТаблицаОшибок.Количество() - 1;
    
КонецПроцедуры

Процедура ДополнитьПпараметрыДляОфлайнМониторинга(СтруктураПараметров,Сервер1с)
	
	Если СтруктураПараметров.Свойство("ИспользуетсяОфлайнМониторинг") и СтруктураПараметров.ИспользуетсяОфлайнМониторинг Тогда
		
		СтруктураБаз = Новый Структура;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сервер1с",Сервер1с);
		Запрос.Текст = "ВЫБРАТЬ
		|	ИнформационныеБазыДляМониторинга.ИмяБазы
		|ИЗ
		|	Справочник.Сервер1С.ИнформационныеБазыДляМониторинга КАК ИнформационныеБазыДляМониторинга
		|ГДЕ
		|	ИнформационныеБазыДляМониторинга.ИспользоватьМониторинг
		|	И ИнформационныеБазыДляМониторинга.Ссылка = &Сервер1с";
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураБаз.Вставить(Выборка.ИмяБазы,Выборка.ИмяБазы);
			
		КонецЦикла;	
		
		СтруктураПараметров.Вставить("БазыМониторинга",СтруктураБаз);
	Иначе
		СтруктураПараметров.Вставить("БазыМониторинга",Новый Структура);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОчиститьТаблицуОтСлужебныхСтрок(ТаблицаОшибок)
	СтруктураПоиска = Новый Структура("СлужебнаяСтрока",ИСТИНА);
	
	МассивСтрок = ТаблицаОшибок.НайтиСтроки(СтруктураПоиска);
	
	Для каждого ЭлементМассива из МассивСтрок Цикл
		ТаблицаОшибок.Удалить(ЭлементМассива);
	КонецЦикла;	
				

КонецПроцедуры	

Функция  ПолучитьКатегориюСобытийДЛяОфлайнМониторинга(СтрокаСобытия) Экспорт
	
	КатегорияСобытия = 0;
	Если Найти(СтрокаСобытия,"Превышено максимальное время ожидания предоставления блокировки") > 0 Тогда
		КатегорияСобытия = 1;
	ИначеЕсли Найти(СтрокаСобытия,"Lock request time out period exceeded") > 0 Тогда
		КатегорияСобытия = 2;
	ИначеЕсли Найти(СтрокаСобытия,"взаимоблокировк") > 0 Тогда
		КатегорияСобытия = 3;
	ИначеЕсли Найти(СтрокаСобытия,"взаимоблокировк") > 0 Тогда
		КатегорияСобытия = 4;   //упр взаимоблокировка
	ИначеЕсли Найти(СтрокаСобытия,"Конфликт блокировок") > 0  Тогда	
		КатегорияСобытия = 5;
	ИначеЕсли Найти(СтрокаСобытия,"Не обнаружено свободной лицензии!") > 0 
		или Найти(СтрокаСобытия,"НЕ ОБНАРУЖЕН КЛЮЧ ЗАЩИТЫ ПРОГРАММЫ") > 0 
		или Найти(СтрокаСобытия,"Ошибка программного лицензирования") > 0 
		или Найти(СтрокаСобытия,"Превышено максимальное количество пользователей, разрешенное файлом программной лицензии") > 0 
		Тогда	
		КатегорияСобытия = 6;
	ИначеЕсли Найти(СтрокаСобытия,"DumpFile=") > 0 Тогда
		КатегорияСобытия = 7;
	ИначеЕсли Найти(СтрокаСобытия,"На устройстве нет свободного места") > 0
		или Найти(СтрокаСобытия,"База данных не обнаружена") > 0 
		или Найти(СтрокаСобытия,"Couldn't resolve host") > 0 
		или Найти(СтрокаСобытия,"Windows Sockets - 10061") > 0 
		Тогда
		
		КатегорияСобытия = 8;
	КонецЕсли;	
	
	
	Возврат КатегорияСобытия;
	
КонецФункции	




Процедура ОтправкаДанныхОбОшибках() Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Сервер1С.Ссылка
	//|ИЗ
	//|	Справочник.Сервер1С КАК Сервер1С
	//|ГДЕ
	//|	Сервер1С.ВключитьМониторинг";
	//
	//Выборка =Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
		Попытка 
			ОбработатьФайлыТехнологическогоЖурнала(Неопределено);
		Исключение
			ЗаписьЖурналаРегистрации("ОправкаДанныхНаСервер",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		КонецПопытки;
	//КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьФайлыПочтовыхВложений(ТаблицаОшибок,СтруктураПараметров,Сервер1с)  
	
	
	ИдентификаторБазы = СокрЛП(СтруктураПараметров.ИденификаторБазы);
	
	Если ПустаяСтрока(ИдентификаторБазы) Тогда
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		"В настройках не указан идентификатор базы!!!"); 

		ВызватьИсключение "В настройках не указан идентификатор базы!!!";
	КонецЕсли;	
	
	
	ИмяФайла =  СтруктураПараметров.ПутьКФайламПочтовыхВложений;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		ИмяФайла = КаталогВременныхФайлов();
	КонецЕсли;
	
	ИмяФайла =  ИмяФайла+"\Status_"+ИдентификаторБазы+"_1_"+СокрЛП(Сервер1с)+"_"+Формат(ТекущаяДата(),"ДФ=dd_MM_yyyy_HH_mm")+".txt";
	
	
	ТаблицаОшибокСтрокой = ЗначениеВСтрокуВнутр(Новый ХранилищеЗначения(ТаблицаОшибок,Новый СжатиеДанных(9)));
	
	
	ТекстовыйДокумент =  Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТаблицаОшибокСтрокой);
	ТекстовыйДокумент.Записать(ИмяФайла);
	
	
	ИмяИсходногоФайла = ИмяФайла;
	
	ИмяФайла = СтрЗаменить(ИмяФайла, ".txt", ".status");
	
	Архиватор = Новый ЗаписьZipФайла(ИмяФайла);
	Архиватор.Добавить(ИмяИсходногоФайла);
	Архиватор.Записать();		
	
	УдалитьФайлы(ИмяИсходногоФайла);
	
	СистемнаяУчетнаяЗапись = Константы.СистемнаяУчетнаяЗаписьПочты.Получить();
	
	АдресЭлектроннойПочты = СтруктураПараметров.ЭлектроннаяПочтаСервиса;	
	
	Если ЗначениеЗаполнено(СистемнаяУчетнаяЗапись) и Не ПустаяСтрока(АдресЭлектроннойПочты) Тогда
		 ОтправитьПочтовоеСообщение(СистемнаяУчетнаяЗапись,АдресЭлектроннойПочты,ИмяФайла);
	КонецЕсли;	
	
КонецПроцедуры	

Функция ПолучитьПрофильИнтернетПочтовоеПодключения(УчетнаяЗапись) Экспорт

	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;
	Если УчетнаяЗапись.ВремяОжиданияСервера > 0 Тогда
		Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;
	КонецЕсли; 
	Профиль.Пароль           = УчетнаяЗапись.Пароль;
	Профиль.Пользователь     = УчетнаяЗапись.Логин;
	Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;
	//Профиль.ИспользоватьSSLPOP3 = УчетнаяЗапись.ИспользоватьSSLPOP3;
	//Профиль.ИспользоватьSSLSMTP = УчетнаяЗапись.ИспользоватьSSLSMTP;
	//Профиль.ИспользоватьSSLIMAP = Истина;
	Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;
	
	Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;  
		Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;
		Профиль.ПользовательSMTP = УчетнаяЗапись.ЛогинSMTP;                 		
	Иначе
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
		Профиль.ПарольSMTP       = "";
		Профиль.ПользовательSMTP = "";
	КонецЕсли; 
	
	Возврат Профиль;

КонецФункции 

Процедура  ОтправитьПочтовоеСообщение(УчетнаяЗаписьОтправителя,АдресЭлектроннойПочты,ИмяФайла) Экспорт
	
	
	Профиль = ПолучитьПрофильИнтернетПочтовоеПодключения(УчетнаяЗаписьОтправителя);
	
	ИнтернетПочта = Новый ИнтернетПочта;
	Попытка
		
		ИнтернетПочта.Подключиться(Профиль);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		ОписаниеОшибки()); 
		
		
		ВызватьИсключение "Не удалось подключиться к почтовому серверу! Ошибка: " + ОписаниеОшибки();
		
	КонецПопытки;	
	
	ТекстСообщения = "";
	
	ПочтовоеСообщение = Новый ИнтернетПочтовоеСообщение;
	ПочтовоеСообщение.Получатели.Добавить(АдресЭлектроннойПочты);
	
	
	ПочтовоеСообщение.ИмяОтправителя = УчетнаяЗаписьОтправителя.Наименование;
	ПочтовоеСообщение.Отправитель = УчетнаяЗаписьОтправителя.АдресЭлектроннойПочты;
	ПочтовоеСообщение.Тема = "Data for service";
	
	ПочтовоеСообщение.Вложения.Добавить(ИмяФайла);
	
	
	Попытка
		
		ИнтернетПочта.Послать(ПочтовоеСообщение);
		
	Исключение
		
		ЗаписьЖурналаРегистрации("Авторассылка",
		УровеньЖурналаРегистрации.Ошибка, 
		"ОтправитьПочтовоеСообщение",, 
		ОписаниеОшибки()); 
		
		ВызватьИсключение "Не удалось отправить сообщение об ошибке! Ошибка: " + ОписаниеОшибки();
		
	КонецПопытки;	
	
КонецПроцедуры	

Процедура ВключениеТехнологическогоЖурнала() Экспорт
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//|	Сервер1С.Ссылка
	//|ИЗ
	//|	Справочник.Сервер1С КАК Сервер1С
	//|ГДЕ
	//|	Сервер1С.ВключитьМониторинг";
	//
	//Выборка  = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
		
		Попытка
			ТехнологическийЖурнал_Status.ВключитьТехнологическийЖурнал(Неопределено);
		Исключение
			ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
			УровеньЖурналаРегистрации.Ошибка, 
			"ВключениеТехнологическогоЖурнала",, 
			ОписаниеОшибки()); 
			
		КонецПопытки;
		
	//КонецЦикла;

	
КонецПроцедуры

Процедура ВыключитьМониторинг(Сервер1с = Неопределено) Экспорт
	
	Настройки =  ПолучитьНастройкиТЖ();
	
	
	Если Настройки.Количество() =0 или ПустаяСтрока(Настройки.ПутьКФайламЛоговТЖ)
		или ПустаяСтрока(Настройки.ПутьККонфигурационномуФайлу) Тогда
		
		ВызватьИсключение "В настройках не указаны пути логов технологического журнала!!!";
	КонецЕсли;	
	
    НабораЗаписей = РегистрыСведений.Настройки.СоздатьНаборЗаписей();
	НабораЗаписей.Отбор.Период.Установить(Настройки.Период);
	НабораЗаписей.Прочитать();
	
	Для каждого СтрокаНабора из НабораЗаписей Цикл
		
		СтрокаНабора.ВыключитьМониторингОшибки = Истина;
		
	КонецЦикла;	
	
	НабораЗаписей.Записать();	
	
	
	ПутьКФайлу = СтрЗаменить(Настройки.ПутьККонфигурационномуФайлу+"/logcfg.xml","/","\");
	
	КонфигурационныйФайлТЖ = Новый Файл(ПутьКФайлу);
	
	Если НЕ КонфигурационныйФайлТЖ.Существует() Тогда
		Возврат;
	КонецЕсли;	

	ПутьКВременномуЛогу = ПолучитьИмяВременногоФайла("xml");
	
	ПространствоИменЛогаТЖ = "http://v8.1c.ru/v8/tech-log"; 
	
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКВременномуЛогу, "UTF-8");        
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	
	
	Результат =  ПереписатьСуществующуюКонфигурациюТЖ(ЗаписьXML,ПутьКФайлу,ПространствоИменЛогаТЖ,"er_excp");
	
	
	Если НЕ Результат Тогда
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Существующий конфигурационный файл не соответствует принятому формату: "+ПутьКФайлу+" "+ ОписаниеОшибки()); 
		
		Возврат;
	КонецЕсли; 
	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть(); 
	
	Попытка
		
		КопироватьФайл(ПутьКВременномуЛогу,ПутьКФайлу);
		
		//ОбъектСпр = Сервер1с.ПолучитьОбъект();
		//ОбъектСпр.ВключитьМониторинг = Ложь;
		//ОбъектСпр.Записать();
		
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Возможно нет прав на доступ к каталогу для создания файла: "+ПутьКФайлу+" "+ ОписаниеОшибки();
		Сообщение.Сообщить();
		
		ЗаписьЖурналаРегистрации( "ВключениеТехнологическогоЖурнала",
		УровеньЖурналаРегистрации.Ошибка, 
		"ВключениеТехнологическогоЖурнала",, 
		"Не удалось записать файл настройки лога ТЖ: "+Строка(ПутьКФайлу)+" "+ОписаниеОшибки()); 
		
	КонецПопытки;

	
	
	
	

КонецПроцедуры	


Процедура ВключитьМониторинг() Экспорт
	
	Настройки =  ПолучитьНастройкиТЖ();
	
	Если Настройки.Количество() =0 или ПустаяСтрока(Настройки.ПутьКФайламЛоговТЖ)
		или ПустаяСтрока(Настройки.ПутьККонфигурационномуФайлу) Тогда
		
		ВызватьИсключение "В настройках не указаны пути логов технологического журнала!!!";
	КонецЕсли;	
	
    НабораЗаписей = РегистрыСведений.Настройки.СоздатьНаборЗаписей();
	НабораЗаписей.Отбор.Период.Установить(Настройки.Период);
	НабораЗаписей.Прочитать();
	
	Для каждого СтрокаНабора из НабораЗаписей Цикл
		
		СтрокаНабора.ВыключитьМониторингОшибки = Ложь;
		
	КонецЦикла;	
	
	НабораЗаписей.Записать();
	
	ТехнологическийЖурнал_Status.ВключитьТехнологическийЖурнал(Настройки);
	
КонецПроцедуры	

Процедура ОчисткаОбработанныхДанных() Экспорт
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	ТекПериод = ТекущаяДата();
	ПериодОбработки = ТекПериод-2*3600;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодОбработки",ПериодОбработки);
	Запрос.УстановитьПараметр("ПериодОбработки2",ПериодОбработки-84600);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПутиФайловТехнологическогоЖурнала.Период КАК ПериодТЖ,
	|	ПутиФайловТехнологическогоЖурнала.ПутьККаталогу КАК ПутьТЖ,
	|	ПутиФайловТехнологическогоЖурнала.НомерПотока,
	|	ПутиФайловТехнологическогоЖурнала.Сервер1с
	|ИЗ
	|	РегистрСведений.Status_ПутиФайловТехнологическогоЖурнала КАК ПутиФайловТехнологическогоЖурнала
	|ГДЕ
	|	ПутиФайловТехнологическогоЖурнала.Обработан
	|	И НЕ ПутиФайловТехнологическогоЖурнала.Удален
	|	И ПутиФайловТехнологическогоЖурнала.Период < &ПериодОбработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПутиФайловТехнологическогоЖурнала.Период,
	|	ПутиФайловТехнологическогоЖурнала.ПутьККаталогу,
	|	ПутиФайловТехнологическогоЖурнала.НомерПотока,
	|	ПутиФайловТехнологическогоЖурнала.Сервер1с
	|ИЗ
	|	РегистрСведений.Status_ПутиФайловТехнологическогоЖурнала КАК ПутиФайловТехнологическогоЖурнала
	|ГДЕ
	|	ПутиФайловТехнологическогоЖурнала.Период <= &ПериодОбработки2
	|	И ПутиФайловТехнологическогоЖурнала.Удален";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ПутьТЖ) Тогда
			продолжить;
		КонецЕсли;
		
		
		Попытка
			УдалитьФайлы(Выборка.ПутьТЖ);
			
			Набор = РегистрыСведений.Status_ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
			Набор.Отбор.Период.Установить(Выборка.ПериодТЖ);
			Набор.Отбор.Сервер1с.Установить(Выборка.Сервер1с);
			Набор.Прочитать();
			
			Если  Набор.Количество() > 0 Тогда
				СтрокаНабора = Набор[0];
				СтрокаНабора.Удален = Истина;
			КонецЕсли;
			
			Набор.Записать();
			
		Исключение
			
			
			ЗаписьЖурналаРегистрации("ОчисткаУстаревшихДанныхЛоговТЖ",
			УровеньЖурналаРегистрации.Ошибка, 
			"ОчисткаУстаревшихДанныхЛоговТЖ",, 
			"Не удалось удалить файлы логов ТЖ: "+Строка(Выборка.ПутьТЖ)+" "+ОписаниеОшибки()); 
		КонецПопытки;
		
	КонецЦикла;
		
		
	
	
	Запрос.УстановитьПараметр("ПериодОбработки",ТекПериод-86400);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПутиФайловТехнологическогоЖурнала.Период,
	|	ПутиФайловТехнологическогоЖурнала.Сервер1с
	|ИЗ
	|	РегистрСведений.Status_ПутиФайловТехнологическогоЖурнала КАК ПутиФайловТехнологическогоЖурнала
	|ГДЕ
	|	ПутиФайловТехнологическогоЖурнала.Период < &ПериодОбработки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.Status_ПутиФайловТехнологическогоЖурнала.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Выборка.Период);
		Набор.Отбор.Сервер1с.Установить(Выборка.Сервер1с);
		Набор.Прочитать();
		Набор.Очистить();
		Набор.Записать();
		
	КонецЦикла;	
	
	

	
	Запрос.УстановитьПараметр("ПериодОбработки",ТекПериод-86400);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеТЖДляОтправки.ПериодОбработки,
	|	ДанныеТЖДляОтправки.НомерПакета,
	|	ДанныеТЖДляОтправки.Сервер1с
	|ИЗ
	|	РегистрСведений.ДанныеТЖДляОтправки КАК ДанныеТЖДляОтправки
	|ГДЕ
	|	ДанныеТЖДляОтправки.ПериодОбработки < &ПериодОбработки
	|	И ДанныеТЖДляОтправки.Отправлен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДанныеТЖДляОтправки.СоздатьНаборЗаписей();
		Набор.Отбор.Сервер1с.Установить(Выборка.Сервер1с);
		Набор.Отбор.ПериодОбработки.Установить(Выборка.ПериодОбработки);
		Набор.Отбор.НомерПакета.Установить(Выборка.НомерПакета);
		Набор.Прочитать();
		Набор.Очистить();
		Набор.Записать();
		
	КонецЦикла;	

   ОчиститьЛогОтправкиДанных();
 
КонецПроцедуры


Процедура ОперативноеВключениеТехнологическогоЖурнала() Экспорт
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Если СтруктураПараметров.Количество() > 0 и  СтруктураПараметров.ОперативныйРежимПолученияИнформацииОбОшибках Тогда
		
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	Сервер1С.Ссылка
		//|ИЗ
		//|	Справочник.Сервер1С КАК Сервер1С
		//|ГДЕ
		//|	Сервер1С.ВключитьМониторинг";
		//
		//Выборка  = Запрос.Выполнить().Выбрать();
		//
		//Пока Выборка.Следующий() Цикл
		//	
		//	Попытка
		//		
		//		НомерПотока = 1;
		//		
		//		НаборПотоков = РегистрыСведений.НомераПотоковПоСерверам.СоздатьНаборЗаписей();
		//		НаборПотоков.Отбор.Сервер1с.Установить(Выборка.Ссылка);
		//		НаборПотоков.Прочитать();
		//		
		//		Если НаборПотоков.Количество() > 0 Тогда
		//			НомерПотока = НаборПотоков[0].НомерПотока;
		//		КонецЕсли;	
		//		
		//		
		//		НомерПотока = ?(НомерПотока > 2,1,НомерПотока);
		//		
		//		ИмяПотока = "er_excp"+?(НомерПотока > 1,Строка(НомерПотока),"");

		//		
		//		ВключитьТехнологическийЖурнал(Выборка.Ссылка,ИмяПотока);
		//	Исключение
		//		ЗаписьЖурналаРегистрации( "ОперативноеВключениеТехнологическогоЖурнала",
		//		УровеньЖурналаРегистрации.Ошибка, 
		//		"ОперативноеВключениеТехнологическогоЖурнала",, 
		//		ОписаниеОшибки()); 
		//		
		//	КонецПопытки;
		//	
		//КонецЦикла;

		
		Попытка
			
			НомерПотока = 1;
			
			НаборПотоков = РегистрыСведений.НомераПотоковПоСерверам.СоздатьНаборЗаписей();
			НаборПотоков.Отбор.Сервер1с.Установить(Справочники.Сервер1С.ПустаяСсылка());
			НаборПотоков.Прочитать();
			
			Если НаборПотоков.Количество() > 0 Тогда
				НомерПотока = НаборПотоков[0].НомерПотока;
			КонецЕсли;	
			
			
			НомерПотока = ?(НомерПотока > 2,1,НомерПотока);
			
			ИмяПотока = "er_excp"+?(НомерПотока > 1,Строка(НомерПотока),"");
			
			
			ВключитьТехнологическийЖурнал(СтруктураПараметров,ИмяПотока);
		Исключение
			ЗаписьЖурналаРегистрации( "ОперативноеВключениеТехнологическогоЖурнала",
			УровеньЖурналаРегистрации.Ошибка, 
			"ОперативноеВключениеТехнологическогоЖурнала",, 
			ОписаниеОшибки()); 
			
		КонецПопытки;
			
		
	КонецЕсли;


КонецПроцедуры


Процедура ОперативнаяОтправкаТаблицыТЖ() Экспорт
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Если СтруктураПараметров.Количество() > 0 и  СтруктураПараметров.ОперативныйРежимПолученияИнформацииОбОшибках Тогда
		
		Попытка
			ОтправитьДанныеТЖ(СтруктураПараметров);
		Исключение
			 ЗаписьЖурналаРегистрации( "ОперативнаяОтправкаТаблицыТЖ",
			УровеньЖурналаРегистрации.Ошибка, 
			"ОперативнаяОтправкаТаблицыТЖ",, 
			ОписаниеОшибки());

		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьДанныеТЖ(СтруктураПараметров)  Экспорт
	 
	 ТаблицаОтправленныхДанных = Новый ТаблицаЗначений;
	 ТаблицаОтправленныхДанных.Колонки.Добавить("ПериодОбработки");
	 ТаблицаОтправленныхДанных.Колонки.Добавить("Сервер1с");
	 ТаблицаОтправленныхДанных.Колонки.Добавить("НомерПакета");
	 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеТЖДляОтправки.ПериодОбработки,
	|	ДанныеТЖДляОтправки.НомерПакета,
	|	ДанныеТЖДляОтправки.ДанныеЛоговТЖ,
	|	ДанныеТЖДляОтправки.ПериодФайлов КАК ПериодФайлов,
	|	ДанныеТЖДляОтправки.Сервер1с КАК Сервер1с
	|ИЗ
	|	РегистрСведений.ДанныеТЖДляОтправки КАК ДанныеТЖДляОтправки
	|ГДЕ
	|	НЕ ДанныеТЖДляОтправки.Отправлен
	|ИТОГИ ПО
	|	Сервер1с,
	|	ПериодФайлов";
		  
	ВыборкаПоСерверу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока  ВыборкаПоСерверу.Следующий() Цикл
		ВыборкаПоПериоду = ВыборкаПоСерверу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПериоду.Следующий() Цикл
			
			ТаблицаОшибок = ПолучитьТаблицуОшибок();
			ТаблицаОшибок.Колонки.Добавить("Каталог",Новый ОписаниеТипов("Строка"));
			
			Выборка = ВыборкаПоПериоду.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ТаблицаИзПакета = Выборка.ДанныеЛоговТЖ.Получить();
				
				Для каждого СтрокаТаблицы из ТаблицаИзПакета Цикл
					СтрокаДанных = ТаблицаОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанных,СтрокаТаблицы);
				КонецЦикла;
				
				СтрокаОтправкиДанных = ТаблицаОтправленныхДанных.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОтправкиДанных,Выборка);
				
				
			КонецЦикла;	
			
			ТаблицаОшибок.Свернуть("ТипСобытия,Каталог,ИмяПроцесса,Уровень,ДатаФайла,ДатаВремяСобытия,МоментВремени,Пояснение,СтрокаСобытияЦеликом,ИмяБазы");
			ОтправитьТаблицуТЖНаСервер(ТаблицаОшибок,СтруктураПараметров,ВыборкаПоСерверу.Сервер1с)
			
		КонецЦикла;	
	КонецЦикла;		
	
	ТаблицаОтправленныхДанных.Свернуть("Сервер1с,ПериодОбработки,НомерПакета");
	
	Для каждого СтрокаТЗ из ТаблицаОтправленныхДанных Цикл
		НаборДанных = РегистрыСведений.ДанныеТЖДляОтправки.СоздатьНаборЗаписей();
		НаборДанных.Отбор.Сервер1с.Установить(СтрокаТЗ.Сервер1с);
		НаборДанных.Отбор.ПериодОбработки.Установить(СтрокаТЗ.ПериодОбработки);
		НаборДанных.Отбор.НомерПакета.Установить(СтрокаТЗ.НомерПакета);
		НаборДанных.Прочитать();
		
		Для каждого ЭлементНабора из НаборДанных Цикл
			ЭлементНабора.Отправлен = Истина;
		КонецЦикла;  
		
		НаборДанных.Записать();
	КонецЦикла;	
			




 КонецПроцедуры


Процедура ОбработкаЛоговТехнологическогоЖурнала() Экспорт
	
	СтруктураПараметров = ПолучитьНастройкиТЖ();
	Если СтруктураПараметров.Количество() > 0 и  СтруктураПараметров.ОперативныйРежимПолученияИнформацииОбОшибках Тогда
		
		Попытка 
			ОбработатьФайлыТехнологическогоЖурнала(СтруктураПараметров);
		Исключение
			ЗаписьЖурналаРегистрации("ОправкаДанныхНаСервер",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		КонецПопытки;
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = "ВЫБРАТЬ
		//|	Сервер1С.Ссылка
		//|ИЗ
		//|	Справочник.Сервер1С КАК Сервер1С
		//|ГДЕ
		//|	Сервер1С.ВключитьМониторинг";
		//
		//Выборка =Запрос.Выполнить().Выбрать();
		//
		//Пока Выборка.Следующий() Цикл
		//	Попытка 
		//		ОбработатьФайлыТехнологическогоЖурнала(Выборка.Ссылка);
		//	Исключение
		//		ЗаписьЖурналаРегистрации("ОправкаДанныхНаСервер",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		//	КонецПопытки;
		//КонецЦикла;

		
	КонецЕсли;

КонецПроцедуры


Функция ПолучитьТаблицуПутейОперативныхЛоговТЖ(Сервер1с,СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Начало",ТекущаяДата() - 300);
	//Запрос.УстановитьПараметр("Сервер1с",Сервер1с);
	Запрос.УстановитьПараметр("Сервер1с",Справочники.Сервер1С.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	|	ПутиФайловТехнологическогоЖурнала.ПутьККаталогу,
	|	ПутиФайловТехнологическогоЖурнала.Период
	|ИЗ
	|	РегистрСведений.Status_ПутиФайловТехнологическогоЖурнала КАК ПутиФайловТехнологическогоЖурнала
	|ГДЕ
	|	НЕ ПутиФайловТехнологическогоЖурнала.Удален
	|	И ПутиФайловТехнологическогоЖурнала.Период < &Начало
	|	И НЕ ПутиФайловТехнологическогоЖурнала.Обработан
	|	И ПутиФайловТехнологическогоЖурнала.Сервер1с = &Сервер1с
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПутиФайловТехнологическогоЖурнала.Период УБЫВ";
	
	
	ТаблицаПутейФайлов = Новый ТаблицаЗначений;
	//ТаблицаПутейФайлов.Колонки.Добавить("Порог");
	ТаблицаПутейФайлов.Колонки.Добавить("ПутьКФайлу");
	ТаблицаПутейФайлов.Колонки.Добавить("Путь");
	ТаблицаПутейФайлов.Колонки.Добавить("КороткоеИмяФайла");
	ТаблицаПутейФайлов.Колонки.Добавить("ДатаФайла");
	ТаблицаПутейФайлов.Колонки.Добавить("ИмяПроцесса");
	ТаблицаПутейФайлов.Колонки.Добавить("РазмерФайла");

	 
	 ТЗПутейОперативногоТЖ = Запрос.Выполнить().Выгрузить();
	 
	 Для каждого СтрокаТаблицы из ТЗПутейОперативногоТЖ Цикл
		 
		 ТаблицаПутейКФайлам = ПолучитьТаблицуПутейФайлов(Новый Структура("ПутьКФайламЛоговТЖ",СтрокаТаблицы.ПутьККаталогу),ТаблицаПутейФайлов);
		 
	 КонецЦикла;

	 
	 Если ТЗПутейОперативногоТЖ.Количество() > 0 Тогда
		 СтруктураПараметров.Вставить("ТЗПутейОперативногоТЖ",ТЗПутейОперативногоТЖ.Скопировать());
	 КонецЕсли;
	
	Возврат ТаблицаПутейФайлов;
	
КонецФункции

Процедура ОчиститьЛогОтправкиДанных() Экспорт
	
	ТекПериод = НачалоДня(ТекущаяДата());
	ПериодОбработки = ТекПериод-86400;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодОбработки",ПериодОбработки);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЛогОтправкиДанных.Период КАК Период,
	|	ЛогОтправкиДанных.Сервер1с
	|ИЗ
	|	РегистрСведений.Status_ЛогОтправкиДанных КАК ЛогОтправкиДанных
	|ГДЕ
	|	ЛогОтправкиДанных.Период < &ПериодОбработки";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		
		Набор = РегистрыСведений.Status_ЛогОтправкиДанных.СоздатьНаборЗаписей();
		Набор.Отбор.Период.Установить(Выборка.Период);
		Набор.Отбор.Сервер1с.Установить(Выборка.Сервер1с);
		Набор.Записать();
			
			
	КонецЦикла;

	
КонецПроцедуры	

Функция ПроверитьВерсию() Экспорт
	
	ТекущаяВерсия = "1-3";
	Если ТекущаяДата()-Константы.ДатаПроверкиВерсии.Получить() > 24*60*60 Тогда
		Попытка
			АктуальнаяВерсия = ПолучитьАктуальнуюВерсию();
			Если АктуальнаяВерсия <> "" И ТекущаяВерсия <> АктуальнаяВерсия Тогда
				Сообщить("Вышла новая версия сервиса Status. Пожалуйста обновите конфигурацию с сайта http://gilev.ru/1c/cloud");
				Сообщить("	Установленная версия: " + ТекущаяВерсия);
				Сообщить("	Актуальная версия: " + АктуальнаяВерсия);
			КонецЕсли;
		Исключение
		КонецПопытки;
		Константы.ДатаПроверкиВерсии.Установить(ТекущаяДата());
	КонецЕсли;
	
	ВыполнитьОбновлениеРелиза(ТекущаяВерсия);

	Возврат ТекущаяВерсия
КонецФункции

Функция ПолучитьАктуальнуюВерсию() Экспорт
	
	АктуальнаяВерсия = "";

	СтруктураПараметров = ПолучитьНастройкиТЖ();
	
	Если НЕ СтруктураПараметров.ФормироватьПочтовыеФайлы Тогда
		
		Попытка
			Прокси = ПолучитьПодключениеКБазе(СтруктураПараметров);
		Исключение
			Возврат АктуальнаяВерсия;
		КонецПопытки;
	Иначе
		Возврат АктуальнаяВерсия;
	КонецЕсли;
	
	
	Попытка		
		АктуальнаяВерсия  = Прокси.GetCurrentVersion("1");
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка при проверке обновления", ,,,ОписаниеОшибки());
	КонецПопытки;

	Возврат АктуальнаяВерсия;
	
КонецФункции

 Процедура ВыполнитьОбновлениеРелиза(ТекущийНомерРелиза)  Экспорт
	
	
	Настройки = ПолучитьНастройкиТЖ();
	
	Если  Настройки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;   
	
	
	Если ТекущийНомерРелиза = Настройки.НомерРелиза Тогда
		Возврат;
	КонецЕсли;	
	
	
	Редакция =1;
	Часть = 1;
	
	Если НЕ ПустаяСтрока(Настройки.НомерРелиза) 
		Тогда
		Редация = Число(Лев(Настройки.НомерРелиза,Найти(Настройки.НомерРелиза,"-")-1));
		Часть = Число(Сред(Настройки.НомерРелиза,Найти(Настройки.НомерРелиза,"-")+1));
	КонецЕсли;	
	
	Если Редакция <= 1 и  Часть < 3 Тогда
		
		НаборНастройки =  РегистрыСведений.Настройки.СоздатьНаборЗаписей();
		НаборНастройки.Отбор.Период.Установить(Настройки.Период);
		НаборНастройки.Прочитать();
		
		ДЛя каждого СтрокаНабора из НаборНастройки Цикл
			СтрокаНабора.WSDL_Status_УдаленноеПодключениеРезерв = "http://beta.gilev.ru:8080/StatusWeb/ws/status.1cws?wsdl";
		КонецЦикла;	
		
		НаборНастройки.Записать();
		
	КонецЕсли;	
	
	
	
	НаборНастройки =  РегистрыСведений.Настройки.СоздатьНаборЗаписей();
	НаборНастройки.Отбор.Период.Установить(Настройки.Период);
	НаборНастройки.Прочитать();
	
	ДЛя каждого СтрокаНабора из НаборНастройки Цикл
		СтрокаНабора.НомерРелиза = ТекущийНомерРелиза;
	КонецЦикла;	
	
	НаборНастройки.Записать();

	
КонецПроцедуры	




