Функция ИнтернетПочтовыйПрофиль(ДляПолучения = Ложь)
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись.Ссылка, "Пароль, ПарольSMTP");
	УстановитьПривилегированныйРежим(Ложь);
	Пароль = Пароли.Пароль;
	ПарольSMTP = Пароли.ПарольSMTP;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Если УчетнаяЗапись.ТребуетсяВходНаСерверПередОтправкой Тогда
		Профиль.АдресСервераPOP3 = УчетнаяЗапись.СерверВходящейПочты;
		Профиль.ИспользоватьSSLPOP3 = УчетнаяЗапись.ИспользоватьЗащищенноеСоединениеДляВходящейПочты;
		Профиль.Пароль = УчетнаяЗапись.ПарольДляПолученияПисем;
		Профиль.Пользователь = УчетнаяЗапись.ИмяПользователяДляПолученияПисем;
		Профиль.ПортPOP3 = УчетнаяЗапись.ПортСервераВходящейПочты;
		Профиль.ТолькоЗащищеннаяАутентификацияPOP3 = УчетнаяЗапись.ИспользоватьБезопасныйВходНаСерверВходящейПочты;
	КонецЕсли;
	
	Профиль.POP3ПередSMTP = УчетнаяЗапись.ТребуетсяВходНаСерверПередОтправкой;
	Профиль.АдресСервераSMTP = УчетнаяЗапись.СерверИсходящейПочты;
	Профиль.ИспользоватьSSLSMTP = УчетнаяЗапись.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты;
	Профиль.ПарольSMTP = ПарольSMTP;
	Профиль.ПользовательSMTP = УчетнаяЗапись.ПользовательSMTP;
	Профиль.ПортSMTP = УчетнаяЗапись.ПортСервераИсходящейПочты;
	Профиль.ТолькоЗащищеннаяАутентификацияSMTP = УчетнаяЗапись.ИспользоватьБезопасныйВходНаСерверИсходящейПочты;
	
	Профиль.Таймаут = УчетнаяЗапись.ВремяОжидания;
	
	Возврат Профиль;
	
КонецФункции

Процедура ОтправитьСистемноеСообщение(ПараметрыПисьма) Экспорт
	
	Тема = ПараметрыПисьма.Тема;
	Тело = ПараметрыПисьма.Текст;
	Получатели = ПараметрыПисьма.Получатели;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Получатели, ";");
	
	Для Каждого Стр Из МассивАдресов Цикл
		Стр = СтрЗаменить(Стр, "=", Символы.ПС);
		
		ОтображаемоеИмя = СокрЛП(СтрПолучитьСтроку(Стр, 1));
		Адрес = СокрЛП(СтрПолучитьСтроку(Стр, 2));
		
		Получатель = Письмо.Получатели.Добавить(Адрес);
		Получатель.ОтображаемоеИмя = ОтображаемоеИмя;		
	КонецЦикла;
			
	Письмо.ИмяОтправителя = "1ctest";
	Письмо.Отправитель.ОтображаемоеИмя = "1ctest";
	Письмо.Отправитель.Адрес = "1ctest@apk-agroeco.ru";
	
	Текст = Письмо.Тексты.Добавить(Тело);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	Профиль = ИнтернетПочтовыйПрофиль();
	ИнтернетПочта = Новый ИнтернетПочта;
	
	ТекстОшибки = "";
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
		ИнтернетПочта.Послать(Письмо);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Процедура ОтправитьТестовоеПисьмо(Текст) Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("Тема", "Проверка связи");
	Параметры.Вставить("Текст", Текст);
	Параметры.Вставить("Получатели", "МининИгорь=i.minin@apk-agroeco.ru");
	
	ОтправитьСистемноеСообщение(Параметры);
КонецПроцедуры

Процедура аэОбработкаЭлектроннойПочты() Экспорт
	
	Письма = ПолучитьСписокСообщений(Письма);
	ОбработатьПисьма(Письма);
	
КонецПроцедуры

Функция ПолучитьСписокСообщений(Письма)
	
	
	Письма = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты);
	
	Возврат Письма;
КонецФункции

Процедура ОбработатьПисьма(Письма)
	
	Для Каждого Письмо Из Письма Цикл
		Для Каждого ТекстовоеВложение Из Письмо.Тексты Цикл
			
			Получатели = "";
			ПолучателиКопия = "";
			Переговорная = "";
			ДатаСовещания = "";
			ТемаСовещания = "";
			
			МассивСтрок = СтрРазделить(ТекстовоеВложение.Получить("Текст"), Символы.ПС);
			ЕстьПолучателиКопия = Ложь;
			
			Для Каждого Строка Из МассивСтрок Цикл
				Если Лев(Строка, 4) = "To: " Тогда
					Стр = СтрЗаменить(Строка, "To: ", "");
					Стр = СтрЗаменить(Стр, Символ(13), "");
					
					Получатели = СтрРазделить(Стр, ";");
					
				ИначеЕсли Лев(Строка, 4) = "Cc: " Тогда
					Стр = СтрЗаменить(Строка, "Cc: ", "");
					Стр = СтрЗаменить(Стр, Символ(13), "");
					
					ПолучателиКопия = СтрРазделить(Стр, ";");
					
					ЕстьПолучателиКопия = ЗначениеЗаполнено(ПолучателиКопия);
				ИначеЕсли Лев(Строка, 6) = "When: " Тогда
					Стр = СтрЗаменить(Строка, "When: ", "");
					Стр = СтрЗаменить(Стр, " (UTC+03:00) Багдад.", "");
					Стр = СтрЗаменить(Стр, " (UTC+03:00) Baghdad.", "");
					Стр = СтрЗаменить(Стр, Символ(13), "");
					
					ДатаСовещания = Стр;
					
				ИначеЕсли Лев(Строка, 7) = "Where: " Тогда
					Стр = СтрЗаменить(Строка, "Where: ", "");
					Стр = СтрЗаменить(Стр, Символ(13), "");
					
					Переговорная = НайтиСоздатьПереговорную(Стр);
					
				ИначеЕсли Лев(Строка, 9) = "Subject: " Тогда
					Стр = СтрЗаменить(Строка, "Subject: ", "");
					Стр = СтрЗаменить(Стр, Символ(13), "");
					
					ТемаСовещания = НайтиСоздатьПереговорную(Стр);
					
				КонецЕсли
				
			КонецЦикла;
			
			
			Если ПустаяСтрока(ДатаСовещания) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Переговорная", Переговорная); 
			Запрос.УстановитьПараметр("ДатаСовещания", ДатаСовещания); 
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	аэСовещания.Ссылка
			|ИЗ
			|	Справочник.аэСовещания КАК аэСовещания
			|ГДЕ
			|	аэСовещания.Переговорная = &Переговорная
			|	И ПОДСТРОКА(аэСовещания.ДатаСовещания, 1, " + СтрДлина(ДатаСовещания) + ") = &ДатаСовещания"
			;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
			Иначе
				
				НовоеСовещание = Справочники.аэСовещания.СоздатьЭлемент();
				НовоеСовещание.Наименование = Строка(ТемаСовещания) + " " + Строка(Переговорная.Наименование) + " " + Строка(ДатаСовещания);
				НовоеСовещание.Переговорная = Переговорная;
				НовоеСовещание.ДатаСовещания = ДатаСовещания;
				НовоеСовещание.ТемаСовещания = ТемаСовещания;
				
				Для Каждого СтрокаПолучатель Из Получатели Цикл
					НоваяСтрока = НовоеСовещание.Участники.Добавить();
					НоваяСтрока.ПользовательСтрокой = СокрЛП(СтрокаПолучатель);
					НоваяСтрока.Пользователь = Справочники.Пользователи.НайтиПоНаименованию(НоваяСтрока.ПользовательСтрокой);
				КонецЦикла;
				Если ЕстьПолучателиКопия Тогда
					Для Каждого СтрокаПолучатель Из ПолучателиКопия Цикл
						НоваяСтрока = НовоеСовещание.Участники.Добавить();
						НоваяСтрока.ПользовательСтрокой = СокрЛП(СтрокаПолучатель);
					КонецЦикла;
				КонецЕсли;
				
				НовоеСовещание.Записать();
				
			КонецЕсли;
			
			//From: Иренкова Валерия Сергеевна On Behalf Of Дудоладова Анна Владимировна
			//Sent: Wednesday, August 17, 2016 3:19 PM
			//To: Минин Игорь Валериевич; Максимчук Евгений Юрьевич
			//Cc: Сергиенко Александр Владимирович
			//Subject: Общая планерка
			//When: 23 марта 2017 г. 10:00-11:30 (UTC+03:00) Багдад.
			//Where: Большая переговорная
			
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьПереговорную(Строка)
	
	Ссылка = Справочники.аэПереговорные.НайтиПоНаименованию(Строка);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		НоваяПереговорная = Справочники.аэПереговорные.СоздатьЭлемент();
		НоваяПереговорная.Наименование = Строка;
		НоваяПереговорная.Записать();
		
		Ссылка = НоваяПереговорная.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция аэИнтернетПочтовыйПрофиль(УчетнаяЗапись, ДляПолучения = Истина)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверВходящейПочты КАК ТолькоЗащищеннаяАутентификацияIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК Пользователь,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверВходящейПочты КАК ТолькоЗащищеннаяАутентификацияPOP3,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ТребуетсяВходНаСерверПередОтправкой КАК POP3ПередSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьБезопасныйВходНаСерверИсходящейПочты КАК ТолькоЗащищеннаяАутентификацияSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут,
	|	УчетныеЗаписиЭлектроннойПочты.ПротоколВходящейПочты КАК Протокол
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		СписокСвойствIMAP = "АдресСервераIMAP,ПортIMAP,ИспользоватьSSLIMAP,ПользовательIMAP,ТолькоЗащищеннаяАутентификацияIMAP";
		СписокСвойствPOP3 = "АдресСервераPOP3,ПортPOP3,ИспользоватьSSLPOP3,Пользователь,ТолькоЗащищеннаяАутентификацияPOP3";
		СписокСвойствSMTP = "АдресСервераSMTP,ПортSMTP,ИспользоватьSSLSMTP,ПользовательSMTP,ТолькоЗащищеннаяАутентификацияSMTP";
		
		Результат = Новый ИнтернетПочтовыйПрофиль;
		Если ДляПолучения Тогда
			Если Выборка.Протокол = "IMAP" Тогда
				ТребуемыеСвойства = СписокСвойствIMAP;
				УстановитьПривилегированныйРежим(Истина);
				Результат.ПарольIMAP = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись);
				УстановитьПривилегированныйРежим(Ложь);
			Иначе
				ТребуемыеСвойства = СписокСвойствPOP3;
				УстановитьПривилегированныйРежим(Истина);
				Результат.Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись);
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;
		Иначе
			ТребуемыеСвойства = СписокСвойствSMTP;
			Если Выборка.Протокол <> "IMAP" И Выборка.POP3ПередSMTP Тогда
				ТребуемыеСвойства = ТребуемыеСвойства + ",POP3ПередSMTP," + СписокСвойствPOP3;
			КонецЕсли;
			УстановитьПривилегированныйРежим(Истина);
			Результат.ПарольSMTP = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "ПарольSMTP");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		ТребуемыеСвойства = ТребуемыеСвойства + ",Таймаут";
		ЗаполнитьЗначенияСвойств(Результат, Выборка, ТребуемыеСвойства);
	КонецЕсли;
	
	Возврат Результат;

	
КонецФункции

Функция ПроверитьДоступностьРоли(ИмяРоли) Экспорт
	
	Возврат РольДоступна(ИмяРоли);
	
КонецФункции

Функция ЗаполнитьДеревоВзаимодействий(Ссылка) Экспорт
	ТаблицаВзаимодействий = Новый ТаблицаЗначений;
	ТаблицаВзаимодействий.Колонки.Добавить("Основание");
	ТаблицаВзаимодействий.Колонки.Добавить("Подчиненный");
	
	ПредметОснование = Неопределено;
	
	НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Взаимодействие.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 И НаборЗаписей[0].Предмет <> Ссылка Тогда
		ПредметОснование = НаборЗаписей[0].Предмет;
	Иначе
		ПредметОснование = Ссылка.Предмет;
	КонецЕсли;
	
	НС = ТаблицаВзаимодействий.Добавить();
	НС.Основание = ПредметОснование;
	НС.Подчиненный = Ссылка;
	
	Если ЗначениеЗаполнено(ПредметОснование) Тогда   //И Не ЗначениеЗаполнено(ПредметОснование.Предмет) 
		
		ДобавитьВсехВладельцевПоПредмету(ПредметОснование, ТаблицаВзаимодействий);
		
	КонецЕсли;
	
	ДобавитьПодчиненныхПоВладельцу(Ссылка, Истина, ТаблицаВзаимодействий);
	ОбработатьПодчиненныхВладельцев(ТаблицаВзаимодействий);
	
	ТаблицаВзаимодействий.Сортировать("Основание Убыв, Подчиненный Убыв");
	ВремДерево = ВыгрузитьТаблицуЗначенийВДеревоЗначений(ТаблицаВзаимодействий, Ссылка);
	
	Возврат ВремДерево;
КонецФункции

//
Функция ДобавитьВсехВладельцевПоПредмету(ПредметСсылка, ТаблицаВзаимодействий)
	
	ВладелецНайден = Ложь;
	
	//1.Если есть реквизит Предмет и он заполнен - то он является владельцем
	Если ЕстьРеквизитОбъекта("Предмет", ПредметСсылка) и ЗначениеЗаполнено(ПредметСсылка.Предмет) Тогда
		
	
		НС = ТаблицаВзаимодействий.Добавить();
		НС.Основание = ПредметСсылка.Предмет;
		НС.Подчиненный = ПредметСсылка;
		
		ВладелецНайден = Истина;
		
		ДобавитьВсехВладельцевПоПредмету(ПредметСсылка.Предмет, ТаблицаВзаимодействий)
	КонецЕсли;
	
	//2. По р/св Предметы папки взаимодействия
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПредметСсылка", ПредметСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Предмет
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие = &ПредметСсылка"
	;
	
	ТабПредметов = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из ТабПредметов Цикл
		
		СтрокаПредмет = ?(Строка.Предмет = Строка.Взаимодействие, Неопределено, Строка.Предмет);
		СтрокаВзаимодействие = Строка.Взаимодействие;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", СтрокаПредмет);
		СтруктураПоиска.Вставить("Подчиненный", СтрокаВзаимодействие);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = СтрокаПредмет;
			НС.Подчиненный = СтрокаВзаимодействие;
			
			ВладелецНайден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВладелецНайден Тогда
		
		НС = ТаблицаВзаимодействий.Добавить();
		НС.Основание = Неопределено;
		НС.Подчиненный = ПредметСсылка;
		
	КонецЕсли;
	
КонецФункции

Функция ЕстьРеквизитОбъекта(ИмяРеквизита, Объект) Экспорт

	МетаданныеОбъекта = Объект.Метаданные();
		Если МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
	КонецЕсли; 

КонецФункции    

Процедура ЗаполнитьРеквизитыВзаимодействия(Строка, СтруктураПоиска = Неопределено) Экспорт
	
	Взаимодействие = Строка.Взаимодействие;
	ТипЗначенияВзаимодействия = ТипЗнч(Взаимодействие);
	
	ЭтоЗадача = (ТипЗначенияВзаимодействия = Тип("СправочникСсылка.узЗадачи"));
	ЭтоВстреча = (ТипЗначенияВзаимодействия = Тип("ДокументСсылка.Встреча"));
	ЭтоСообщениеSMS = (ТипЗначенияВзаимодействия = Тип("ДокументСсылка.СообщениеSMS"));
	ЭтоЗапланированноеВзаимодействие = (ТипЗначенияВзаимодействия = Тип("ДокументСсылка.ЗапланированноеВзаимодействие"));
	ЭтоТелефонныйЗвонок = (ТипЗначенияВзаимодействия = Тип("ДокументСсылка.ТелефонныйЗвонок"));
	ЭтоЭлектронноеПисьмоВходящее = (ТипЗначенияВзаимодействия = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
	ЭтоЭлектронноеПисьмоИсходящее = (ТипЗначенияВзаимодействия = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	ЭтоЗадачаИсполнителя = (ТипЗначенияВзаимодействия = Тип("ЗадачаСсылка.ЗадачаИсполнителя"));
	
	НомерКартинки = 0;
	Исполнитель = Справочники.Пользователи.ПустаяСсылка();
	СрокИсполнения = "";
	Статус = "";
	СтатусКартинкой = 16;
	Содержание = "";
	Дата = "";
	Ответственный = "";
	Отправитель = "";
	Рассмотрено = Ложь;
	Отклонено = Ложь;
	
	Если ЭтоЗадача Тогда
		НомерКартинки = 12;
		Ответственный = Взаимодействие.Исполнитель;
		СрокИсполнения = Взаимодействие.СрокИсполнения;
		Статус = Взаимодействие.Статус;
		
		Если Статус.ВидСтатуса = Справочники.узВидыСтатусов.Готово Тогда
			СтатусКартинкой = 19;
		ИначеЕсли Статус.ВидСтатуса = Справочники.узВидыСтатусов.ВРаботе Тогда
			СтатусКартинкой = 18;
		ИначеЕсли Статус.ВидСтатуса = Справочники.узВидыСтатусов.ВРаботе Тогда
			СтатусКартинкой = 13;
		КонецЕсли;
		Содержание = СокрЛП(Взаимодействие.ТекстСодержания);
		Дата = Взаимодействие.ДатаСоздания;
		Ответственный = Взаимодействие.Исполнитель;
			
	ИначеЕсли ЭтоВстреча Тогда
		НомерКартинки = 2;
		
	ИначеЕсли ЭтоСообщениеSMS Тогда
		НомерКартинки = 9;
		
	ИначеЕсли ЭтоЗапланированноеВзаимодействие Тогда
		НомерКартинки = 1;
		
	ИначеЕсли ЭтоТелефонныйЗвонок Тогда
		НомерКартинки = 3;
		
	ИначеЕсли ЭтоЭлектронноеПисьмоВходящее Тогда
		ПолучитьИнфоИзПредметовВзаимодействия = Истина;
		
		Если СтруктураПоиска <> Неопределено и СтруктураПоиска.Свойство("Рассмотрено") Тогда
			
			Рассмотрено = СтруктураПоиска.Рассмотрено;
			ПолучитьИнфоИзПредметовВзаимодействия = Ложь;
			Содержание = СтруктураПоиска.Содержание;
			Дата = СтруктураПоиска.Дата;
			Ответственный = СтруктураПоиска.Ответственный;
			Отправитель = СтруктураПоиска.ОтправительПредставление;
			Отклонено = СтруктураПоиска.Отклонено;
			
		КонецЕсли;
		
		Если ПолучитьИнфоИзПредметовВзаимодействия Тогда
			МенеджерРегистраПредметыВзаимодействий = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
			МенеджерРегистраПредметыВзаимодействий.Взаимодействие = Взаимодействие;
			МенеджерРегистраПредметыВзаимодействий.Прочитать();
			
			Рассмотрено = МенеджерРегистраПредметыВзаимодействий.Рассмотрено;
			
			Содержание = Взаимодействие.Текст;
			Дата = Взаимодействие.Дата;               
			Ответственный = Взаимодействие.Ответственный;
			Отправитель = Взаимодействие.ОтправительПредставление;
			Отклонено = Взаимодействие.Отклонено;
		КонецЕсли;	
			
		НомерКартинки = 4;
		
		Дата0 = '00010101000000';
		
		Если Рассмотрено Тогда
			
			СтатусКартинкой = 19;
			
		Иначе
			
			Если Взаимодействие.Дата - Дата0 < ТекущаяДата() - Дата0 Тогда
				
				СтатусКартинкой = 16;
				
			Иначе
			
				СтатусКартинкой = 13;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоЭлектронноеПисьмоИсходящее Тогда
		НомерКартинки = 5;
		
	ИначеЕсли ЭтоЗадачаИсполнителя Тогда
		НомерКартинки = 10;
		Исполнитель = Взаимодействие.Исполнитель;
		СрокИсполнения = Взаимодействие.СрокИсполнения;
		Статус = ?(Взаимодействие.Выполнена, "Выполнена", ?(Взаимодействие.ПринятаКИсполнению, "Выполняется", "Не принята"));
		Содержание = Взаимодействие.Описание;
		
		Если Взаимодействие.Выполнена Тогда
			СтатусКартинкой = 19;
			
		Иначе
			Если Взаимодействие.ПринятаКИсполнению Тогда
				Если Взаимодействие.ДатаИсполнения < ТекущаяДата() Тогда
					СтатусКартинкой = 17;
				Иначе
					СтатусКартинкой = 18;
				КонецЕсли;
			Иначе
				Если Взаимодействие.ДатаИсполнения < ТекущаяДата() Тогда
					СтатусКартинкой = 14;
				Иначе
					СтатусКартинкой = 13;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Строка.НомерКартинки = НомерКартинки;
	Строка.Содержание = Лев(Содержание, 100);
	Строка.Ответственный = Исполнитель;
	Строка.СрокИсполнения = СрокИсполнения;
	Строка.Статус = Статус;
	Строка.СтатусКартинкой = СтатусКартинкой;
	Строка.Дата = Дата;
	Строка.Ответственный = Ответственный;
	Строка.ОтправительПредставление = Отправитель;
	Строка.Рассмотрено = Рассмотрено;
	Строка.Отклонено = Отклонено;
	
КонецПроцедуры

Функция ВыгрузитьТаблицуЗначенийВДеревоЗначений(ТаблицаВзаимодействий, Ссылка) Экспорт

    Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Предмет");
	Дерево.Колонки.Добавить("Взаимодействие");
	Дерево.Колонки.Добавить("Дата");
	Дерево.Колонки.Добавить("Ответственный");
	Дерево.Колонки.Добавить("НомерКартинки");
	Дерево.Колонки.Добавить("ОтправительПредставление");
	Дерево.Колонки.Добавить("Рассмотрено");
	Дерево.Колонки.Добавить("РассмотретьПосле");
	Дерево.Колонки.Добавить("ЭтоПредмет");
	Дерево.Колонки.Добавить("Отклонено");
	Дерево.Колонки.Добавить("ПредметВзаимодействие");
	Дерево.Колонки.Добавить("СрокИсполнения");
	Дерево.Колонки.Добавить("Статус");
	Дерево.Колонки.Добавить("СтатусКартинкой");
	Дерево.Колонки.Добавить("Содержание");
	Дерево.Колонки.Добавить("ЭтоТекущееВзаимодействие");
	
	//Корневые элементы
	Структура = Новый Структура("Основание", Неопределено);
		
	НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(Структура);
	Для Сч = 0 По НайденныеСтроки.Количество() - 1 Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Взаимодействие = НайденныеСтроки[Сч].Подчиненный;
		ЗаполнитьРеквизитыВзаимодействия(НоваяСтрока);
		
		ТаблицаВзаимодействий.Удалить(ТаблицаВзаимодействий.Индекс(НайденныеСтроки[Сч]));
	КонецЦикла;
	
	//Все оставшиеся элементы
	Пока ТаблицаВзаимодействий.Количество() > 0 Цикл
		
		МассивУдалить = Новый Массив;
		Для Каждого Строка Из ТаблицаВзаимодействий Цикл
			
			Структура = Новый Структура("Взаимодействие", Строка.Основание);
			МассивСтрок = Дерево.Строки.НайтиСтроки(Структура, Истина);
			
			Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
				
				НоваяСтрока = МассивСтрок[Сч].Строки.Добавить();
				НоваяСтрока.Взаимодействие = Строка.Подчиненный;
				НоваяСтрока.ЭтоТекущееВзаимодействие = (НоваяСтрока.Взаимодействие = Ссылка);
				ЗаполнитьРеквизитыВзаимодействия(НоваяСтрока);
				
				Если МассивУдалить.Найти(Строка) = Неопределено Тогда
					МассивУдалить.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;			
			
		КонецЦикла;	
		
		Если МассивУдалить.Количество() > 0 Тогда
			Для Сч = 0 По МассивУдалить.Количество() - 1 Цикл
				ТаблицаВзаимодействий.Удалить(ТаблицаВзаимодействий.Индекс(МассивУдалить[Сч]));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции //ВыгрузитьТаблицуЗначенийВДеревоЗначений()

Процедура ОбработатьПодчиненныхВладельцев(ТаблицаВзаимодействий)
	
	Пока Истина Цикл
		
		ЕстьИзменения = Ложь;
		
		МассивОснование = ПодготовитьМассивПоПолюТаблицы("Основание", ТаблицаВзаимодействий);
		МассивПодчиненный = ПодготовитьМассивПоПолюТаблицы("Подчиненный", ТаблицаВзаимодействий);
		
		Для Сч = 0 По МассивОснование.Количество() - 1 Цикл
			ДобавитьПодчиненныхПоВладельцу(МассивОснование[Сч], ЕстьИзменения, ТаблицаВзаимодействий);
		КонецЦикла;
		
		Для Сч = 0 По МассивПодчиненный.Количество() - 1 Цикл
			ДобавитьПодчиненныхПоВладельцу(МассивПодчиненный[Сч], ЕстьИзменения, ТаблицаВзаимодействий);
		КонецЦикла;
		
		ДобавитьВладельцевПоПодчиненным(МассивОснование, ЕстьИзменения, ТаблицаВзаимодействий);

		ДобавитьВладельцевПоПодчиненным(МассивПодчиненный, ЕстьИзменения, ТаблицаВзаимодействий);
		
		Если Не ЕстьИзменения Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаВзаимодействий.Сортировать("Основание Возр, Подчиненный Возр");
КонецПроцедуры

Функция ПодготовитьМассивПоПолюТаблицы(ИмяПоля, ТаблицаВзаимодействий)

	ВремТаб = ТаблицаВзаимодействий.Скопировать();
	ВремТаб.Свернуть(ИмяПоля, "");
	
	Возврат ВремТаб.ВыгрузитьКолонку(ИмяПоля);
	
КонецФункции

Процедура ДобавитьПодчиненныхПоВладельцу(Ссылка, ЕстьИзменения, ТаблицаВзаимодействий)
	
	МассивСсылок = КритерииОтбора.СвязанныеДокументы.Найти(Ссылка);
	
	Для Сч = 0 По МассивСсылок.Количество() - 1 Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", Ссылка);
		СтруктураПоиска.Вставить("Подчиненный", МассивСсылок[Сч]);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
		    ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = Ссылка;
			НС.Подчиненный = МассивСсылок[Сч];
			
			Если Не ЗначениеЗаполнено(Ссылка.Предмет) Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Основание", Неопределено);
				СтруктураПоиска.Вставить("Подчиненный", Ссылка);
				
				НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
						НС = ТаблицаВзаимодействий.Добавить();
						НС.Основание = Неопределено;
						НС.Подчиненный = Ссылка;
					КонецЕсли;
				КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	//2.Добавляются через р/св Предметы папки взаимодействий
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Предмет
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И ПредметыПапкиВзаимодействий.Взаимодействие <> ПредметыПапкиВзаимодействий.Предмет"
	;
	
	ТабПредметов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТабПредметов Цикл
		
		СтрокаПредмет = Строка.Предмет;
		СтрокаВзаимодействие = ?(Строка.Предмет = Строка.Взаимодействие, Неопределено, Строка.Взаимодействие);
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", СтрокаПредмет);
		СтруктураПоиска.Вставить("Подчиненный", СтрокаВзаимодействие);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = СтрокаПредмет;
			НС.Подчиненный = СтрокаВзаимодействие;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВладельцевПоПодчиненным(Массив, ЕстьИзменения, ТаблицаВзаимодействий)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Массив", Массив);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.Предмет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка В (&Массив)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка,
	|	ТелефонныйЗвонок.Предмет
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.Ссылка В (&Массив)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	узЗадачи.Ссылка,
	|	узЗадачи.Предмет
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.Ссылка В (&Массив)"
	;
	
	ТабПредметов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТабПредметов Цикл
		Если Не ЗначениеЗаполнено(Строка.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", Строка.Предмет);
		СтруктураПоиска.Вставить("Подчиненный", Строка.Ссылка);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = Строка.Предмет;
			НС.Подчиненный = Строка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	
	//2.Добавляются через р/св Предметы папки взаимодействий
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Массив", Массив);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Предмет
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие В (&Массив)"
	;
	
	ТабПредметов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТабПредметов Цикл
		
		СтрокаПредмет = ?(Строка.Предмет = Строка.Взаимодействие, Неопределено, Строка.Предмет);
		СтрокаВзаимодействие = Строка.Взаимодействие;
		
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", СтрокаПредмет);
		СтруктураПоиска.Вставить("Подчиненный", СтрокаВзаимодействие);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = СтрокаПредмет;
			НС.Подчиненный = СтрокаВзаимодействие;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ИспользуетсяНоваяВерсияСпискаПисем() Экспорт
	
	Возврат Константы.аэИспользоватьНовуюВерсиюСпискаПисем.Получить();
	
КонецФункции

Процедура ПодготовитьДеревоВзаимодействий(МассивПисем, МассивВзяли, ВремДеревоПисем, ВыборкаПодробно = Неопределено) Экспорт
	
	Для Сч = 0 По МассивПисем.Количество() - 1 Цикл
		
		Если МассивВзяли.Найти(МассивПисем[Сч]) = Неопределено Тогда
		
			ПолучитьДеревоВзаимодействий(МассивПисем[Сч], ВремДеревоПисем, МассивВзяли, ВыборкаПодробно);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДеревоВзаимодействий(Взаимодействие, ДеревоВзаимодействий, МассивВзяли, ВыборкаПодробно)
	
	
	ЭлементСтруктурыВзаимодействий = Справочники.аэСтруктураВзаимодействий.НайтиПоРеквизиту("Взаимодействие", Взаимодействие);
	Если ЗначениеЗаполнено(ЭлементСтруктурыВзаимодействий) Тогда
	
		Элемент0 = НайтиКорневойЭлемент(ЭлементСтруктурыВзаимодействий);
		ЗаполнитьДеревоПоКорневомуУзлу(Элемент0, ДеревоВзаимодействий, МассивВзяли, ВыборкаПодробно);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиКорневойЭлемент(ЭлементСтруктурыВзаимодействий)
	
	ЭлементРодитель = ЭлементСтруктурыВзаимодействий.Родитель;
	
	Если ЗначениеЗаполнено(ЭлементРодитель) Тогда
		//Поиск вышестоящего элемента
		Возврат НайтиКорневойЭлемент(ЭлементРодитель)
	Иначе
		//Переданный элемент является корневым узлом
		Возврат ЭлементСтруктурыВзаимодействий;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДеревоПоКорневомуУзлу(Элемент0, ДеревоВзаимодействий, МассивВзяли, ВыборкаПодробно)
	
	//Добавим корневой элемент текущей ветки
	Если ВыборкаПодробно <> Неопределено Тогда
		ВыборкаПодробно.Сбросить();
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Взаимодействие", Элемент0.Взаимодействие);
		Если ВыборкаПодробно.НайтиСледующий(СтруктураПоиска) Тогда
			СтруктураПоиска.Вставить("Рассмотрено", ВыборкаПодробно.Рассмотрено);
			СтруктураПоиска.Вставить("Содержание", ВыборкаПодробно.Содержание);
			СтруктураПоиска.Вставить("Дата", ВыборкаПодробно.Дата);
			СтруктураПоиска.Вставить("Ответственный", ВыборкаПодробно.Ответственный);
			СтруктураПоиска.Вставить("ОтправительПредставление", ВыборкаПодробно.ОтправительПредставление);
			СтруктураПоиска.Вставить("Отклонено", ВыборкаПодробно.Отклонено);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = ДеревоВзаимодействий.Строки.Добавить();
	НоваяСтрока.Взаимодействие = Элемент0.Взаимодействие;
	НоваяСтрока.ПредметВзаимодействие = Элемент0.Взаимодействие;
	аэОбщийМодульСервер.ЗаполнитьРеквизитыВзаимодействия(НоваяСтрока, СтруктураПоиска);
	НоваяСтрока.ЭтоПредмет = Истина;
	МассивВзяли.Добавить(Элемент0.Взаимодействие);
	
	ДобавитьСтрокиПоРодителю(НоваяСтрока, Элемент0, ДеревоВзаимодействий, МассивВзяли, ВыборкаПодробно);
	
КонецПроцедуры

//Рекурсивное добавление в дерево иерархических элементов справочника взаимодействия
Процедура ДобавитьСтрокиПоРодителю(СтрокаРодитель, ЭлементРодитель, ДеревоВзаимодействий, МассивВзяли, ВыборкаПодробно)	
	
	ТабЭлементов = Новый ТаблицаЗначений;
	ТабЭлементов.Колонки.Добавить("Ссылка");
	ТабЭлементов.Колонки.Добавить("Взаимодействие");
	ТабЭлементов.Колонки.Добавить("Дата");
	
	Выборка = Справочники.аэСтруктураВзаимодействий.Выбрать(ЭлементРодитель,,,"Дата Убыв");
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТабЭлементов.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Взаимодействие = Выборка.Взаимодействие;
		НоваяСтрока.Дата = Выборка.Дата;

	КонецЦикла;
	
	ТабЭлементов.Сортировать("Дата Убыв");
	
	Для Каждого Строка Из ТабЭлементов Цикл
		Если ВыборкаПодробно <> Неопределено Тогда
			ВыборкаПодробно.Сбросить();
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Взаимодействие", Строка.Взаимодействие);
			Если ВыборкаПодробно.НайтиСледующий(СтруктураПоиска) Тогда
				СтруктураПоиска.Вставить("Рассмотрено", ВыборкаПодробно.Рассмотрено);
				СтруктураПоиска.Вставить("Содержание", ВыборкаПодробно.Содержание);
				СтруктураПоиска.Вставить("Дата", ВыборкаПодробно.Дата);
				СтруктураПоиска.Вставить("Ответственный", ВыборкаПодробно.Ответственный);
				СтруктураПоиска.Вставить("ОтправительПредставление", ВыборкаПодробно.ОтправительПредставление);
				СтруктураПоиска.Вставить("Отклонено", ВыборкаПодробно.Отклонено);
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Взаимодействие = Строка.Взаимодействие;
		НоваяСтрока.ПредметВзаимодействие = Строка.Взаимодействие;
		аэОбщийМодульСервер.ЗаполнитьРеквизитыВзаимодействия(НоваяСтрока, СтруктураПоиска);
		МассивВзяли.Добавить(Строка.Взаимодействие);
		
		ДобавитьСтрокиПоРодителю(НоваяСтрока, Строка.Ссылка, ДеревоВзаимодействий, МассивВзяли, ВыборкаПодробно);
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьСтатусДокументаРассмотрено(Взаимодействие, Рассмотрено) Экспорт
	
	Дата0 = '00010101000000';
	
	Если Рассмотрено Тогда
		
		Возврат 19;
		
	Иначе
		
		Если Взаимодействие.Дата - Дата0 < ТекущаяДата() - Дата0 Тогда
			
			Возврат 13;
			
		Иначе
			
			Возврат 16;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьСтрутуруВзаимодействия(Ссылка) Экспорт
	ПредметЦепочки = "";
	Если НЕ ЗначениеЗаполнено(Ссылка.ИдентификаторыОснований) Тогда
		
		ПервоеОснование = "";
		СсылкаВзаимодействия = Справочники.аэСтруктураВзаимодействий.НайтиПоРеквизиту("Взаимодействие", Ссылка);
		Если Не ЗначениеЗаполнено(СсылкаВзаимодействия) Тогда
			
			НовыйЭлемент = Справочники.аэСтруктураВзаимодействий.СоздатьЭлемент();
			НовыйЭлемент.Взаимодействие = Ссылка;
			НовыйЭлемент.Дата = Ссылка.Дата;
			НовыйЭлемент.Записать();
			
		КонецЕсли;		
		
	Иначе
		
		МассивОснований = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ссылка.ИдентификаторыОснований, "<", Истина, Истина);
		
		Для сч = 0 По МассивОснований.Количество() - 1 Цикл
			ВзаимодействиеЗаполнено = Ложь;
			
			ТекОснование = МассивОснований[сч];
			ТекОснование = СтрЗаменить(ТекОснование, ">", "");
			
			СсылкаОснования = Документы.ЭлектронноеПисьмоВходящее.НайтиПоРеквизиту("ИдентификаторСообщения", ТекОснование);
			Если ЗначениеЗаполнено(СсылкаОснования) Тогда
				НайденноеВзаимодействие = Справочники.аэСтруктураВзаимодействий.НайтиПоРеквизиту("Взаимодействие", Ссылка);
				ВзаимодействиеЗаполнено = ЗначениеЗаполнено(НайденноеВзаимодействие);
			КонецЕсли;
			
			Если ВзаимодействиеЗаполнено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВзаимодействиеЗаполнено Тогда
			
			НовыйЭлемент = Справочники.аэСтруктураВзаимодействий.СоздатьЭлемент();
			НовыйЭлемент.Взаимодействие = Ссылка;
			НовыйЭлемент.Дата = Ссылка.Дата;
			НовыйЭлемент.Записать();
			
			НайденноеВзаимодействие = НовыйЭлемент.Ссылка;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СсылкаОснования) Тогда
			
			Если НайденноеВзаимодействие.Родитель.Взаимодействие <> СсылкаОснования Тогда
				
				ВзаимодействиеПоПредмету = Справочники.аэСтруктураВзаимодействий.НайтиПоРеквизиту("Взаимодействие", СсылкаОснования);
				
				Если Не ЗначениеЗаполнено(ВзаимодействиеПоПредмету) Тогда
					
					НовыйЭлемент = Справочники.аэСтруктураВзаимодействий.СоздатьЭлемент();
					НовыйЭлемент.Взаимодействие = СсылкаОснования;
					НовыйЭлемент.Записать();
					
					ВзаимодействиеПоПредмету = НовыйЭлемент.Ссылка;
					
				КонецЕсли;
				
				ТекЭлемент = НайденноеВзаимодействие.ПолучитьОбъект();
				ТекЭлемент.Родитель = ВзаимодействиеПоПредмету;
				ТекЭлемент.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуСправочникаЗадачи(ГУИД) Экспорт
	
	СсылкаГУИД = Новый УникальныйИдентификатор(ГУИД);
	Возврат Справочники.узЗадачи.ПолучитьСсылку(СсылкаГУИД);
	
КонецФункции

Процедура РассылкаВыполненныхЗадачОсновная() Экспорт
	
	//1. Отправка сообщений инициаторам
	
	
	МассивСтатусов = Новый Массив();
	МассивСтатусов.Добавить(Справочники.узСтатусыЗадачи.Готово);
	МассивСтатусов.Добавить(Справочники.узСтатусыЗадачи.НаТестированииПоказПользователям);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", МассивСтатусов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1,0,0,0));
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Код КАК НомерЗадачи,
	|	узЗадачи.аэИнициатор.Пользователь.аэРуководитель КАК Руководитель,
	|	узЗадачи.аэИнициатор.Пользователь КАК Пользователь,
	|	узЗадачи.аэИнициатор КАК Инициатор,
	|	узЗадачи.Наименование КАК Наименование,
	|	узЗадачи.ДатаСоздания КАК ДатаСоздания,
	|	узЗадачи.ДатаВыполнения КАК ДатаВыполнения,
	|	РАЗНОСТЬДАТ(МАКСИМУМ(узЗадачиИсторияСтатусов.ДатаНачала), &ТекущаяДата, ДЕНЬ) КАК СрокПроверки,
	|	МАКСИМУМ(КонтактыРуководителей.АдресЭП) КАК АдресЭПРуководителя,
	|	узЗадачи.Ссылка КАК Ссылка,
	|	узЗадачи.Исполнитель КАК Исполнитель,
	|	ПОДСТРОКА(узЗадачи.Комментарий, 1, 500) КАК Комментарий,
	|	узЗадачи.Статус КАК Статус,
	|	РАЗНОСТЬДАТ(МАКСИМУМ(узЗадачиИсторияСтатусов.ДатаНачала), &ТекущаяДата, ДЕНЬ) КАК СтатусДней,
	|	МАКСИМУМ(КонтактыИнициаторов.АдресЭП) КАК АдресЭПИнициатора
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыРуководителей
	|		ПО узЗадачи.аэИнициатор.Пользователь.аэРуководитель = КонтактыРуководителей.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.узЗадачи.ИсторияСтатусов КАК узЗадачиИсторияСтатусов
	|		ПО узЗадачи.Ссылка = узЗадачиИсторияСтатусов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыИнициаторов
	|		ПО узЗадачи.аэИнициатор.Пользователь = КонтактыИнициаторов.Ссылка
	|ГДЕ
	|	узЗадачи.Статус В(&Статус)
	|	И КонтактыРуководителей.Тип = &Тип
	|	И КонтактыИнициаторов.Тип = &Тип
	|
	|СГРУППИРОВАТЬ ПО
	|	узЗадачи.Код,
	|	узЗадачи.аэИнициатор.Пользователь.аэРуководитель,
	|	узЗадачи.аэИнициатор.Пользователь,
	|	узЗадачи.аэИнициатор,
	|	узЗадачи.Наименование,
	|	узЗадачи.ДатаСоздания,
	|	узЗадачи.ДатаВыполнения,
	|	узЗадачи.Ссылка,
	|	ПОДСТРОКА(узЗадачи.Комментарий, 1, 500),
	|	узЗадачи.Исполнитель,
	|	узЗадачи.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.НомерЗадачи КАК НомерЗадачи,
	|	вт.Руководитель КАК Руководитель,
	|	вт.Пользователь КАК Пользователь,
	|	вт.Инициатор КАК Инициатор,
	|	вт.Наименование КАК Наименование,
	|	вт.ДатаСоздания КАК ДатаСоздания,
	|	вт.ДатаВыполнения КАК ДатаВыполнения,
	|	вт.СрокПроверки КАК СрокПроверки,
	|	вт.АдресЭПРуководителя КАК АдресЭПРуководителя,
	|	вт.Ссылка КАК Ссылка,
	|	вт.Исполнитель КАК Исполнитель,
	|	вт.Комментарий КАК Комментарий,
	|	вт.Статус КАК Статус,
	|	вт.СтатусДней,
	|	вт.АдресЭПИнициатора
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	вт.СрокПроверки >= 7
	|
	|УПОРЯДОЧИТЬ ПО
	|	вт.Руководитель.Наименование,
	|	вт.Инициатор.Наименование"
	;
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗадачи", );
	Таб.Колонки.Добавить("Статус", );
	Таб.Колонки.Добавить("Руководитель", );
	Таб.Колонки.Добавить("Инициатор", );
	Таб.Колонки.Добавить("Исполнитель", );
	Таб.Колонки.Добавить("Наименование", );
	Таб.Колонки.Добавить("ДатаСоздания", );
	Таб.Колонки.Добавить("ДатаВыполнения", );
	Таб.Колонки.Добавить("СрокПроверки", );
	Таб.Колонки.Добавить("АдресЭПРуководителя", );
	Таб.Колонки.Добавить("АдресЭПИнициатора", );
	Таб.Колонки.Добавить("Комментарий", );
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НС = Таб.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
		
		НС.Руководитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Руководитель.Наименование);
		НС.Инициатор = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Инициатор.Наименование);
		НС.Исполнитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Исполнитель.Наименование);
		
		НС.Наименование = "<a href=""http://app1c0/C1_DEV_TASK_0/ru/?C=ОткрытьЗадачу," + Выборка.Ссылка.УникальныйИдентификатор() + """>" + Выборка.Наименование + "</a>";
		НС.ДатаСоздания = Формат(Выборка.ДатаСоздания, "ДФ=dd.MM.yy");
		НС.ДатаВыполнения = Формат(Выборка.ДатаВыполнения, "ДФ=dd.MM.yy");
		НС.НомерЗадачи = Формат(НС.НомерЗадачи, "ЧГ = 0");
	КонецЦикла;
	
	ТабПолучателей = Новый ТаблицаЗначений;
	ТабПолучателей.Колонки.Добавить("Адрес");
	
	ТабАдресатов = Таб.Скопировать();
	ТабАдресатов.Свернуть("АдресЭПИнициатора", "");
	
	Для Каждого Строка Из ТабАдресатов Цикл
		Если Не ПустаяСтрока(Строка.АдресЭПИнициатора) Тогда
			НС = ТабПолучателей.Добавить();
			НС.Адрес = Строка.АдресЭПИнициатора;
		КонецЕсли;
	КонецЦикла;
	
	ТабАдресатов = Таб.Скопировать();
	ТабАдресатов.Свернуть("АдресЭПРуководителя", "");
	
	Для Каждого Строка Из ТабАдресатов Цикл
		Если Не ПустаяСтрока(Строка.АдресЭПРуководителя) Тогда
			НС = ТабПолучателей.Добавить();
			НС.Адрес = Строка.АдресЭПРуководителя;
		КонецЕсли;
	КонецЦикла;
	
	Таб.Колонки.Удалить("АдресЭПИнициатора");
	Таб.Колонки.Удалить("АдресЭПРуководителя");
	
	ТабПолучателей.Свернуть("Адрес");
	
	МассивПолучателей = ТабПолучателей.ВыгрузитьКолонку("Адрес");
	
	//Формирование html-файла тела письма
	Параметры = Новый Структура;
	Параметры.Вставить("ПунктПорядкуИспользуется",ИСТИНА);
	Параметры.Вставить("ШиринаТаблицы","1400");
	
	Параметры.Вставить("ЦветШапки","eadbaf");
	
	Параметры.Вставить("Положение1","center");
	Параметры.Вставить("Положение7","center");
	Параметры.Вставить("Положение8","center");
	Параметры.Вставить("Положение9","center");
	
	Параметры.Вставить("Заголовок1","№ задачи");
	Параметры.Вставить("Заголовок7","Дата создания");
	Параметры.Вставить("Заголовок8","Дата выполнения");
	Параметры.Вставить("Заголовок9","Ожидает проверки (дн.)");
	
	Параметры.Вставить("Ширина1",50);
	Параметры.Вставить("Ширина2",50);
	Параметры.Вставить("Ширина3",200);
	Параметры.Вставить("Ширина4",200);
	Параметры.Вставить("Ширина5",200);
	Параметры.Вставить("Ширина6",200);
	Параметры.Вставить("Ширина7",50);
	Параметры.Вставить("Ширина8",50);
	Параметры.Вставить("Ширина9",30);
	Параметры.Вставить("Ширина10",200);
	
	//Таб.Колонки.Добавить("НомерЗадачи", );
	//Таб.Колонки.Добавить("Статус", );
	//Таб.Колонки.Добавить("Руководитель", );
	//Таб.Колонки.Добавить("Инициатор", );
	//Таб.Колонки.Добавить("Исполнитель", );
	//Таб.Колонки.Добавить("Наименование", );
	//Таб.Колонки.Добавить("ДатаСоздания", );
	//Таб.Колонки.Добавить("ДатаВыполнения", );
	//Таб.Колонки.Добавить("СрокПроверки", );
	//Таб.Колонки.Добавить("Комментарий", );
	
	ТаблицаХТМЛ = ТаблицаЗначенийВТаблицуХТМЛ(Таб, Параметры);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать("\\dev0\Repl\!Рассылка\Рассылка.htm");
	
	ТекстМакета = ТекстовыйДокумент.ПолучитьТекст();
	ТекстМакета = СтрЗаменить(ТекстМакета, "ТекстПисьма", ТаблицаХТМЛ);
	
	ТекстовыйДокумент.УстановитьТекст(ТекстМакета);
	ТекстовыйДокумент.Записать("\\dev0\repl\!Рассылка\ВыполненныеЗадачи.html", "windows-1251");
	
	//Отправка письма
	ПараметрыПисьма = Новый Структура;
	
	Тема = "Выполненные задачи";
	Тело = ТекстМакета;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	Для Сч = 0 По МассивПолучателей.Количество() - 1 Цикл
		//Стр = СтрЗаменить(Стр, "=", Символы.ПС);
		//
		//ОтображаемоеИмя = СокрЛП(СтрПолучитьСтроку(Стр, 1));
		//Адрес = СокрЛП(СтрПолучитьСтроку(Стр, 2));
		
		Получатель = Письмо.СлепыеКопии.Добавить(МассивПолучателей[Сч]);
		//Получатель.ОтображаемоеИмя = ОтображаемоеИмя;		
	КонецЦикла;
	
	//Письмо.Получатели.Очистить();
	//Получатель = Письмо.Получатели.Добавить("i.minin@agroeco.ru");
	//
	Письмо.ИмяОтправителя = "WGD";
	Письмо.Отправитель.ОтображаемоеИмя = "WGD";
	Письмо.Отправитель.Адрес = "1ctest@agroeco.ru";
	
	Текст = Письмо.Тексты.Добавить(ТекстМакета);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	
	Профиль = ИнтернетПочтовыйПрофиль();
	ИнтернетПочта = Новый ИнтернетПочта;
	
	ТекстОшибки = "";
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
		ИнтернетПочта.Послать(Письмо);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Процедура РассылкаВыполненныхЗадачАдминистративная() Экспорт
	
	//1. Отправка сообщений инициаторам
	
	МассивСтатусов = Новый Массив();
	МассивСтатусов.Добавить(Справочники.узСтатусыЗадачи.Готово);
	МассивСтатусов.Добавить(Справочники.узСтатусыЗадачи.НаТестированииПоказПользователям);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статус", МассивСтатусов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1,0,0,0));
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	узЗадачи.Код КАК НомерЗадачи,
	|	узЗадачи.аэИнициатор.Пользователь.аэРуководитель КАК Руководитель,
	|	узЗадачи.аэИнициатор.Пользователь КАК Пользователь,
	|	узЗадачи.аэИнициатор КАК Инициатор,
	|	узЗадачи.Наименование КАК Наименование,
	|	узЗадачи.ДатаСоздания КАК ДатаСоздания,
	|	узЗадачи.ДатаВыполнения КАК ДатаВыполнения,
	|	РАЗНОСТЬДАТ(МАКСИМУМ(узЗадачиИсторияСтатусов.ДатаНачала), &ТекущаяДата, ДЕНЬ) КАК СрокПроверки,
	|	МАКСИМУМ(КонтактыРуководителей.АдресЭП) КАК АдресЭПРуководителя,
	|	узЗадачи.Ссылка КАК Ссылка,
	|	узЗадачи.Исполнитель КАК Исполнитель,
	|	ПОДСТРОКА(узЗадачи.Комментарий, 1, 500) КАК Комментарий,
	|	узЗадачи.Статус КАК Статус,
	|	РАЗНОСТЬДАТ(МАКСИМУМ(узЗадачиИсторияСтатусов.ДатаНачала), &ТекущаяДата, ДЕНЬ) КАК СтатусДней
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыРуководителей
	|		ПО узЗадачи.аэИнициатор.Пользователь.аэРуководитель = КонтактыРуководителей.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.узЗадачи.ИсторияСтатусов КАК узЗадачиИсторияСтатусов
	|		ПО узЗадачи.Ссылка = узЗадачиИсторияСтатусов.Ссылка
	|ГДЕ
	|	узЗадачи.Статус В(&Статус)
	|	И КонтактыРуководителей.Тип = &Тип
	|
	|СГРУППИРОВАТЬ ПО
	|	узЗадачи.Код,
	|	узЗадачи.аэИнициатор.Пользователь.аэРуководитель,
	|	узЗадачи.аэИнициатор.Пользователь,
	|	узЗадачи.аэИнициатор,
	|	узЗадачи.Наименование,
	|	узЗадачи.ДатаСоздания,
	|	узЗадачи.ДатаВыполнения,
	|	узЗадачи.Ссылка,
	|	ПОДСТРОКА(узЗадачи.Комментарий, 1, 500),
	|	узЗадачи.Исполнитель,
	|	узЗадачи.Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.НомерЗадачи КАК НомерЗадачи,
	|	вт.Руководитель КАК Руководитель,
	|	вт.Пользователь КАК Пользователь,
	|	вт.Инициатор КАК Инициатор,
	|	вт.Наименование КАК Наименование,
	|	вт.ДатаСоздания КАК ДатаСоздания,
	|	вт.ДатаВыполнения КАК ДатаВыполнения,
	|	вт.СрокПроверки КАК СрокПроверки,
	|	вт.АдресЭПРуководителя КАК АдресЭПРуководителя,
	|	вт.Ссылка КАК Ссылка,
	|	вт.Исполнитель КАК Исполнитель,
	|	вт.Комментарий КАК Комментарий,
	|	вт.Статус КАК Статус,
	|	вт.СтатусДней
	|ИЗ
	|	вт КАК вт
	|ГДЕ
	|	вт.СрокПроверки >= 7
	|
	|УПОРЯДОЧИТЬ ПО
	|	вт.Руководитель.Наименование,
	|	вт.Инициатор.Наименование"
	;
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗадачи", );
	Таб.Колонки.Добавить("Статус", );
	Таб.Колонки.Добавить("Руководитель", );
	Таб.Колонки.Добавить("Инициатор", );
	Таб.Колонки.Добавить("Исполнитель", );
	Таб.Колонки.Добавить("Наименование", );
	Таб.Колонки.Добавить("ДатаСоздания", );
	Таб.Колонки.Добавить("ДатаВыполнения", );
	Таб.Колонки.Добавить("СрокПроверки", );
	Таб.Колонки.Добавить("АдресЭПРуководителя", );
	Таб.Колонки.Добавить("АдресЭПИнициатора", );
	Таб.Колонки.Добавить("Комментарий", );
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НС = Таб.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
		
		НС.Руководитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Руководитель.Наименование);
		НС.Инициатор = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Инициатор.Наименование);
		НС.Исполнитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Исполнитель.Наименование);
		
		НС.Наименование = "<a href=""http://app1c0/C1_DEV_TASK_0/ru/?C=ОткрытьЗадачу," + Выборка.Ссылка.УникальныйИдентификатор() + """>" + Выборка.Наименование + "</a>";
		НС.ДатаСоздания = Формат(Выборка.ДатаСоздания, "ДФ=dd.MM.yy");
		НС.ДатаВыполнения = Формат(Выборка.ДатаВыполнения, "ДФ=dd.MM.yy");
		НС.НомерЗадачи = Формат(НС.НомерЗадачи, "ЧГ = 0");
	КонецЦикла;
	
	ТабПолучателей = Новый ТаблицаЗначений;
	ТабПолучателей.Колонки.Добавить("Адрес");
	
	ТабАдресатов = Таб.Скопировать();
	ТабАдресатов.Свернуть("АдресЭПИнициатора", "");
	
	Для Каждого Строка Из ТабАдресатов Цикл
		Если Не ПустаяСтрока(Строка.АдресЭПИнициатора) Тогда
			НС = ТабПолучателей.Добавить();
			НС.Адрес = Строка.АдресЭПИнициатора;
		КонецЕсли;
	КонецЦикла;
	
	ТабАдресатов = Таб.Скопировать();
	ТабАдресатов.Свернуть("АдресЭПРуководителя", "");
	
	Для Каждого Строка Из ТабАдресатов Цикл
		Если Не ПустаяСтрока(Строка.АдресЭПРуководителя) Тогда
			НС = ТабПолучателей.Добавить();
			НС.Адрес = Строка.АдресЭПРуководителя;
		КонецЕсли;
	КонецЦикла;
	
	Таб.Колонки.Удалить("АдресЭПИнициатора");
	Таб.Колонки.Удалить("АдресЭПРуководителя");
	
	ТабПолучателей.Свернуть("Адрес");
	
	//Формирование html-файла тела письма
	Параметры = Новый Структура;
	Параметры.Вставить("ПунктПорядкуИспользуется",ИСТИНА);
	Параметры.Вставить("ШиринаТаблицы","1200");
	
	Параметры.Вставить("ЦветШапки","eadbaf");
	
	Параметры.Вставить("Положение1","center");
	Параметры.Вставить("Положение7","center");
	Параметры.Вставить("Положение8","center");
	Параметры.Вставить("Положение9","center");
	
	Параметры.Вставить("Заголовок1","№ задачи");
	Параметры.Вставить("Заголовок7","Дата создания");
	Параметры.Вставить("Заголовок8","Дата выполнения");
	Параметры.Вставить("Заголовок9","Ожидает проверки (дн.)");
	
	Параметры.Вставить("Ширина1",50);
	Параметры.Вставить("Ширина2",50);
	
	ТаблицаХТМЛ = ТаблицаЗначенийВТаблицуХТМЛ(Таб, Параметры);
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать("\\dev0\Repl\!Рассылка\РассылкаАдм.htm");
	
	ТекстМакета = ТекстовыйДокумент.ПолучитьТекст();
	ТекстМакета = СтрЗаменить(ТекстМакета, "ТекстПисьма", ТаблицаХТМЛ);
	
	ТекстовыйДокумент.УстановитьТекст(ТекстМакета);
	ТекстовыйДокумент.Записать("\\dev0\repl\!Рассылка\ВыполненныеЗадачи.html", "windows-1251");
	
	//Отправка письма
	ПараметрыПисьма = Новый Структура;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = "Выполненные задачи";
	
	//Получатель = Письмо.Получатели.Добавить("i.minin@agroeco.ru");
	Получатель = Письмо.Получатели.Добавить("o.edalov@agroeco.ru");
	//Получатель = Письмо.Получатели.Добавить("a.sergienko@agroeco.ru");
	Получатель = Письмо.Получатели.Добавить("s.klochkov@agroeco.ru");
	Получатель = Письмо.Получатели.Добавить("03@agroeco.ru");
	   		
	Письмо.ИмяОтправителя = "WGD";
	Письмо.Отправитель.ОтображаемоеИмя = "WGD";
	Письмо.Отправитель.Адрес = "1ctest@agroeco.ru";
	
	Текст = Письмо.Тексты.Добавить(ТекстМакета);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	
	Профиль = ИнтернетПочтовыйПрофиль();
	ИнтернетПочта = Новый ИнтернетПочта;
	
	ТекстОшибки = "";
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
		ИнтернетПочта.Послать(Письмо);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Процедура РассылкаЗадачРелиза(ДокументРелиза, ТемаПисьма = "", ТекстПисьма = "", ПолучателиПисьма = "") Экспорт
	
	ФорматированныйТекст = ДокументРелиза.Содержание.Получить();	
	
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("НомерЗадачи", );
	Таб.Колонки.Добавить("Статус", );
	Таб.Колонки.Добавить("Руководитель", );
	Таб.Колонки.Добавить("Инициатор", );
	Таб.Колонки.Добавить("Исполнитель", );
	Таб.Колонки.Добавить("Наименование", );
	Таб.Колонки.Добавить("ДатаСоздания", );
	Таб.Колонки.Добавить("ДатаВыполнения", );
	Таб.Колонки.Добавить("Результат", );
	
	Для Каждого Строка ИЗ ДокументРелиза.ТЧЗадачи Цикл
		
		НС = Таб.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка.Задача);
		НС.Инициатор = Строка.Задача.аэИнициатор;
		НС.Руководитель = НС.Инициатор.Пользователь.аэРуководитель;
		
		НС.Руководитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Руководитель.Наименование);
		НС.Инициатор = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Инициатор.Наименование);
		НС.Исполнитель = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НС.Исполнитель.Наименование);
		
		НС.Наименование = "<a href=""http://app1c0/C1_DEV_TASK_0/ru/?C=ОткрытьЗадачу," + Строка.Задача.УникальныйИдентификатор() + """>" + Строка.Задача.Наименование + "</a>";
		НС.ДатаСоздания = Формат(Строка.Задача.ДатаСоздания, "ДФ=dd.MM.yy");
		НС.ДатаВыполнения = Формат(Строка.Задача.ДатаВыполнения, "ДФ=dd.MM.yy");
		НС.НомерЗадачи = Формат(Строка.Задача.Код, "ЧГ = 0");
		НС.Результат = Строка.Задача.РезультатПользователь.Получить().ПолучитьТекст();
		
	КонецЦикла;
	
	//Формирование html-файла тела письма
	Параметры = Новый Структура;
	Параметры.Вставить("ПунктПорядкуИспользуется",ИСТИНА);
	Параметры.Вставить("ШиринаТаблицы","1200");
	
	Параметры.Вставить("ЦветШапки","eadbaf");
	
	Параметры.Вставить("Положение1","center");
	Параметры.Вставить("Положение7","center");
	Параметры.Вставить("Положение8","center");
	//Параметры.Вставить("Положение9","center");
	
	Параметры.Вставить("Заголовок1", "№ задачи");
	Параметры.Вставить("Заголовок3", "   Руководитель   ");
	Параметры.Вставить("Заголовок4", "   Инициатор   ");
	Параметры.Вставить("Заголовок5", "   Исполнитель   ");
	Параметры.Вставить("Заголовок7", "Дата создания");
	Параметры.Вставить("Заголовок8", "Дата выполнения");
	
	Параметры.Вставить("Ширина1", 50);
	Параметры.Вставить("Ширина2", 50);
	Параметры.Вставить("Ширина3", 100);
	Параметры.Вставить("Ширина4", 100);
	Параметры.Вставить("Ширина5", 100);
	Параметры.Вставить("Ширина6", 200);
	Параметры.Вставить("Ширина9", 200);
	
	ТекстHTML = "";
	Вложения = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(ТекстПисьма) Тогда
	
		ТаблицаХТМЛ = ТаблицаЗначенийВТаблицуХТМЛ(Таб, Параметры);
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать("\\dev0\Repl\!Рассылка\РассылкаВыполненныеЗадачи.htm");
		
		ТекстМакета = ТекстовыйДокумент.ПолучитьТекст();
		ТекстМакета = СтрЗаменить(ТекстМакета, "ТекстПисьма", ТаблицаХТМЛ);
		
		ТекстовыйДокумент.УстановитьТекст(ТекстМакета);
		ТекстовыйДокумент.Записать("\\dev0\repl\!Рассылка\Задачи релиза.html", "windows-1251");
		
	Иначе
		
		
		ФорматированныйТекстПисьма = ДокументРелиза.СодержаниеПроизвольное.Получить();
		
		ФорматированныйТекстПисьма.ПолучитьHTML(ТекстHTML, Вложения);
		
		Для каждого КартинкаВложение Из Вложения Цикл
			
			ТекИмяКартинки = ПолучитьИмяВременногоФайла("png");
			
			КартинкаВложение.Значение.Записать(ТекИмяКартинки);
			
			ТекстHTML = СтрЗаменить(ТекстHTML, КартинкаВложение.Ключ, ТекИмяКартинки);
			
		
		КонецЦикла;
		
	КонецЕсли;
	
	//Отправка письма
	ПараметрыПисьма = Новый Структура;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Если ЗначениеЗаполнено(ТемаПисьма) Тогда
		
		Письмо.Тема = ТемаПисьма;
		
	Иначе	
	
		Письмо.Тема = "Задачи вошедшие в обновление " + СокрЛП(ДокументРелиза.Конфигурация.Наименование) + " от " + Формат(ДокументРелиза.Дата, "ДФ=dd.MM.yyyy");	
	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолучателиПисьма) Тогда
	
		Получатель = Письмо.Получатели.Добавить("03@agroeco.ru");
		
	Иначе	
		
		МассивПолучателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучателиПисьма,";",Истина);
		Для каждого ЭлементМассива Из МассивПолучателей Цикл
			
			// Если в элементе массива не найдена собачка (@)
			// пытаемся найти по элементу электронный адрес из справочника аэПользователиАД
			
			Если СтрНайти(ЭлементМассива,"@") = 0 Тогда
			
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	аэПользователиАД.Ссылка,
				|	аэПользователиАД.ЭлектроннаяПочта,
				|	аэПользователиАД.Наименование
				|ИЗ
				|	Справочник.аэПользователиАД КАК аэПользователиАД
				|ГДЕ
				|	аэПользователиАД.Наименование = &Наименование";
				Запрос.УстановитьПараметр("Наименование", СокрЛП(ЭлементМассива));
				ТЗ = Запрос.Выполнить().Выгрузить();
				Если ТЗ.Количество() Тогда
				
					Письмо.Получатели.Добавить(ТЗ[0].ЭлектроннаяПочта);
				
				КонецЕсли;
				
			Иначе
				
				Письмо.Получатели.Добавить(ЭлементМассива);
				
			КонецЕсли;
			
			
		
		КонецЦикла;
	
	КонецЕсли;
	
	   		
	Письмо.ИмяОтправителя = "WGD";
	Письмо.Отправитель.ОтображаемоеИмя = "WGD";
	Письмо.Отправитель.Адрес = "1ctest@agroeco.ru";
	
	Если НЕ ЗначениеЗаполнено(ТекстПисьма) Тогда
	
		Текст = Письмо.Тексты.Добавить(ТекстМакета);
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
		
	Иначе
		
		Текст = Письмо.Тексты.Добавить(ТекстHTML);
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
	
	КонецЕсли;
	
	
	Профиль = ИнтернетПочтовыйПрофиль();
	ИнтернетПочта = Новый ИнтернетПочта;
	
	ТекстОшибки = "";
	Попытка
		
		Письмо.ОбработатьТексты();
		ИнтернетПочта.Подключиться(Профиль);
		ИнтернетПочта.Послать(Письмо);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();
	
КонецПроцедуры

Функция ПолучитьТаблицуХТМЛ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 100
	               |	узЗадачи.Код,
	               |	узЗадачи.Наименование,
	               |	узЗадачи.Исполнитель,
	               |	узЗадачи.Конфигурация,
	               |	узЗадачи.аэИнициатор КАК Инициатор
	               |ИЗ
	               |	Справочник.узЗадачи КАК узЗадачи";
	
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Параметры = Новый Структура;
	Параметры.Вставить("ПунктПорядкуИспользуется",ИСТИНА);
	Параметры.Вставить("ШиринаТаблицы","800");
	Параметры.Вставить("ЦветШапки","eadbaf");
	//Параметры.Вставить("Ширина3","300");
	//Параметры.Вставить("Положение2","center");
	//Параметры.Вставить("Положение3","center");
	//Параметры.Вставить("Положение6","center");
	
	//Параметры.Вставить("Заголовок3","Номер вопроса");	
	//Параметры.Вставить("Заголовок5","Наличие картинки");
	//Параметры.Вставить("Заголовок6","Правильный ответ");
	ТаблицаХТМЛ = ТаблицаЗначенийВТаблицуХТМЛ(ТаблицаЗначений,Параметры);
	Возврат ТаблицаХТМЛ; 
КонецФункции

Функция ТаблицаЗначенийВТаблицуХТМЛ(ТабЗначений,СтруктураПараметрыТаблицыХТМЛ = Неопределено) Экспорт
	
	//СтруктураПараметрыТаблицыХТМЛ
	//
	//Общие параметры:
	//СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы - общая ширина таблица
	//СтруктураПараметрыТаблицыХТМЛ.ЦветШапки - цвет шапки таблицы пример "eadbaf"
	//СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется - по умолчанию ЛОЖЬ
	//
	//Индивиуальные для каждой колонки:
	//СтруктураПараметрыТаблицыХТМЛ.Заголовок1 - заголовок для первой колонки, цифра на конце обознает номер колонки (не с нуля)
	//СтруктураПараметрыТаблицыХТМЛ.Ширина1 - ширина для первой колонки, цифра на конце обознает номер колонки (не с нуля)
	//СтруктураПараметрыТаблицыХТМЛ.Положение1 - отвечает за положение текста в колонке (по умол. лево), передовать "center" или "right"
	
	//ТабЗначений = Новый ТаблицаЗначений;
	МассивИменКолонок = Новый Массив;
	
	Если ТипЗнч(СтруктураПараметрыТаблицыХТМЛ) <> Тип("Структура") Тогда
		СтруктураПараметрыТаблицыХТМЛ = Новый Структура;
	КонецЕсли;
				
	КоличествоКолонок = ТабЗначений.Колонки.Количество();
	ПунктПорядкуИспользуется = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ПунктПорядкуИспользуется"),СтруктураПараметрыТаблицыХТМЛ.ПунктПорядкуИспользуется,ЛОЖЬ);	
	
	Если КоличествоКолонок < 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	ЦветШапки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ЦветШапки")," bgcolor=""#" + СтруктураПараметрыТаблицыХТМЛ.ЦветШапки + """","");
	ШиринаТаблицы = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство("ШиринаТаблицы")," style=""width:" + СтруктураПараметрыТаблицыХТМЛ.ШиринаТаблицы + "px""",""); 
	ТаблицаХТМЛ = "<table border=""1"" cellpadding=""1"" cellspacing=""0"" " + ШиринаТаблицы + ">
				|<tbody>
				|<tr>";
	
	//Первым выводим столбик П/П если он задан в шапку
	Если ПунктПорядкуИспользуется Тогда
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<td" + ЦветШапки + " style=""width:30px"" align=""center"">п/п</td>";	
	КонецЕсли;
	
	//Формируем шапку
	Для Счетчик = 1 по КоличествоКолонок Цикл
		ИмяСвойстваШирина = "Ширина" + Счетчик;
		ШиринаСтолбца = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваШирина)," style=""width:" + СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваШирина] + "px""","");
		ИмяКолонки = ТабЗначений.Колонки[Счетчик-1].Имя;
		ИмяСвойстваЗаголовок = "Заголовок" + Счетчик;
		ЗаголовокКолонки = ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваЗаголовок),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваЗаголовок],ИмяКолонки);
		ТаблицаХТМЛ = ТаблицаХТМЛ + " 
				|<td" + ЦветШапки + ШиринаСтолбца + " align=""center"">" + ЗаголовокКолонки + "</td>";	
		МассивИменКолонок.Добавить(ИмяКолонки);
	КонецЦикла;
	ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|</tr>";
	
	//Заполняем таблицу	
	ПунктПорядку = 0;
	Для каждого СтрокаТаблицы Из ТабЗначений Цикл
		ПунктПорядку = ПунктПорядку + 1;
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<tr>" + ?(ПунктПорядкуИспользуется, Символы.ПС + "<td align=""center"">" + ПунктПорядку + "</td>","") + "";
		Для Счетчик = 0 по КоличествоКолонок - 1 Цикл
			ИмяСвойстваПоложение = "Положение" + Строка(Счетчик + 1);
			Положение = " align=""" + ?(СтруктураПараметрыТаблицыХТМЛ.Свойство(ИмяСвойстваПоложение),СтруктураПараметрыТаблицыХТМЛ[ИмяСвойстваПоложение],"left") + """";
			
			Значение = Строка(СтрокаТаблицы[МассивИменКолонок[Счетчик]]);
			Значение = ?(ЗначениеЗаполнено(Значение), Значение, "-");
			ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|<td " + Положение + ">" + Значение + "</td>";			
		КонецЦикла;				
		ТаблицаХТМЛ = ТаблицаХТМЛ + "
				|</tr>";
	КонецЦикла;	
	
	ТаблицаХТМЛ = ТаблицаХТМЛ + " 
				|</tbody>
				|</table>";
	
	Возврат ТаблицаХТМЛ;

КонецФункции

Процедура ОповещениеПоЭлектроннойПочте(ТекстОповещения) Экспорт
	ПараметрыПисьма = Новый Структура;
	
	Тема = НСтр("ru = " + ТекстОповещения);
	Тело = ТекстОповещения;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тема = Тема;
	
	МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Строка(Константы.ПолучателиЭлектронныхОповещений.Получить()), ";");
	
	Для Каждого Стр Из МассивАдресов Цикл
		Стр = СтрЗаменить(Стр, "=", Символы.ПС);
		
		ОтображаемоеИмя = СокрЛП(СтрПолучитьСтроку(Стр, 1));
		Адрес = СокрЛП(СтрПолучитьСтроку(Стр, 2));
		
		Получатель = Письмо.Получатели.Добавить(Адрес);
		Получатель.ОтображаемоеИмя = ОтображаемоеИмя;		
	КонецЦикла;
   			
	Письмо.ИмяОтправителя = "WGD";
	Письмо.Отправитель.ОтображаемоеИмя = "WGD";
	Письмо.Отправитель.Адрес = "1ctest@agroeco.ru";
	
	Текст = Письмо.Тексты.Добавить(ТекстОповещения);
	Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	
	Профиль = ИнтернетПочтовыйПрофиль();
	ИнтернетПочта = Новый ИнтернетПочта;
	
	ТекстОшибки = "";
	Попытка
		ИнтернетПочта.Подключиться(Профиль);
		ИнтернетПочта.Послать(Письмо);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ИнтернетПочта.Отключиться();

КонецПроцедуры

Процедура ИмпортПользователейАД() Экспорт
	
	мСтруктураКэшДанных = Новый Структура;
	
	КвалификаторСтроки = Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная);
	
	СписокРеквизитовПолный = ПолучитьПолныйСписокРевизитовАД();
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	СтрСписокПолный = "";
	Для Инд = 0 По СписокРеквизитовПолный.Количество() - 1 Цикл
		
		ТаблицаПользователей.Колонки.Добавить(СписокРеквизитовПолный[Инд]);   // , Новый ОписаниеТипов("Строка", , КвалификаторСтроки)
		СтрСписокПолный = СтрСписокПолный+"," + СписокРеквизитовПолный[Инд];
		
	КонецЦикла;
	
	ТабГруппПользователей = ПодготовитьИнформациюПоГруппамПользователей();
	
	//Выборка только по активным пользователям
	КомандаАДО = Новый COMОбъект("ADODB.Command");
	СоединениеАДО = Новый COMОбъект("ADODB.Connection");
	СоединениеАДО.Provider = "ADsDSOObject";
	СоединениеАДО.Open("Active Directory Provider");
	КомандаАДО.ActiveConnection = СоединениеАДО;                          

	Попытка
		
		RootDSE = ПолучитьCOMОбъект("LDAP://RootDSE");                                   
		НашДомен = RootDSE.Get("defaultNamingContext");
		База = "<LDAP://" + НашДомен + ">";                                 
		
	Исключение 
		
		//Сообщить("Не удалось подключиться к домену "); 
		
	КонецПопытки;
	
	ТабПользователейГрупп = Новый ТаблицаЗначений;
	ТабПользователейГрупп.Колонки.Добавить("Группа");
	ТабПользователейГрупп.Колонки.Добавить("Пользователь");
	
	ДоменКоротко = СтрЗаменить(НашДомен, "DC=", "");
	ДоменКоротко = СтрЗаменить(ДоменКоротко, ",ru", "");
	
	МассивГрупп = ПолучитьСписокГруппВДомене(ДоменКоротко);
	Для Сч = 0 По МассивГрупп.Количество() - 1 Цикл
		
		МассивПользователей = ПолучитьСписокПользователейВГруппеДомена(ДоменКоротко, МассивГрупп[Сч]);
		
		Для Сч1 = 0 По МассивПользователей.Количество() - 1 Цикл
			
			НС = ТабПользователейГрупп.Добавить();
			НС.Группа = МассивГрупп[Сч];
			НС.Пользователь = МассивПользователей[Сч1];
			
		КонецЦикла;
	КонецЦикла;
	
	
	Фильтр = "(&(objectCategory=person)(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=2))";
	
	СписокРеквизитов = Новый Массив;
	СписокРеквизитов.Добавить("sAMAccountName");        //Логин
	СписокРеквизитов.Добавить("DisplayName");  		    //Представление
	СписокРеквизитов.Добавить("userAccountControl");
	
	СтрСписок="";
	Для Инд = 0 По СписокРеквизитов.Количество() - 1 Цикл
		
		СтрСписок = СтрСписок+"," + СписокРеквизитов[Инд];
		
	КонецЦикла;
	
	ТекстЗапроса = База + ";" + Фильтр + ";" + СтрСписок + ";subtree";
	КомандаАДО.CommandText = ТекстЗапроса;
	КомандаАДО.Properties("Page Size").Value = 100;
	КомандаАДО.Properties("Timeout").Value = 30;
	КомандаАДО.Properties("Cache Results").Value = Ложь;
	ВыборкаАДО = КомандаАДО.Execute();
	
	Пока НЕ ВыборкаАДО.EOF Цикл
		
		DisplayName= СокрЛП(Строка(ВыборкаАДО.Fields("DisplayName").Value));
		
		СтрТЗ=ТаблицаПользователей.Добавить();
		
		Для Каждого Рекв Из СписокРеквизитов Цикл
			
			СтрТЗ[Рекв]=СокрЛП(Строка(ВыборкаАДО.Fields(Рекв).Value));
			
			Если Рекв = "thumbnailPhoto" Тогда
				
				Если СтрТЗ[Рекв] <> "" Тогда
					Stream = Новый COMОбъект("ADODB.Stream"); 
			    	Stream.Type = 1; 
			    	Stream.Open(); 
			 		Stream.Write(ВыборкаАДО.Fields(Рекв).Value); 
			        ИмяФайла = "\\Dev0\Repl\temp.jpg"; 
			        Stream.SaveToFile(ИмяФайла);
					
					файл = Новый ЧтениеТекста("\\Dev0\Repl\temp.jpg");    
				    текстданные= файл.Прочитать();
				    Хранилище = Новый ХранилищеЗначения(текстданные, Новый  СжатиеДанных(9));
					СтрТЗ[Рекв] = Хранилище;
					
					УдалитьФайлы("\\Dev0\Repl\temp.jpg");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаАДО.MoveNext();
		
	КонецЦикла;
	
	МассивАктивных = ТаблицаПользователей.ВыгрузитьКолонку("sAMAccountName");
	
	ВыборкаАДО.Close();
	СоединениеАДО.Close();
	
	ТаблицаПользователей.Очистить();
	
	//Выборкам по всем пользователям
	КомандаАДО = Новый COMОбъект("ADODB.Command");
	СоединениеАДО = Новый COMОбъект("ADODB.Connection");
	СоединениеАДО.Provider = "ADsDSOObject";
	СоединениеАДО.Open("Active Directory Provider");
	КомандаАДО.ActiveConnection = СоединениеАДО;                          
	
	Фильтр = "(&(objectCategory=person)(objectClass=user))";
	
	ТекстЗапроса = База + ";" + Фильтр + ";" + СтрСписокПолный + ";subtree";
	КомандаАДО.CommandText = ТекстЗапроса;
	КомандаАДО.Properties("Page Size").Value = 100;
	КомандаАДО.Properties("Timeout").Value = 30;
	КомандаАДО.Properties("Cache Results").Value = Ложь;
	ВыборкаАДО = КомандаАДО.Execute();
	
	Пока НЕ ВыборкаАДО.EOF Цикл
		
		DisplayName= СокрЛП(Строка(ВыборкаАДО.Fields("DisplayName").Value));
		
		СтрТЗ=ТаблицаПользователей.Добавить();
		
		Для Каждого Рекв Из СписокРеквизитовПолный Цикл
			
			СтрТЗ[Рекв]=СокрЛП(Строка(ВыборкаАДО.Fields(Рекв).Value))
			
		КонецЦикла;
		
		СтрТЗ.Manager = НайтиПользователя(СтрТЗ.Manager);
		
		ВыборкаАДО.MoveNext();
		
	КонецЦикла;
	
	ВыборкаАДО.Close();
	СоединениеАДО.Close();
	
	Для Каждого Строка Из ТаблицаПользователей Цикл
		
		Ссылка = Справочники.аэПользователиАД.НайтиПоКоду(Строка.sAMAccountName);
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			
			ТекПользователь = Справочники.аэПользователиАД.СоздатьЭлемент();
			ТекПользователь.Код = Строка.sAMAccountName;
			
		Иначе
			
			ТекПользователь = Ссылка.ПолучитьОбъект();
			
		КонецЕсли;
		
		ПользовательАктивен = Истина;
		
		Если МассивАктивных.Найти(Строка.sAMAccountName) = Неопределено Тогда
			
			ПользовательАктивен = Ложь;
			
		КонецЕсли;
		
		НаименованиеИзменилось  	= (СокрЛП(ТекПользователь.Наименование)  			<> СокрЛП(Строка.DisplayName));
		ДолжностьИзменилось 		= (ВРЕГ(СокрЛП(ТекПользователь.Должность)) 	 		<> ВРЕГ(СокрЛП(Строка.Title)));
		ПодразделениеИзменилось 	= (ВРЕГ(СокрЛП(ТекПользователь.Подразделение)) 		<> ВРЕГ(СокрЛП(Строка.Department)));
		ОрганизацияИзменилось   	= (ВРЕГ(СокрЛП(ТекПользователь.Организация)) 	 	<> ВРЕГ(СокрЛП(Строка.Company)));
		ТелефонИзменилось 			= (СокрЛП(ТекПользователь.Телефон) 		 			<> СокрЛП(Строка.Telephonenumber));
		ЕмайлИзменилось 			= (ВРЕГ(СокрЛП(ТекПользователь.ЭлектроннаяПочта)) 	<> ВРЕГ(СокрЛП(Строка.Mail)));
		АктивностьИзменилась 		= (ТекПользователь.Активен                  		<> ПользовательАктивен);
		ДомашнийКаталогИзменилось 	= (ТекПользователь.ДомашнийКаталог                  <> Строка.HomeDirectory);
		ДомашнийТелефонИзменилось 	= (ТекПользователь.ДомашнийТелефон                  <> Строка.HomePhone);
		МобильныйТелефонИзменилось 	= (ТекПользователь.МобильныйТелефон                 <> Строка.mobile);
		ДатаСозданияИзменилось 		= (ТекПользователь.ДатаСоздания                  	<> Дата(Строка.whenCreated));
		РуководительИзменилось 		= (ТекПользователь.Руководитель            			<> Строка.Manager);
		
		ЕстьИзменения = НаименованиеИзменилось или ДолжностьИзменилось или ПодразделениеИзменилось или ОрганизацияИзменилось или ТелефонИзменилось или ЕмайлИзменилось 
			или АктивностьИзменилась или ДомашнийКаталогИзменилось или ДомашнийТелефонИзменилось или МобильныйТелефонИзменилось или ДатаСозданияИзменилось или РуководительИзменилось;
		
		//------------------------------------------------------------------------------------------------------------	
		//Определение изменения групп пользователя	
		Отбор = Новый Структура("Пользователь", ТекПользователь.Ссылка);
		ТабГруппОбщий = ТабГруппПользователей.НайтиСтроки(Отбор);
		МассивАктивныхГрупп = ТекПользователь.Группы.ВыгрузитьКолонку("Группа");
		
		ТабРез = Новый ТаблицаЗначений;
		ТабРез.Колонки.Добавить("Группа");
		ТабРез.Колонки.Добавить("АктивностьПрошлая");
		ТабРез.Колонки.Добавить("АктивностьТекущая");
		ТабРез.Колонки.Добавить("АктивностьИзменилась");
		АктивностьИзменилась = Ложь;
		
		Для Сч = 0 По ТабГруппОбщий.Количество() - 1 Цикл
			
			НС = ТабРез.Добавить();
			НС.Группа = ТабГруппОбщий[Сч].Группа;
			НС.АктивностьПрошлая = ТабГруппОбщий[Сч].Активен;
			НС.АктивностьТекущая = ?(МассивАктивныхГрупп.Найти(НС.Группа) = Неопределено, Ложь, Истина);
			НС.АктивностьИзменилась = НЕ(НС.АктивностьПрошлая = НС.АктивностьТекущая);
			АктивностьИзменилась = Макс(АктивностьИзменилась, НЕ(НС.АктивностьПрошлая = НС.АктивностьТекущая));
			
		КонецЦикла;
		
		Для Сч = 0 По МассивАктивныхГрупп.Количество() - 1 Цикл
			
			Если ТабРез.Найти(МассивАктивныхГрупп[Сч], "Группа") = Неопределено Тогда
				
				НС = ТабРез.Добавить();
				НС.Группа = МассивАктивныхГрупп[Сч];
				НС.АктивностьПрошлая = Ложь;
				НС.АктивностьТекущая = Истина;
				НС.АктивностьИзменилась = НЕ(НС.АктивностьПрошлая = НС.АктивностьТекущая);
				АктивностьИзменилась = Макс(АктивностьИзменилась, НЕ(НС.АктивностьПрошлая = НС.АктивностьТекущая));
				
			КонецЕсли;
			
		КонецЦикла;
		//------------------------------------------------------------------------------------------------------------	
			
		//------------------------------------------------------------------------------------------------------------	
		//Запись изменений пользователя
		Если ЕстьИзменения Тогда
			
			ТекПользователь.Наименование = СокрЛП(Строка.DisplayName);
			ТекПользователь.ЭлектроннаяПочта = СокрЛП(Строка.Mail);
			ТекПользователь.Должность = НайтиДолжность(СокрЛП(Строка.Title)); 
			ТекПользователь.Подразделение = НайтиПодразделение(СокрЛП(Строка.Department)); 
			ТекПользователь.Организация = НайтиОрганизацию(СокрЛП(Строка.Company)); 
			ТекПользователь.Активен = ПользовательАктивен;
			ТекПользователь.Телефон = СокрЛП(Строка.Telephonenumber);
			
			ТекПользователь.ДомашнийКаталог = СокрЛП(Строка.HomeDirectory);
			ТекПользователь.ДомашнийТелефон = СокрЛП(Строка.HomePhone);
			ТекПользователь.МобильныйТелефон = СокрЛП(Строка.mobile);
			ТекПользователь.ДатаСоздания = Дата(Строка.whenCreated);
			ТекПользователь.Руководитель = Строка.Manager;
			
			Отбор = Новый Структура("Пользователь", ТекПользователь.Код);
			ГруппыПользователя = ТабПользователейГрупп.НайтиСтроки(Отбор);
			
			ТекПользователь.Группы.Очистить();
			
			Для Сч = 0 По ГруппыПользователя.Количество() - 1 Цикл
				
				НС = ТекПользователь.Группы.Добавить();
				НС.Группа = НайтиГруппу(ГруппыПользователя[Сч].Группа);
				
			КонецЦикла;
			
			ТекПользователь.Записать();
			
			ТекДата = ТекущаяДата();
			
			Если НаименованиеИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("Наименование", ТекПользователь.Наименование, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если ДолжностьИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("Должность", ТекПользователь.Должность, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если ПодразделениеИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("Подразделение", ТекПользователь.Подразделение, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если ОрганизацияИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("Организация", ТекПользователь.Организация, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если ЕмайлИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("ЭлектроннаяПочта", ТекПользователь.ЭлектроннаяПочта, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если АктивностьИзменилась Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("Активность", ТекПользователь.Активен, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если ДомашнийКаталогИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("ДомашнийКаталог", ТекПользователь.ДомашнийКаталог, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если ДомашнийТелефонИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("ДомашнийТелефон", ТекПользователь.ДомашнийТелефон, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если МобильныйТелефонИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("МобильныйТелефон", ТекПользователь.МобильныйТелефон, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если ДатаСозданияИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("ДатаСоздания", ТекПользователь.ДатаСоздания, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			Если РуководительИзменилось Тогда
				
				ЗаписатьИзменениеРеквизитаПользователяАД("Руководитель", ТекПользователь.Руководитель, ТекПользователь.Ссылка, ТекДата);
				
			КонецЕсли;
			
		КонецЕсли;
		//------------------------------------------------------------------------------------------------------------	
		
		//------------------------------------------------------------------------------------------------------------	
		//Запись изменившихся групп
		Если АктивностьИзменилась Тогда
			
			//НаборЗаписей.Очистить();
			НаборЗаписей = РегистрыСведений.аэСостояниеГруппПользователейАД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(ТекПользователь.Ссылка);
			НаборЗаписей.Отбор.Период.Установить(ТекущаяДата());
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Для Каждого СтрокаГрупп Из ТабРез Цикл
				Если СтрокаГрупп.АктивностьИзменилась Тогда
					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Период = ТекущаяДата();
					НоваяЗапись.Пользователь = ТекПользователь.Ссылка;
					НоваяЗапись.Группа = СтрокаГрупп.Группа;
					НоваяЗапись.Активен = СтрокаГрупп.АктивностьТекущая;
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
			КонецЦикла;
			
			
		КонецЕсли;
		//------------------------------------------------------------------------------------------------------------	
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьИнформациюПоГруппамПользователей()
	
	ДатаПоказателей = НачалоДня(ТекущаяДата()) - 1;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаПоказателей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	аэСостояниеГруппПользователейАДСрезПоследних.Пользователь,
	|	аэСостояниеГруппПользователейАДСрезПоследних.Группа,
	|	аэСостояниеГруппПользователейАДСрезПоследних.Активен
	|ИЗ
	|	РегистрСведений.аэСостояниеГруппПользователейАД.СрезПоследних(&Дата, ) КАК аэСостояниеГруппПользователейАДСрезПоследних"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаписатьИзменениеРеквизитаПользователяАД(ИДРеквизита, ЗначениеРеквизита, ТекПользователь, ТекДата);
				
	НаборЗаписей = РегистрыСведений.аэСостояниеПользователейАД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекДата);
	НаборЗаписей.Отбор.Пользователь.Установить(ТекПользователь);
	НаборЗаписей.Отбор.Реквизит.Установить(ИДРеквизита);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = ТекДата;
	НоваяЗапись.Пользователь = ТекПользователь;
	НоваяЗапись.Реквизит = ИДРеквизита;
	НоваяЗапись.Значение = ЗначениеРеквизита;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьПолныйСписокРевизитовАД()
	
	СписокРеквизитовПолный = Новый Массив;
	СписокРеквизитовПолный.Добавить("sAMAccountName");      //Логин
	СписокРеквизитовПолный.Добавить("DisplayName");  		//Представление
	СписокРеквизитовПолный.Добавить("Title");       		//Должность
	СписокРеквизитовПолный.Добавить("Department");    		//Подразделение
	СписокРеквизитовПолный.Добавить("Company");     		//Организация
	СписокРеквизитовПолный.Добавить("Telephonenumber");   	//Телефон
	СписокРеквизитовПолный.Добавить("Mail");             	//Емайл
	СписокРеквизитовПолный.Добавить("userAccountControl");  //Тип аккаунта
	СписокРеквизитовПолный.Добавить("physicalDeliveryOfficeName");  //
	СписокРеквизитовПолный.Добавить("Manager");  			//Руководитель
	СписокРеквизитовПолный.Добавить("HomeDirectory");       //Домашний каталог
	СписокРеквизитовПолный.Добавить("GivenName");           //Имя рус
	СписокРеквизитовПолный.Добавить("HomePhone");           //Домашний телефон
	СписокРеквизитовПолный.Добавить("l");                   //Город
	СписокРеквизитовПолный.Добавить("mobile");              //Мобильный
	СписокРеквизитовПолный.Добавить("ObjectCategory");      //CN=Person,CN=Schema,CN=Configuration,DC=apk-agroeco,DC=ru
	СписокРеквизитовПолный.Добавить("thumbnailPhoto");    //Фото
	СписокРеквизитовПолный.Добавить("userWorkstations");    //Рабочие станции
	СписокРеквизитовПолный.Добавить("whenCreated");    		//Когда создан
	
	//СписокРеквизитовПолный.Добавить("PasswordLastSet");    		//Когда создан
	
	Возврат СписокРеквизитовПолный;
	
КонецФункции

Функция НайтиДолжность(Наименование)
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = Справочники.аэДолжностиАД.НайтиПоНаименованию(Наименование, Истина);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		НовыйЭлемент = Справочники.аэДолжностиАД.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.Записать();
		
		Ссылка = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиПодразделение(Наименование)
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = Справочники.аэПодразделенияАД.НайтиПоНаименованию(Наименование, Истина);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		НовыйЭлемент = Справочники.аэПодразделенияАД.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.Записать();
		
		Ссылка = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиПользователя(Строка)
	
	//"CN=Филимонов Александр Борисович,OU=Folder Redirection,OU=Users,OU=SITE10,DC=apk-agroeco,DC=ru"
	Строка = СтрЗаменить(Строка, "CN=", "");
	Поз = Найти(Строка, ",");
	
	Если Поз = 0 Тогда
		
		Возврат Справочники.Пользователи.ПустаяСсылка();
		
	КонецЕсли;
	
	Строка = Лев(Строка, Поз - 1);
	Ссылка = Справочники.Пользователи.НайтиПоНаименованию(Строка);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
		НовыйПользователь.Наименование = Строка;
		НовыйПользователь.Записать();
		Ссылка = НовыйПользователь.Ссылка;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиОрганизацию(Наименование)
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = Справочники.аэОрганизацииАД.НайтиПоНаименованию(Наименование, Истина);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		НовыйЭлемент = Справочники.аэОрганизацииАД.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.Записать();
		
		Ссылка = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиГруппу(Наименование)
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = Справочники.аэГруппыАД.НайтиПоНаименованию(Наименование, Истина);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		НовыйЭлемент = Справочники.аэГруппыАД.СоздатьЭлемент();
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.Записать();
		
		Ссылка = НовыйЭлемент.Ссылка;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция НайтиЭлементСправочникаПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначениеРеквизита, мСтруктураКэшДанных)
	
	ИдСтруктуры = "СтруктураПоискаЭлемента_" + ИмяСправочника + "_" + ИмяРеквизита;
	Если НЕ мСтруктураКэшДанных.Свойство(ИдСтруктуры) Тогда
		// В качестве кэша используется соответствие
		мСтруктураКэшДанных.Вставить(ИдСтруктуры, Новый Соответствие);	
	КонецЕсли; 
	
	НайденноеЗначение = мСтруктураКэшДанных[ИдСтруктуры].Получить(ЗначениеРеквизита);
	Если НайденноеЗначение = Неопределено Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = // в запросе добавил предложение ВЫБРАТЬ 1 
			"ВЫБРАТЬ ПЕРВЫЕ 1 
			|	"+ ИмяСправочника +".Ссылка
			|ИЗ
			|	Справочник."+ ИмяСправочника +" КАК "+ ИмяСправочника +"
			|ГДЕ
			|	НЕ "+ ИмяСправочника +".ПометкаУдаления
			|	И "+ ИмяСправочника +"."+ ИмяРеквизита +" = &ЗначениеРеквизита";
		
		Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);	
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			НайденноеЗначение = Справочники[ИмяСправочника].ПустаяСсылка();
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НайденноеЗначение = Выборка.Ссылка;
		КонецЕсли; 
		мСтруктураКэшДанных[ИдСтруктуры].Вставить(ЗначениеРеквизита, НайденноеЗначение);
	КонецЕсли;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Функция ПолучитьСписокГруппВДомене (ИмяДомена, ТипГрупп = "GlobalGroup") Экспорт  
	Результат = Новый Массив(); 
	objNameSpace = "";  
	Попытка  objNameSpace = ПолучитьCOMОбъект("WinNT://"+СокрЛП(ИмяДомена));   
		м = Новый Массив();  
		м.Добавить(ТипГрупп); // Computer User Group GlobalGroup domain  
		м2 = Новый COMSafeArray(м, "VT_VARIANT");  
		objNameSpace.Filter = м2;  
		Для каждого item Из objNameSpace Цикл   
			Результат.Добавить(item.Name);  
		КонецЦикла; 
	Исключение  
		Результат.Очистить(); 
	КонецПопытки;  
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокПользователейВГруппеДомена (ИмяДомена, ИмяГруппы) Экспорт  
	Результат = Новый Массив(); 
	objNameSpace = "";  
	Попытка  
		objNameSpace = ПолучитьCOMОбъект("WinNT://" + СокрЛП(ИмяДомена) + "/" + СокрЛП(ИмяГруппы) + ", Group");   
		Для каждого item Из objNameSpace.Members() Цикл   
			Результат.Добавить(item.Name);  
		КонецЦикла; 
	Исключение  
		Результат.Очистить(); 
	КонецПопытки;  
	
	Возврат Результат;	
КонецФункции


Процедура СообщитьОбОшибке(Ошибка, ОписаниеОшибки, Прерывать = Ложь) Экспорт
	
	Сообщить(Ошибка);
	Сообщить("    "+ОписаниеОшибки);
	
	ЗаписьЖурналаРегистрации("Ошибка sqlsize", ,,,Ошибка + Символы.ПС +ОписаниеОшибки);
	
	Если Прерывать Тогда
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
КонецПроцедуры 
