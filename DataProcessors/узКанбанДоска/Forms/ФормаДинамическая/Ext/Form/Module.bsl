
&НаКлиенте
Перем ПараметрыОбработчикаОжидания; 

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СгенирироватьФормуЗаново = Истина;
	
	пНастройкиКомпоновщика = Неопределено;
		
	ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика);
	
	СтруктураТЧДляСнятияФокусаСЗадач = Новый Структура();
	
	ОпределитьОтборНаСервере(пНастройкиКомпоновщика);
	Попытка
		ЗаполнитьЗадачиНаСервере();		
	Исключение
		Сообщить(NStr("ru = 'ОписаниеОшибки '") + 
				 ОписаниеОшибки());
		УстановитьСтандартныеНастройкиНаСервере();
		ЗаполнитьЗадачиНаСервере();
	КонецПопытки;
	
	УстановитьВидимостьДоступность();
	
	ВыполнитьЛокализацию();
	
	УстановитьУсловноеОформление();
	ОформлениеЦветаЗадачНаСервере();
	
	БизнесПроцессыИЗадачиСервер.УстановитьПараметрыСпискаМоихЗадач(Список);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Выполнена", Ложь);
			
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.СрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	Элементы.ДатаНачала.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	Элементы.Дата.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДЛФ=DT", "ДЛФ=D");
	
	// Установка отбора динамического списка.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ПометкаУдаления", Ложь, ВидСравненияКомпоновкиДанных.Равно, , ,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		
	ТолькоНеРассмотренные = Истина;
	
	УстановитьУсловноеОформлениеДляДереваПисем();
	//УстановитьУсловноеОформлениеДляДереваВзаимодействийПочта();
	
	Объект.НаДату = ТекущаяДата();
	Объект.НаДатуКонецДня = КонецДня(Объект.НаДату);
	ЗаполнитьТекущиеДелаНаСервере();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДляДереваВзаимодействийПочта()
	ШрифтЖирный = Новый Шрифт(,,Истина);
	
	//1.Выделение цветом текущего взаимодействия
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(204, 255, 255));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтЖирный);
	
	ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВзаимодействий.ЭтоТекущееВзаимодействие");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.Использование  = Истина;

	ЗаполнитьСписокПолейОформленияДеревоВзаимодействияПочта(ЭлементУсловногоОформления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДляДереваПисем()
	ШрифтЖирный = Новый Шрифт(,,Истина);
	
	//1.Выделение цветом группировки по предмету
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(251, 249, 236));
	
	ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПисем.ЭтоПредмет");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.Использование  = Истина;

	ЗаполнитьСписокПолейОформленияДеревоПочта(ЭлементУсловногоОформления);
	
	//2. Выделение задач своего пользователя
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(224, 255, 255));
	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(245, 245, 245));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(205, 235, 240));
	
	ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПисем.ЭтоПредмет");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Ложь;
	ЭлементУсловия.Использование  = Истина;
	ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПисем.Ответственный");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = ПараметрыСеанса.ТекущийПользователь;
	ЭлементУсловия.Использование  = Истина;

	ЗаполнитьСписокПолейОформленияДеревоПочта(ЭлементУсловногоОформления);
	
	//3.Выделение жирным шрифтом группировки по предмету
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтЖирный);
	
	ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПисем.ЭтоПредмет");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.Использование  = Истина;

	ЗаполнитьСписокПолейОформленияДеревоПочта(ЭлементУсловногоОформления);
	
	//4.Выделение отклоненных писем
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 140, 120));
	
	ЭлементУсловия                = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПисем.Отклонено");
	ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Истина;
	ЭлементУсловия.Использование  = Истина;

	ЗаполнитьСписокПолейОформленияДеревоПочта(ЭлементУсловногоОформления);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПолейОформленияДеревоПочта(ЭлементУсловногоОформления)
	
	Массив = Новый Массив();
	Массив.Добавить("ДеревоПисемПредмет");
	Массив.Добавить("ДеревоПисемВзаимодействие");
	Массив.Добавить("ДеревоПисемДата");
	Массив.Добавить("ДеревоПисемОтветственный");
	Массив.Добавить("ДеревоПисемНомерКартинки");
	Массив.Добавить("ДеревоПисемОтправительПредставление");
	Массив.Добавить("ДеревоПисемРассмотрено");
	Массив.Добавить("ДеревоПисемРассмотретьПосле");
	Массив.Добавить("ДеревоПисемЭтоПредмет");
	Массив.Добавить("ДеревоПисемОтклонено");
	Массив.Добавить("ДеревоПисемПредметВзаимодействие");
	Массив.Добавить("ДеревоПисемСрокИспользования");
	Массив.Добавить("ДеревоПисемСтатус");
	Массив.Добавить("ДеревоПисемСтатусКартинкой");
	Массив.Добавить("ДеревоПисемСрокИсполнения");
	Массив.Добавить("ДеревоПисемСодержание");
	
	Для Сч = 0 По Массив.Количество() - 1 Цикл
		ОформляемоеПоле      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Массив[Сч]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПолейОформленияДеревоВзаимодействияПочта(ЭлементУсловногоОформления)
	
	ОформляемоеПоле      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоВзаимодействийВзаимодействие");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗаданий()
	ПользовательДляОтбора = NULL;
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель") Тогда
			ПользовательДляОтбора = ЭлементОтбора.ПравоеЗначение;
			
	         Для Каждого ЭлементОтбораСписка Из Список.Отбор.Элементы Цикл
	              Если ЭлементОтбораСписка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель") Тогда
	                    Список.Отбор.Элементы.Удалить(ЭлементОтбораСписка);
						Прервать;
	              КонецЕсли;
			  КонецЦикла;
			  
	         ЭлементОтбораСписка = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			 ЗаполнитьЗначенияСвойств(ЭлементОтбораСписка, ЭлементОтбора);
			
			Прервать;
	    КонецЕсли;
	КонецЦикла;
	
	Список.Параметры.УстановитьЗначениеПараметра("Исполнитель", ?(Не ЗначениеЗаполнено(ПользовательДляОтбора), NULL, ПользовательДляОтбора));
	
	ОбновитьИнфоСтроку();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЛокализацию()
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(67);//Задачи
	МассивКодовСообщений.Добавить(68);//Обновить
	МассивКодовСообщений.Добавить(69);//Настройки
	МассивКодовСообщений.Добавить(70);//Наблюдатель
	
	РегистрыСведений.узСловарь.ВыполнитьЛокализацию(Элементы,МассивКодовСообщений);
КонецПроцедуры //ВыполнитьЛокализацию()

&НаКлиенте
Процедура ТЧНастройкиКолонокПриИзменении(Элемент)
	СгенирироватьФормуЗаново = Истина;
	УстановитьОтборЗаданий();	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ВыполнитьДействиеДляАктивнойСтраницы();
	УстановленаСтраницаПочта = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Справочник_узСтатусыЗадачи_Записан" Тогда
		СгенирироватьФормуЗаново = Истина;
	Конецесли;
	
	Если ИмяСобытия = "СправочникЗадачаЗаписана"
		ИЛИ ИмяСобытия = "ДобавленУбранНаблюдатель"
		ИЛИ ИмяСобытия = "СправочникВариантВажностиЗаписан"
		ИЛИ ИмяСобытия = "СправочникСпринтЗаписан"
		ИЛИ ИмяСобытия = "Константа.ИспользоватьСвоиЦветаДляЗадач.Записана"
		ИЛИ ИмяСобытия = "Справочник_узСтатусыЗадачи_Записан"
		Тогда
		ЗаполнитьЗадачиНаСервере();
		ОбновитьКанбанДоску();
	Конецесли;
	
	Если ИмяСобытия = "Запись_ЗадачаИсполнителя" Тогда
		ОбновитьСписокЗадачНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "КомандаДобавитьВТекущиеДела" Тогда
		ОбновитьТекущиеДелаНаСервере();		
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьОбработчикОжидания("ЗаполнитьЗадачиНаКлиенте");
	ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	СохранитьНастройки();
	СохранитьТекущиеДелаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ЗаполнитьЗадачиНаКлиенте", 180);
	
	УбратьИзКонтекстногоМенюЛишниеКнопкиНаСервере();
	
	УстановитьОтборЗаданий();

	Элементы.ПоказатьСкрытьСодержание.Пометка = Ложь;
	Элементы.ПоказатьСкрытьПодробно.Пометка = Истина;
	
	УстановитьВидимостьДоступностьГруппаПочта();
	ПериодСтрокой = ПредставлениеПериода(Объект.ДатаНачала, Объект.ДатаОкончания,"ФП=истина");
	
	ОбновитьЗаголовокКомандаНаДату();
	
	ПодключитьОбработчикОжидания("Подключаемый_Обновление_Дерева_Почты", 300);
КонецПроцедуры

//&НаКлиенте
//Процедура ОбновитьСписокПисем()
//	ИспользуетсяНоваяВерсияСпискаПисем = аэОбщийМодульСервер.ИспользуетсяНоваяВерсияСпискаПисем();
//	
//	Если ИспользуетсяНоваяВерсияСпискаПисем Тогда
//		
//		ПолучитьДеревоПисем_v2(ПолучитьТекущуюПапку());
//		
//	Иначе
//		
//		ПолучитьДеревоПисем();
//		
//	КонецЕсли;
//	
//	Если СписокПисемСвернут Тогда
//		РазвернутьДеревоПочтыКоманда();
//	Иначе
//		СвернутьДеревоПочтыКоманда();
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюПапку()
	
	Если Элементы.ДеревоПапок.ТекущиеДанные = Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Если Элементы.ДеревоПапок.ТекущиеДанные.Свойство("Папка") Тогда
			
			Возврат Элементы.ДеревоПапок.ТекущиеДанные.Папка;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ГенерацияФормыДляВыбранныхСтатусов

&НаСервере
Процедура СгенерироватьФорму()
	УдалитьДинамическиеЭлементы();
	/////   РЕКВИЗИТЫ   //////////
	
	СтруктураИменИспользуемыхТЧ = Новый Структура();

	МассивДобавляемыхРеквизитов = Новый Массив;

	ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	/////   КОМАНДЫ   //////////

	/////   ЭЛЕМЕНТЫ   //////////
	Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
		Если НЕ СтрокаТЧНастройкиКолонок.Видимость Тогда
			Продолжить;
		Конецесли;
		пСтатус = СтрокаТЧНастройкиКолонок.Статус;
		ДобавитьНаКанбанДоскуКолонку(пСтатус);
	Конеццикла;
		
КонецПроцедуры 

&НаСервере
Процедура УдалитьДинамическиеЭлементы()
	пЭлементыФормы = Этаформа.Элементы;
	ПрефиксДляИмениЭлементовКолонок = ПолучитьПрефиксДляИмениЭлементовКолонок();
	ЭлементыКУдалению = Новый Массив();
	Для каждого пЭлементФормы из пЭлементыФормы цикл
		Если СтрНайти(пЭлементФормы.Имя,ПрефиксДляИмениЭлементовКолонок) = 0 Тогда
			Продолжить;
		Конецесли;
		Если ТипЗнч(пЭлементФормы) <> ТИп("ГруппаФормы") Тогда
			Продолжить;
		Конецесли;
		ЭлементыКУдалению.Добавить(пЭлементФормы);
	Конеццикла;
	Для каждого пЭлементФормы из ЭлементыКУдалению цикл
		пЭлементыФормы.Удалить(пЭлементФормы);		
	Конеццикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьПрефиксДляИмениЭлементовКолонок() 
	Возврат "_Колонка_";	
КонецФункции 

&НаСервере
Функция ПолучитьПредставлениеКолонки(пСтатус) 
	#Если Тромбон тогда
		пСтатус = Справочники.узСтатусыЗадачи.ПустаяСсылка();
	#Конецесли
	
	СтатусНаименование = пСтатус.Наименование;
	Если ЗначениеЗаполнено(пСтатус.НаименованиеДляКанбанДоски) Тогда
		СтатусНаименование = пСтатус.НаименованиеДляКанбанДоски;
	Конецесли;
	
	ПредставлениеКолонки = СтатусНаименование;
		
	пТекстWIPЛимит = "";
	Если пСтатус.ИспользоватьWIPЛимит Тогда
		пТекстWIPЛимит = " (WIP:"+пСтатус.WIPЛимит+")";
	Конецесли;
	
	пРодитель = пСтатус.Родитель;
	Если ЗначениеЗаполнено(пРодитель) Тогда
		РодительНаименование = пРодитель.Наименование;
		
		Если ЗначениеЗаполнено(пРодитель.НаименованиеДляКанбанДоски) Тогда
			РодительНаименование = пРодитель.НаименованиеДляКанбанДоски;
		Конецесли;		
		
		ПредставлениеКолонки = "" + РодительНаименование;
		
		Если пСтатус.WIPЛимитУказываетсяВРодителе Тогда
			ПредставлениеКолонки = "" + РодительНаименование + пТекстWIPЛимит;
		Конецесли;
		
		ПредставлениеКолонки = ПредставлениеКолонки + " \ " + СтатусНаименование;
	Конецесли;
	
	Если пСтатус.ИспользоватьWIPЛимит
		И НЕ пСтатус.WIPЛимитУказываетсяВРодителе Тогда
		ПредставлениеКолонки = ПредставлениеКолонки + пТекстWIPЛимит;
	Конецесли;
		
	Возврат ПредставлениеКолонки;
КонецФункции 

&НаСервере
Процедура ДобавитьНаКанбанДоскуКолонку(пСтатус)
	//ПредставлениеКолонки = пСтатус.Наименование;
	ПредставлениеКолонки = ПолучитьПредставлениеКолонки(пСтатус);
	
	пЭлементыФормы = Этаформа.Элементы;
	
	// ******   Группа формы "Группа для колонки статуса"    ***********
	
	ИменаЭлементов = ПолучитьИменаЭлементовДляКолонки(пСтатус);
	
	пЭлементГруппаКолонка = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяГруппыКолонки,Тип("ГруппаФормы"),пЭлементыФормы.ГруппаКанбанДоска);
	пЭлементГруппаКолонка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	пЭлементГруппаКолонка.Заголовок = ПредставлениеКолонки;
	пЭлементГруппаКолонка.Подсказка = ПредставлениеКолонки;
	пЭлементГруппаКолонка.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;

	// ******   Таблица формы "ТЧЗадачи" для статуса    ***********
	
	СтруктураИменИспользуемыхТЧ.Вставить(ИменаЭлементов.ИмяТЧЗадачи);
	
	пЭлементТЧЗадачи = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяТЧЗадачи,Тип("ТаблицаФормы"),пЭлементГруппаКолонка,Неопределено);
	пЭлементТЧЗадачи.ПутьКДанным = "Объект.ТЧЗадачи";
	пЭлементТЧЗадачи.АвтоВводНовойСтроки = Истина;
	пЭлементТЧЗадачи.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	пЭлементТЧЗадачи.ИзменятьПорядокСтрок = Ложь;
	пЭлементТЧЗадачи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	пЭлементТЧЗадачи.РежимВыделения = РежимВыделенияТаблицы.Множественный;
	пЭлементТЧЗадачи.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	пЭлементТЧЗадачи.Шапка = Ложь;
	пЭлементТЧЗадачи.УстановитьДействие("Выбор","ТЧЗадачиВыбор");
	пЭлементТЧЗадачи.УстановитьДействие("ПриАктивизацииЯчейки","ТЧЗадачиПриАктивизацииЯчейки");
	пЭлементТЧЗадачи.УстановитьДействие("ПередНачаломДобавления","ТЧЗадачиПередНачаломДобавления");
	пЭлементТЧЗадачи.УстановитьДействие("Перетаскивание","ТЧЗадачиПеретаскивание");
	пЭлементТЧЗадачи.КоманднаяПанель.Видимость = Ложь;
	
	// ******    Команды из контекстного меню "ТЧЗадачи"    ***********
	МассивКодовСообщений = Новый Массив();
	МассивКодовСообщений.Добавить(71);//Добавить в спринт
	МассивКодовСообщений.Добавить(72);//Убрать из спринта
	МассивКодовСообщений.Добавить(73);//Следить за задачей
	МассивКодовСообщений.Добавить(74);//Не следить за задачей
	МассивКодовСообщений.Добавить(81);//Добавить в текущие дела
	МассивКодовСообщений.Добавить(83);//Скопировать комментарий в коде	Copy the comment in the code	
	МассивКодовСообщений.Добавить(96);//Создать файл для задачи на диске
	
	СтруктураСообщений = РегистрыСведений.узСловарь.ПолучитьСтруктуруСообщений(МассивКодовСообщений);

	пКомандаДобавитьВТекущиеДела = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыДобавитьВТекущиеДела, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаДобавитьВТекущиеДела.Заголовок=СтруктураСообщений.Текст81;
	пКомандаДобавитьВТекущиеДела.ИмяКоманды="КомандаДобавитьВТекущиеДела";
	пКомандаДобавитьВТекущиеДела.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	
	пКомандаСкопироватьКомментарийВКоде = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыСкопироватьКомментарийВКоде, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаСкопироватьКомментарийВКоде.Заголовок=СтруктураСообщений.Текст83;
	пКомандаСкопироватьКомментарийВКоде.ИмяКоманды="КомандаСкопироватьКомментарийВКоде";
	пКомандаСкопироватьКомментарийВКоде.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	
	пКомандаСоздатьФайлДляЗадачиНаДиске = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыСоздатьФайлДляЗадачиНаДиске, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаСоздатьФайлДляЗадачиНаДиске.Заголовок=СтруктураСообщений.Текст96;
	пКомандаСоздатьФайлДляЗадачиНаДиске.ИмяКоманды="КомандаСоздатьФайлДляЗадачиНаДиске";
	пКомандаСоздатьФайлДляЗадачиНаДиске.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	
	пКомандаДобавитьВСпринт = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыДобавитьВСпринт, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаДобавитьВСпринт.Заголовок=СтруктураСообщений.Текст71;
	пКомандаДобавитьВСпринт.ИмяКоманды="КомандаДобавитьВСпринт";
	пКомандаДобавитьВСпринт.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	
	пКомандаУбратьИзСпринта = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыУбратьИзСпринта, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаУбратьИзСпринта.Заголовок=СтруктураСообщений.Текст72;
	пКомандаУбратьИзСпринта.ИмяКоманды="КомандаУбратьИзСпринта";
	пКомандаУбратьИзСпринта.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	
	пКомандаСледитьЗаЗадачей = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыСледитьЗаЗадачей, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаСледитьЗаЗадачей.Заголовок=СтруктураСообщений.Текст73;
	пКомандаСледитьЗаЗадачей.ИмяКоманды="КомандаСледитьЗаЗадачей";
	пКомандаСледитьЗаЗадачей.Отображение = ОтображениеКнопки.КартинкаИТекст;		
		
	пКомандаНеСледитьЗаЗадачей = пЭлементыФормы.Добавить(ИменаЭлементов.ИмяКомандыНеСледитьЗаЗадачей, Тип("КнопкаФормы"), пЭлементТЧЗадачи.КонтекстноеМеню);
	пКомандаНеСледитьЗаЗадачей.Заголовок=СтруктураСообщений.Текст74;
	пКомандаНеСледитьЗаЗадачей.ИмяКоманды="КомандаНеСледитьЗаЗадачей";
	пКомандаНеСледитьЗаЗадачей.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
	// ******   Группа формы "Карточка задачи"    ***********
	
	пЭлементКарточкаЗадачи = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяКарточкаЗадачи,Тип("ГруппаФормы"),пЭлементТЧЗадачи,Неопределено);
	пЭлементКарточкаЗадачи.Вид = ВидГруппыФормы.ГруппаКолонок;
	пЭлементКарточкаЗадачи.Заголовок = "ТЧЗадачи "+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи.Подсказка = "ТЧЗадачи "+ПредставлениеКолонки;

	// ******   Группа формы "Карточка задачи нижняя часть"    ***********

	пЭлементКарточкаЗадачи_НижняяЧасть = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяКарточкаЗадачи_НижняяЧасть,Тип("ГруппаФормы"),пЭлементКарточкаЗадачи,Неопределено);
	пЭлементКарточкаЗадачи_НижняяЧасть.Вид = ВидГруппыФормы.ГруппаКолонок;
	пЭлементКарточкаЗадачи_НижняяЧасть.Заголовок = "ТЧЗадачи "+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи_НижняяЧасть.Подсказка = "ТЧЗадачи "+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи_НижняяЧасть.Группировка = ГруппировкаКолонок.Горизонтальная;

	// ******   Поле формы "Задача в карточке задачи нижняя часть"    ***********
	
	пЭлементПолеЗадачиВКарточкеЗадачи = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяПоляЗадачиВКарточкеЗадачи,Тип("ПолеФормы"),пЭлементКарточкаЗадачи_НижняяЧасть,Неопределено);
	пЭлементПолеЗадачиВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
	пЭлементПолеЗадачиВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.Задача";
	пЭлементПолеЗадачиВКарточкеЗадачи.КнопкаВыпадающегоСписка = Ложь;
	пЭлементПолеЗадачиВКарточкеЗадачи.КнопкаОткрытия = Ложь;
	пЭлементПолеЗадачиВКарточкеЗадачи.Высота = 3;

	// ******   Группа формы "Карточка задачи верхняя часть"    ***********
	
	пЭлементКарточкаЗадачи_ВерхняяЧасть = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяКарточкаЗадачи_ВерхняяЧасть,Тип("ГруппаФормы"),пЭлементКарточкаЗадачи,пЭлементКарточкаЗадачи_НижняяЧасть);
	пЭлементКарточкаЗадачи_ВерхняяЧасть.Вид = ВидГруппыФормы.ГруппаКолонок;
	пЭлементКарточкаЗадачи_ВерхняяЧасть.Заголовок = "ТЧЗадачи_ВерхняяЧасть"+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи_ВерхняяЧасть.Подсказка = "ТЧЗадачи_ВерхняяЧасть"+ПредставлениеКолонки;
	пЭлементКарточкаЗадачи_ВерхняяЧасть.Группировка = ГруппировкаКолонок.ВЯчейке;

	// ******   Поле формы "Короткое имя в карточке задачи верхняя часть"    ***********
	
	пЭлементПолеКороткоеИмяВКарточкеЗадачи = пЭлементыФормы.Вставить(ИменаЭлементов.ИмяПоляКороткоеИмяВКарточкеЗадачи,Тип("ПолеФормы"),пЭлементКарточкаЗадачи_ВерхняяЧасть,Неопределено);
	пЭлементПолеКороткоеИмяВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
	пЭлементПолеКороткоеИмяВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.КороткоеИмя";
	пЭлементПолеКороткоеИмяВКарточкеЗадачи.Ширина = 3;
	
	// ******   Поле формы "Основная задача в карточке задачи верхняя часть"    ***********
	
	пЭлементПолеОсновнаяЗадачаПредставлениеВКарточкеЗадачи = пЭлементыФормы.Вставить(
		ИменаЭлементов.ИмяПоляОсновнаяЗадачаПредставлениеВКарточкеЗадачи,
		Тип("ПолеФормы"),
		пЭлементКарточкаЗадачи_ВерхняяЧасть,
		пЭлементПолеКороткоеИмяВКарточкеЗадачи);
					
	пЭлементПолеОсновнаяЗадачаПредставлениеВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
	пЭлементПолеОсновнаяЗадачаПредставлениеВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.ОсновнаяЗадачаПредставление";

	// ******   Поле формы "Номер задачи в карточке задачи верхняя часть"    ***********
	
	пЭлементПолеНомерЗадачиПредставлениеВКарточкеЗадачи = пЭлементыФормы.Вставить(
		ИменаЭлементов.ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи,
		Тип("ПолеФормы"),
		пЭлементКарточкаЗадачи_ВерхняяЧасть,
		пЭлементПолеОсновнаяЗадачаПредставлениеВКарточкеЗадачи);
		
	пЭлементПолеНомерЗадачиПредставлениеВКарточкеЗадачи.Вид = ВидПоляФормы.ПолеВвода;
	пЭлементПолеНомерЗадачиПредставлениеВКарточкеЗадачи.ПутьКДанным = "Объект.ТЧЗадачи.НомерЗадачиПредставление";	
	пЭлементПолеНомерЗадачиПредставлениеВКарточкеЗадачи.Ширина = 3;
КонецПроцедуры 

&НаСервере
Функция ПолучитьИменаЭлементовДляКолонки(пСтатус)
	
	ИмяКолонки = ПолучитьИмяКолонки(пСтатус);	
	ПрефиксДляИмениЭлементовКолонок = ПолучитьПрефиксДляИмениЭлементовКолонок();	
	
	ИмяГруппыКолонки = ПрефиксДляИмениЭлементовКолонок + ИмяКолонки + "_Группа";
	ИмяТЧЗадачи = ИмяКолонки + "_ТЧЗадачи";
	ИмяКомандыДобавитьВСпринт = ИмяКолонки + "_ТЧЗадачи_КомандаДобавитьВСпринт";
	ИмяКомандыУбратьИзСпринта = ИмяКолонки + "_ТЧЗадачи_КомандаУбратьИзСпринта";
	ИмяКомандыСледитьЗаЗадачей = ИмяКолонки + "_ТЧЗадачи_КомандаСледитьЗаЗадачей";
	ИмяКомандыНеСледитьЗаЗадачей = ИмяКолонки + "_ТЧЗадачи_КомандаНеСледитьЗаЗадачей";
	ИмяКомандыДобавитьВТекущиеДела = ИмяКолонки + "_ТЧЗадачи_КомандаДобавитьВТекущиеДела";
	ИмяКомандыСкопироватьКомментарийВКоде = ИмяКолонки + "_ТЧЗадачи_КомандаСкопироватьКомментарийВКоде";
	ИмяКомандыСоздатьФайлДляЗадачиНаДиске = ИмяКолонки + "_ТЧЗадачи_СоздатьФайлДляЗадачиНаДиске";
	                       
	ИмяКарточкаЗадачи = ИмяКолонки + "_ТЧЗадачиКарточкаЗадачи";
	ИмяКарточкаЗадачи_НижняяЧасть = ИмяКолонки + "_ТЧЗадачиКарточкаЗадачи_НижняяЧасть";
	ИмяПоляЗадачиВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_НижняяЧасть_Задача";
	ИмяКарточкаЗадачи_ВерхняяЧасть = ИмяКолонки +"_ТЧЗадачи_ВерхняяЧасть";
	
	ИмяПоляКороткоеИмяВКарточкеЗадачи = ИмяКолонки + "_ТЧЗадачи_ВерхняяЧасть_КороткоеИмя";
	ИмяПоляОсновнаяЗадачаПредставлениеВКарточкеЗадачи = ИмяКолонки +"_ТЧЗадачи_ВерхняяЧасть_ОсновнаяЗадачаПредставление";
	ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи = ИмяКолонки+"_ТЧЗадачи_ВерхняяЧасть_НомерЗадачиПредставление";	
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("ИмяГруппыКолонки",ИмяГруппыКолонки);
	РезультатФункции.Вставить("ИмяТЧЗадачи",ИмяТЧЗадачи);
	РезультатФункции.Вставить("ИмяКомандыДобавитьВСпринт",ИмяКомандыДобавитьВСпринт);
	РезультатФункции.Вставить("ИмяКомандыУбратьИзСпринта",ИмяКомандыУбратьИзСпринта);
	РезультатФункции.Вставить("ИмяКомандыСледитьЗаЗадачей",ИмяКомандыСледитьЗаЗадачей);
	РезультатФункции.Вставить("ИмяКомандыНеСледитьЗаЗадачей",ИмяКомандыНеСледитьЗаЗадачей);
	РезультатФункции.Вставить("ИмяКомандыДобавитьВТекущиеДела",ИмяКомандыДобавитьВТекущиеДела);
	РезультатФункции.Вставить("ИмяКомандыСкопироватьКомментарийВКоде",ИмяКомандыСкопироватьКомментарийВКоде);
	РезультатФункции.Вставить("ИмяКомандыСоздатьФайлДляЗадачиНаДиске",ИмяКомандыСоздатьФайлДляЗадачиНаДиске);
	
	РезультатФункции.Вставить("ИмяКарточкаЗадачи",ИмяКарточкаЗадачи);		
	РезультатФункции.Вставить("ИмяКарточкаЗадачи_НижняяЧасть",ИмяКарточкаЗадачи_НижняяЧасть);	
	РезультатФункции.Вставить("ИмяПоляЗадачиВКарточкеЗадачи",ИмяПоляЗадачиВКарточкеЗадачи);
	
	РезультатФункции.Вставить("ИмяКарточкаЗадачи_ВерхняяЧасть",ИмяКарточкаЗадачи_ВерхняяЧасть);
	РезультатФункции.Вставить("ИмяПоляКороткоеИмяВКарточкеЗадачи",ИмяПоляКороткоеИмяВКарточкеЗадачи);
	РезультатФункции.Вставить("ИмяПоляОсновнаяЗадачаПредставлениеВКарточкеЗадачи",ИмяПоляОсновнаяЗадачаПредставлениеВКарточкеЗадачи);
	РезультатФункции.Вставить("ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи",ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи);

	Возврат РезультатФункции;
КонецФункции 

&НаСервере
Функция ПолучитьИмяКолонки(пСтатус)
	пИмяКолонки = "";
	
	НаименованиеСтатуса = пСтатус.Наименование;	
	НомерСимвола = 1;
	ДлинаСтроки = СтрДлина(НаименованиеСтатуса);
	Пока НомерСимвола <= ДлинаСтроки Цикл
		пСимвол = Сред(НаименованиеСтатуса,НомерСимвола,1);
		пКодСимвола = КодСимвола(пСимвол);
		
		//Сообщить("пСимвол " + пСимвол + " пКодСимвола - " + пКодСимвола);
		Если (65 <= пКодСимвола И пКодСимвола <= 90)
			ИЛИ (97 <= пКодСимвола И пКодСимвола <= 122)
			ИЛИ (1072 <= пКодСимвола И пКодСимвола <= 1103)
			ИЛИ (1040 <= пКодСимвола И пКодСимвола <= 1071)
			Тогда
			пИмяКолонки = пИмяКолонки + пСимвол;
		Конецесли;
		Если пКодСимвола = 32 Тогда
			пИмяКолонки = пИмяКолонки + "_";
		Конецесли;
		НомерСимвола = НомерСимвола + 1;	
	Конеццикла;
	Возврат пИмяКолонки;
КонецФункции 

&НаСервере
Процедура УбратьИзКонтекстногоМенюЛишниеКнопкиНаСервере()
	Если НЕ СгенирироватьФормуЗаново Тогда
		Возврат;
	Конецесли;
	
	МассивКоманд = Новый Массив();
	МассивКоманд.Добавить("КонтекстноеМенюИзменить");
	МассивКоманд.Добавить("КонтекстноеМенюКопироватьВБуферОбмена");
	МассивКоманд.Добавить("КонтекстноеМенюСкопировать");
	МассивКоманд.Добавить("КонтекстноеМенюУдалить");
	
	ГруппаКопированиеИВыделение = "КонтекстноеМенюКопированиеИВыделение";
	Команда_КонтекстноеМенюКопироватьВБуферОбмена = "КонтекстноеМенюКопироватьВБуферОбмена";
	
	//Элементы.В_процессе_выполнения_ТЧЗадачи.КонтекстноеМеню.ПодчиненныеЭлементы	
	Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
		
		Если НЕ СтрокаТЧНастройкиКолонок.Видимость Тогда
			Продолжить;
		Конецесли;
		
		пСтатус = СтрокаТЧНастройкиКолонок.Статус;
		ИменаЭлементов = ПолучитьИменаЭлементовДляКолонки(пСтатус);
		ИмяТЧЗадачи = ИменаЭлементов.ИмяТЧЗадачи;
		
		пЭлементТЧЗадачи = Элементы[ИмяТЧЗадачи];
		Для каждого пКоманда из пЭлементТЧЗадачи.КонтекстноеМеню.ПодчиненныеЭлементы цикл
			ТипЗнчКоманда = ТипЗнч(пКоманда);
			пИмяКоманды = пКоманда.Имя;
			
			Если ТипЗнчКоманда = Тип("КнопкаФормы") Тогда 		
				Для каждого ЭлМассивКоманд из МассивКоманд цикл
					Если СтрНайти(пИмяКоманды,ЭлМассивКоманд) = 0 Тогда
						Продолжить;
					Конецесли;    
					
					пКоманда.Видимость = Ложь;	
					
					Прервать;
				Конеццикла;				
			Конецесли;
			
			Если ТипЗнчКоманда = Тип("ГруппаФормы")
				И СтрНайти(пИмяКоманды,ГруппаКопированиеИВыделение) > 0 Тогда
				Для каждого пКомандаКопированияИВыделения из пКоманда.ПодчиненныеЭлементы цикл
					Если СтрНайти(пКомандаКопированияИВыделения.Имя,Команда_КонтекстноеМенюКопироватьВБуферОбмена) = 0 Тогда
						Продолжить;
					Конецесли;
					
					пКомандаКопированияИВыделения.Видимость = Ложь;	
					
				Конеццикла;
			Конецесли;
			
		Конеццикла;
	Конеццикла;	
	
    СгенирироватьФормуЗаново = Ложь;
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборТЧ()
	Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
		Если НЕ СтрокаТЧНастройкиКолонок.Видимость Тогда
			Продолжить;
		Конецесли;
		пСтатус = СтрокаТЧНастройкиКолонок.Статус;
		ИмяКолонки = ПолучитьИмяКолонки(пСтатус);
		
		ИмяТЧЗадачиДляСтатуса = ИмяКолонки + "_ТЧЗадачи";
		Элементы[ИмяТЧЗадачиДляСтатуса].ОтборСтрок = Новый ФиксированнаяСтруктура("Статус", пСтатус);
	Конеццикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	Элементы.ТЧТекущиеДелаДопСведения.Видимость = Ложь;
	Если ПоказыватьДопСведения Тогда
		Элементы.ТЧТекущиеДелаДопСведения.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура УстановитьСтандартныеНастройкиНаСервере()
	СгенирироватьФормуЗаново = Истина;
	КлючНастроек = ПолучитьКлючНастроек();	
	ХранилищеОбщихНастроек.Сохранить(КлючНастроек,КлючНастроек,Неопределено);
	пНастройкиКомпоновщика = Неопределено;
	ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика);
	ОпределитьОтборНаСервере(пНастройкиКомпоновщика);
КонецПроцедуры 

&НаСервере
Функция ПолучитьКлючНастроек()
	КлючНастроек = "Обработка.узКанбанДоска";	
	Возврат КлючНастроек;
КонецФункции 

&НаСервере
Процедура ЗаполнитьЗадачиНаСервере()
	Объект.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКомпоновкиДанных.Настройки,Новый УникальныйИдентификатор());
	
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.ЗаполнитьЗадачи();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
	
	Если СгенирироватьФормуЗаново Тогда
		СгенерироватьФорму();
		УстановитьОтборТЧ();		
	Конецесли;	
	
	ОформлениеЦветаЗадачНаСервере();
	КоличествоЗадач = Объект.ТЧЗадачи.Количество();
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьСохраненныеНастройки(пНастройкиКомпоновщика)
	КлючНастроек = ПолучитьКлючНастроек();
	СохраненныеНастройки = ХранилищеОбщихНастроек.Загрузить(КлючНастроек,КлючНастроек);
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Если СохраненныеНастройки.Свойство("ТЧНастройкиКолонок") Тогда
			ЗаполнитьТЧНастройкиКолонокНаСервере();
			ТЧНастройкиКолонок = СохраненныеНастройки.ТЧНастройкиКолонок;
			Для каждого СтрокаТЧНастройкиКолонок из Объект.ТЧНастройкиКолонок цикл
				ПараметрыОтбора=Новый Структура();
				ПараметрыОтбора.Вставить("Статус",СтрокаТЧНастройкиКолонок.Статус);
				НайденныеСтрокиСохраненныеНастройки = ТЧНастройкиКолонок.НайтиСтроки(ПараметрыОтбора);
				Для каждого СтрокаНайденныеСтроки из НайденныеСтрокиСохраненныеНастройки цикл
					СтрокаТЧНастройкиКолонок.Видимость = СтрокаНайденныеСтроки.Видимость;		
				Конеццикла;				
			Конеццикла;
		Иначе
			ЗаполнитьТЧНастройкиКолонокНаСервере();	
		Конецесли;
		Если СохраненныеНастройки.Свойство("НастройкиКомпоновщикаХранилище") Тогда
			пНастройкиКомпоновщика = СохраненныеНастройки.НастройкиКомпоновщикаХранилище.Получить();
		Конецесли;		
		Если СохраненныеНастройки.Свойство("СписокПисемСвернут") Тогда
			СписокПисемСвернут = СохраненныеНастройки.СписокПисемСвернут;
		Конецесли;		
	Иначе
		ЗаполнитьТЧНастройкиКолонокНаСервере();
	Конецесли;	
КонецПроцедуры 

&НаСервере
Функция ОпределитьОтборНаСервере(пНастройкиКомпоновщика = Неопределено) Экспорт
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	МакетСКД = пОбъект.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	АдресВременногоХранилищаМакетаСКД = ПоместитьВоВременноеХранилище(МакетСКД,Новый УникальныйИдентификатор());
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаМакетаСКД);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(ИсточникНастроек);
	
	Если пНастройкиКомпоновщика = Неопределено Тогда
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	Иначе
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(пНастройкиКомпоновщика);
	Конецесли;
КонецФункции

&НаСервере
Процедура ЗаполнитьТЧНастройкиКолонокНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.ЗаполнитьТЧНастройкиКолонок();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьАктивизацииСтрок(ИсключитьИмяТЧ = Неопределено)
	Для каждого ЭлСтруктураТЧДляСнятияФокусаСЗадач из СтруктураТЧДляСнятияФокусаСЗадач цикл		
		ИмяТЧЗадачи = ЭлСтруктураТЧДляСнятияФокусаСЗадач.Ключ;	
		Если ИмяТЧЗадачи = ИсключитьИмяТЧ Тогда
			Продолжить;
		Конецесли;
		
		Элементы[ИмяТЧЗадачи].ВыделенныеСтроки.Очистить();
	Конеццикла;
КонецПроцедуры 

&НаКлиенте
Процедура СменитьСтатусЗадачиНаКлиенте(Элемент,ПараметрыПеретаскивания)
	НовыйСтатус = Элемент.ОтборСтрок.Статус;	
	ДанныеИсточник = ПараметрыПеретаскивания.Значение;
	
	МассивЗадач = Новый Массив();
	Для каждого ДанныеИсточник из ПараметрыПеретаскивания.Значение цикл
		ЗадачаСсылка = ДанныеИсточник.Задача;
		МассивЗадач.Добавить(ЗадачаСсылка);
	Конеццикла;	
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("НовыйСтатус",НовыйСтатус);
	ДопПараметры.Вставить("МассивЗадач",МассивЗадач);	
	СменитьСтатусЗадачиНаСервере(ДопПараметры);
КонецПроцедуры 

&НаСервере
Процедура СменитьСтатусЗадачиНаСервере(ДопПараметры)
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.СменитьСтатусЗадачи(ДопПараметры);
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюЗадачу(Элемент)
	пСтатус = Элемент.ОтборСтрок.Статус;
	ПараметрыНовойЗадачи = Новый Структура();
	ПараметрыНовойЗадачи.Вставить("Статус",пСтатус);
	ЭлементыОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы;
	Для каждого ЭлементОтбора из ЭлементыОтбора цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		Конецесли;
		Если ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			Продолжить;
		Конецесли;	
		Если СтрНайти(ЭлементОтбора.ЛевоеЗначение,".") > 0 Тогда
			Продолжить;
		Конецесли;
		Если ТипЗнч(ЭлементОтбора) =  Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ПараметрыНовойЗадачи.Вставить("" + ЭлементОтбора.ЛевоеЗначение,ЭлементОтбора.ПравоеЗначение);	
		Конецесли;
	Конеццикла;
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТребоватьЗаполнитьРодителя",Истина);
	ДопПараметры.Вставить("ПараметрыНовойЗадачи",ПараметрыНовойЗадачи);
	ОткрытьФорму("Справочник.узЗадачи.Форма.ФормаЭлемента",ДопПараметры);	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьДействиеДляАктивнойСтраницы()
	пТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	Если пТекущаяСтраница = Элементы.ГруппаКанбанДоска Тогда
		ОбновитьКанбанДоску();	
	Конецесли;	
	
	Если пТекущаяСтраница = Элементы.ГруппаПочта Тогда
		Элементы.ПользовательДляОтбора.Видимость = Ложь;
		Элементы.ОтправительДляОтбора.Видимость = Истина;
	Иначе
		Элементы.ПользовательДляОтбора.Видимость = Истина;
		Элементы.ОтправительДляОтбора.Видимость = Ложь;
	Конецесли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок)
	МассивЗадач = Новый Массив();
	Для каждого ЭлМассиваВыделенныхСтрок из МассивВыделенныхСтрок цикл
		ИдентификаторСтроки = ЭлМассиваВыделенныхСтрок;
		СтрокаТЧЗадачи = Объект.ТЧЗадачи.НайтиПоИдентификатору(ИдентификаторСтроки);
		МассивЗадач.Добавить(СтрокаТЧЗадачи.Задача);
	Конеццикла;	
	Возврат МассивЗадач;
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	НастройкиКомпоновщикаХранилище = Новый ХранилищеЗначения(КомпоновщикНастроекКомпоновкиДанных.Настройки);
	
	КлючНастроек = ПолучитьКлючНастроек();
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("ТЧНастройкиКолонок",Объект.ТЧНастройкиКолонок.Выгрузить());
	ДопПараметры.Вставить("НастройкиКомпоновщикаХранилище",НастройкиКомпоновщикаХранилище);
	ДопПараметры.Вставить("СписокПисемСвернут",СписокПисемСвернут);
	
	ХранилищеОбщихНастроек.Сохранить(КлючНастроек,КлючНастроек,ДопПараметры);
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура КомандаОбновить(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКанбанДоска;
	ЗаполнитьЗадачиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗадачиНаКлиенте()
	ОбновитьКанбанДоску();
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьКанбанДоску()
	СтруктураТЧДляСнятияФокусаСЗадач.Очистить();
	Объект.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКомпоновкиДанных.Настройки,Новый УникальныйИдентификатор());
	ЗаполнитьЗадачиНаСервере();
	УстановитьВидимостьДоступность();	
	
	ОчиститьАктивизацииСтрок();
	УбратьИзКонтекстногоМенюЛишниеКнопкиНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура КомандаУстановитьСтандартныеНастройки(Команда)
	УстановитьСтандартныеНастройкиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область КомандыИСобытияТЧЗадачи

&НаКлиенте
Процедура ТЧЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Задача);	
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗадачиПриАктивизацииЯчейки(Элемент)
	ИмяТЧЗадачи = Элемент.Имя;
	ИмяАктивнойТЧ = ИмяТЧЗадачи; 
	ОчиститьАктивизацииСтрок(ИмяТЧЗадачи);
	Если НЕ СтруктураТЧДляСнятияФокусаСЗадач.Свойство(ИмяТЧЗадачи) Тогда
		Элемент.ВыделенныеСтроки.Очистить();
		СтруктураТЧДляСнятияФокусаСЗадач.Вставить(ИмяТЧЗадачи,"Истина");
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)	
	Отказ = Истина;
	ДобавитьНовуюЗадачу(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗадачиПередНачаломИзменения(Элемент, Отказ)
	Отказ = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТЧЗадачиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СменитьСтатусЗадачиНаКлиенте(Элемент,ПараметрыПеретаскивания);
	ОформлениеЦветаЗадачНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьВСпринт(Команда)
	ДобавитьУбратьВСпринтНаКлиенте(1);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУбратьИзСпринта(Команда)
	ДобавитьУбратьВСпринтНаКлиенте(-1);
КонецПроцедуры

&НаСервере
Функция ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач)
	ЭтоДобавление = КодОперации = 1;
	ЭтоУдаление = КодОперации = -1;
	
	РезультатФункции = Новый Структура();
	МассивСообщений = Новый Массив();
	Для каждого ЭлМассиваЗадач из МассивЗадач цикл
		пЗадачаСсылка = ЭлМассиваЗадач;
		НомерЗадачи = Формат(пЗадачаСсылка.Код,"ЧГ=0");
		Если ЭтоДобавление Тогда
			Если пЗадачаСсылка.Спринт <> пСпринт Тогда
				ЗадачаОбъект = пЗадачаСсылка.ПолучитьОбъект();
				ЗадачаОбъект.Спринт = пСпринт;
				ЗадачаОбъект.Записать();
				МассивСообщений.Добавить("Добавлена"
					+" в спринт ["+пСпринт+"] "
					+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");
			Иначе
				МассивСообщений.Добавить("Уже указана"
					+" в спринте ["+пСпринт+"] "
					+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");				
			Конецесли;
		ИначеЕсли ЭтоУдаление Тогда
			пСпринт = пЗадачаСсылка.Спринт;
			Если ЗначениеЗаполнено(пСпринт) Тогда
				ЗадачаОбъект = пЗадачаСсылка.ПолучитьОбъект();
				ЗадачаОбъект.Спринт = Неопределено;
				ЗадачаОбъект.Записать();
				МассивСообщений.Добавить("Убрана"
					+" из спринта ["+пСпринт+"] "
					+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");					
			Иначе
				МассивСообщений.Добавить("Не указана в спринте"
					+" задача [#"+НомерЗадачи+" "+пЗадачаСсылка+"]");					
			Конецесли;	
		Иначе
			ВызватьИсключение "Неизвестный код операции " + КодОперации;
		КонецЕсли;
	Конеццикла;	
	РезультатФункции.Вставить("МассивСообщений",МассивСообщений);
	РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Истина);
	Возврат РезультатФункции;
КонецФункции

&НаКлиенте
Процедура ДобавитьУбратьВСпринтНаКлиенте(КодОперации)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		Сообщить("Выберите задачи, которые хотите добавить в спринт");
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Выберите задачи, которые хотите добавить в спринт");
		Возврат;
	Конецесли;	
	РезультатФункции = ДобавитьУбратьВСпринтНаСервере(КодОперации,МассивВыделенныхСтрок);
	КомандаДобавитьУбратьВыполнена = РезультатФункции.КомандаДобавитьУбратьВыполнена;
	Если НЕ КомандаДобавитьУбратьВыполнена Тогда
		Если РезультатФункции.Свойство("НеобходимоВыбратьСпринт") Тогда
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("МассивВыделенныхСтрок",МассивВыделенныхСтрок);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборСпринта", ЭтаФорма, ДополнительныеПараметры);
			
		    пОтбор = Новый Структура("СпринтЗавершен", Ложь);
			ПараметрыОткрытияФормы = Новый Структура("Отбор", пОтбор);   
			ОткрытьФорму("Справочник.узСпринты.Форма.ФормаВыбора",ПараметрыОткрытияФормы,,,,,ОповещениеОЗакрытии);	
		Конецесли;
	Конецесли;
	ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьВыборСпринта(РезультатЗакрытия, ДопПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	Конецесли;
	пСпринт = РезультатЗакрытия;
	МассивВыделенныхСтрок = ДопПараметры.МассивВыделенныхСтрок;
	РезультатФункции = ДобавитьУбратьВСпринтНаСервере(1,МассивВыделенныхСтрок,пСпринт);
	ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции);
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьУбратьВСпринтНаКлиентеОбработатьРезультатФункции(РезультатФункции)
	Если РезультатФункции.Свойство("МассивСообщений") Тогда
		МассивСообщений = РезультатФункции.МассивСообщений;
		Для каждого ЭлМассиваСообщения из МассивСообщений цикл
			Сообщить(ЭлМассиваСообщения);		 
		Конеццикла;		
	Конецесли;
	ЗаполнитьЗадачиНаСервере();	
КонецПроцедуры 

&НаСервере
Функция ДобавитьУбратьВСпринтНаСервере(КодОперации,МассивВыделенныхСтрок,пСпринт = Неопределено)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	РезультатФункцииТекущийСпринт = Справочники.узСпринты.ПолучитьТекущийСпринт();	
	ТекстОшибки	= РезультатФункцииТекущийСпринт.ТекстОшибки;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		МассивСообщений = Новый Массив(); 
		МассивСообщений.Добавить(ТекстОшибки);
		
		РезультатФункции = Новый Структура();
		РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Ложь);
		РезультатФункции.Вставить("МассивСообщений",МассивСообщений);
		Возврат РезультатФункции;		
	Конецесли;
	
	Если КодОперации = -1 Тогда
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,Неопределено,МассивЗадач);
		Возврат РезультатФункции;			
	Конецесли;
	
	Если ЗначениеЗаполнено(пСпринт) Тогда
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач);
		Возврат РезультатФункции;
	Конецесли;;		
	
	Только1АктивныйСпринт = РезультатФункцииТекущийСпринт.Только1АктивныйСпринт;	
	Если Только1АктивныйСпринт Тогда		
		пСпринт = РезультатФункцииТекущийСпринт.Спринт;
		РезультатФункции = ДобавитьУбратьВСпринтЗадачи(КодОперации,пСпринт,МассивЗадач);
		Возврат РезультатФункции;
	Конецесли;
	
	РезультатФункции = Новый Структура();
	РезультатФункции.Вставить("КомандаДобавитьУбратьВыполнена",Ложь);
	РезультатФункции.Вставить("НеобходимоВыбратьСпринт",Истина);
	Возврат РезультатФункции;
	
КонецФункции

&НаКлиенте
Процедура КомандаНеСледитьЗаЗадачей(Команда)
	ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСледитьЗаЗадачей(Команда)
	ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУбратьНаблюдателяЗаЗадачейНаКлиенте(ЭтоДобавлениеНаблюдателя)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		Сообщить("Выберите задачи, которые за которыми хотите следить");
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		Сообщить("Выберите задачи, которые за которыми хотите следить");
		Возврат;
	Конецесли;			
	ДобавитьУбратьНаблюдателяЗаЗадачейНаСервере(МассивВыделенныхСтрок,ЭтоДобавлениеНаблюдателя);	
	Оповестить("ДобавленУбранНаблюдатель");
КонецПроцедуры 

&НаСервере
Процедура ДобавитьУбратьНаблюдателяЗаЗадачейНаСервере(МассивВыделенныхСтрок,ЭтоДобавлениеНаблюдателя)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Пользователь",Пользователи.ТекущийПользователь());
	ДопПараметры.Вставить("МассивЗадач",МассивЗадач);
	Если ЭтоДобавлениеНаблюдателя Тогда
		РегистрыСведений.узНаблюдателиЗаЗадачами.СледитьЗаЗадачей(ДопПараметры);	
	Иначе
		РегистрыСведений.узНаблюдателиЗаЗадачами.ПерестатьСледитьЗаЗадачей(ДопПараметры);	
	Конецесли;
КонецПроцедуры 

&НаКлиенте
Процедура КомандаДобавитьВТекущиеДела(Команда)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, которые хотите добавить в текущие дела",82);
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, которые хотите добавить в текущие дела",82);
		Возврат;
	Конецесли;			
	ДобавитьВТекущиеДелаНаСервере(МассивВыделенныхСтрок);	
	Оповестить("КомандаДобавитьВТекущиеДела");
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТекущиеДелаНаСервере(МассивВыделенныхСтрок)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Автор",Пользователи.ТекущийПользователь());
	ДопПараметры.Вставить("МассивЗадач",МассивЗадач);
	Справочники.узТекущиеДела.ДобавитьЗадачуВТекущиеДела(ДопПараметры);
КонецПроцедуры 

&НаКлиенте
Процедура КомандаСкопироватьКомментарийВКоде(Команда)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		узОбщийМодульСервер.узСообщить("Выберите задачу, по которой хотите скопировать комментарий в коде",84);
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0	 Тогда
		узОбщийМодульСервер.узСообщить("Выберите задачу, по которой хотите скопировать комментарий в коде",84);
		Возврат;
	Конецесли;			
	Если МассивВыделенныхСтрок.Количество() > 1	 Тогда
		узОбщийМодульСервер.узСообщить("Можно выбрать только одну задачу для копирования комментария в коде",85);
		Возврат;
	Конецесли;				
	пКомментарииВКоде = ПолучитьКомментарийВКодеНаСервере(МассивВыделенныхСтрок);	
	узОбщийМодульКлиент.УстановитьТекстВБуферОбмена(пКомментарииВКоде);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьКомментарийВКодеНаСервере(МассивВыделенныхСтрок)
	МассивЗадач = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	
	Если МассивЗадач.Количество() > 1 Тогда
		узОбщийМодульСервер.узСообщить("Можно выбрать только одну задачу для копирования комментария в коде",85);	
	Конецесли;
	
	пЗадача = МассивЗадач[0];
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Код",пЗадача.Код);
	ДопПараметры.Вставить("Исполнитель",пЗадача.Исполнитель);
	ДопПараметры.Вставить("НомерВнешнейЗаявки",пЗадача.НомерВнешнейЗаявки);
	
	пКомментарииВКоде = Справочники.узЗадачи.ПолучитьКомментарииВКоде(ДопПараметры);
	Возврат пКомментарииВКоде;	
КонецФункции 

&НаКлиенте
Процедура КомандаСоздатьФайлДляЗадачиНаДиске(Команда)
	СтрокаТЧ = Элементы[ИмяАктивнойТЧ].ТекущиеДанные;	
	Если СтрокаТЧ = Неопределено тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, для которых хотите создать файл задач на диске",82);
		Возврат;	
	Конецесли;	
	МассивВыделенныхСтрок = Элементы[ИмяАктивнойТЧ].ВыделенныеСтроки;
	Если МассивВыделенныхСтрок.Количество() = 0 Тогда
		узОбщийМодульСервер.узСообщить("Выберите задачи, для которых хотите создать файл задач на диске",82);
		Возврат;
	Конецесли;		
	Массив = ПолучитьМассивЗадачПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	узОбщийМодульКлиент.СоздатьФайлДляЗадачиНаДиске(Массив);	
	Оповестить("КомандаСоздатьИерархиюЗадачНаДиске");
КонецПроцедуры

#КонецОбласти

#Область ОформлениеКанбанДоски

&НаСервере
Процедура ОформлениеЦветаЗадачНаСервере()
	УстановитьБазовоеОформлениеЗадачНаСервере();
	
	УстановитьИндивидуальноеОформлениеЗадачНаСервере();
	
	УстановитьУсловноеОформлениеДляДереваПисем();
	УстановитьУсловноеОформлениеДляДереваВзаимодействийПочта();
КонецПроцедуры 

&НаСервере
Процедура УстановитьИндивидуальноеОформлениеЗадачНаСервере()
	Если НЕ Константы.узИспользоватьСвоиЦветаДляЗадач.Получить() Тогда
		Возврат;
	Конецесли;
	
	Для Каждого ТекЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ТекЭлементФормы) = Тип("ТаблицаФормы") И ТекЭлементФормы.ПутьКДанным = "Объект.ТЧЗадачи" Тогда
			Для Каждого СтрокаЗадача Из Объект.ТЧЗадачи Цикл
				ТекЗадача = СтрокаЗадача.Задача;
				
				//+ УЗ_Иванов А.Б. 2016-11-26
				//ИмяТЧЗадачи = "ТЧЗадачи" + СтрокаЗадача.Статус.ИмяПредопределенныхДанных;
				ИменаЭлементов = ПолучитьИменаЭлементовДляКолонки(СтрокаЗадача.Статус);
				ИмяТЧЗадачи = ИменаЭлементов.ИмяТЧЗадачи;
				//- УЗ_Иванов А.Б. 2016-11-26
				
				Если ТекЭлементФормы.Имя <> ИмяТЧЗадачи Тогда
					Продолжить;
				КонецЕсли; 
				
				ТекЦвет 	 = ПолучитьПриоритетныйЦветЗадачиНаСервере(СтрокаЗадача);
				ЦветЗаполнен = ПроверитьЗаполнениеЦвета(ТекЦвет);
				
				Если ЦветЗаполнен Тогда
					ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
					Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					Отбор.Использование  = ИСТИНА;
					Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.Задача");
					Отбор.ПравоеЗначение = ТекЗадача;
					
					Поля 				 = ОформлениеЗадачи.Поля.Элементы.Добавить();
					Поля.Использование 	 = ИСТИНА;
					//Поля.Поле 			 = Новый ПолеКомпоновкиДанных(ИмяТЧЗадачи + "НомерЗадачиПредставление");
					Поля.Поле 			 = Новый ПолеКомпоновкиДанных(ИменаЭлементов.ИмяПоляНомерЗадачиПредставлениеВКарточкеЗадачи);
					
					ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", ТекЦвет);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры 

&НаСервере
Процедура УстановитьБазовоеОформлениеЗадачНаСервере()
	УсловноеОформление.Элементы.Очистить();
	
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ШрифтЖирный = Новый Шрифт(,,Истина);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтЖирный);
	
	//ВажностьЧисло
	//ЦветДляЗадачиЧисло	
	//Цвет указывается от ЦветДляЗадачиЧисло:
	// 1 - черный цвет; 
	// 2 - красный цвет;
	// 3 - желтый цвет;
	// 4 - зеленый цвет;
	// 10 - салатовый цвет;
	
	//{ ***** Установка цвета от Важности и буфера задачи *****
	
	// 1 - черный цвет;
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 1;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(0,0,0));	
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,255,255));	
	
	// 2 - красный цвет;
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 2;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,102,102));
	
	// 3 - желтый цвет;
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 3;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,255,0));
	
	// 4 - зеленый цвет;
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 4;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(153,204,0));
	
	// 10 - салатовый цвет;	
	ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.Использование  = ИСТИНА;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ЦветДляЗадачиЧисло");
	Отбор.ПравоеЗначение = 10;
	
	ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(207,238,0));
	
	//ОформлениеЗадачи 			 = УсловноеОформление.Элементы.Добавить();
	//ОтборГруппа 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	//ОтборГруппа.ТипГруппы 		 = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//
	//ОтборЭлементы 				 = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлементы.ВидСравнения 	 = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлементы.Использование  = ИСТИНА;
	//ОтборЭлементы.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	//ОтборЭлементы.ПравоеЗначение = 2;
	//
	//ОтборЭлементы 				= ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлементы.ВидСравнения 	= ВидСравненияКомпоновкиДанных.НеЗаполнено;
	//ОтборЭлементы.Использование = ИСТИНА;
	//ОтборЭлементы.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	//
	//ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	//ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(153,204,0));
	//
	//ОформлениеЗадачи 	 = УсловноеОформление.Элементы.Добавить();
	//Отбор 				 = ОформлениеЗадачи.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//Отбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	//Отбор.Использование  = ИСТИНА;
	//Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТЧЗадачи.ВажностьЧисло");
	//Отбор.ПравоеЗначение = 3;
	//
	//ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи);
	//ОформлениеЗадачи.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(207,238,0));
	
	//} ***** Установка цвета от Важности задачи *****
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПоляОформленияЗадачНаСервере(ОформлениеЗадачи)
	Для Каждого ТекЭлементФормы Из Элементы Цикл
		Если ТипЗнч(ТекЭлементФормы) = Тип("ТаблицаФормы") И ТекЭлементФормы.ПутьКДанным = "Объект.ТЧЗадачи" Тогда
			ИмяТЧЗадачи = ТекЭлементФормы.Имя;
			
			Если ТекЭлементФормы.Имя <> ИмяТЧЗадачи Тогда
				Продолжить;
			КонецЕсли; 
			
			Поля 			   = ОформлениеЗадачи.Поля.Элементы.Добавить();
			Поля.Использование = ИСТИНА;
			Поля.Поле 		   = Новый ПолеКомпоновкиДанных(ИмяТЧЗадачи + "_ВерхняяЧасть_НомерЗадачиПредставление");
			
			//ТЧЗадачи_ВерхняяЧасть_НомерЗадачиПредставление_В_процессе_выполнения
			//Элементы.В_процессе_выполнения_ТЧЗадачи_ВерхняяЧасть_НомерЗадачиПредставление_
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьЗаполнениеЦвета(ТекЦвет)
	Если ТекЦвет = Неопределено ИЛИ ТекЦвет = Новый Цвет(0,0,0) Тогда
		Возврат ЛОЖЬ;
	Иначе
		Возврат ИСТИНА;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьПриоритетныйЦветЗадачиНаСервере(СтрокаЗадача)
	Для Каждого ВидПриоритета Из ПолучитьМассивПриоритетовЦветаЗадач() Цикл
		ТекЦвет 	 = ПолучитьЦветЗадачиПоВидуПриоритета(СтрокаЗадача, ВидПриоритета);
		ЦветЗаполнен = ПроверитьЗаполнениеЦвета(ТекЦвет);
		Если ЦветЗаполнен Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТекЦвет;
КонецФункции

&НаСервере
Функция ПолучитьЦветЗадачиПоВидуПриоритета(СтрокаЗадача, ВидПриоритета)
	НужныйЦвет  = Неопределено;
	Задача 		= СтрокаЗадача.Задача;
				 
	пВидыПриоритетаЦвета = ВидыПриоритетаЦвета();
	
	Если ВидПриоритета = пВидыПриоритетаЦвета.Задача Тогда
		Если СтрокаЗадача.ИзмененЦветПоУмолчанию Тогда
			НужныйЦвет = Задача.ЦветЗадачи.Получить();
		Конецесли;
	ИначеЕсли ВидПриоритета = пВидыПриоритетаЦвета.Спринт Тогда 	
		НужныйЦвет = Задача.Спринт.ЦветСпринта.Получить();
	ИначеЕсли ВидПриоритета = пВидыПриоритетаЦвета.ОсновнаяЗадача Тогда 	
		НужныйЦвет = Задача.ОсновнаяЗадача.ЦветЗадачи.Получить();
	ИначеЕсли ВидПриоритета = пВидыПриоритетаЦвета.Важность Тогда 	
		НужныйЦвет = Задача.Важность.ЦветВажности.Получить();
	КонецЕсли; 
	
	Возврат НужныйЦвет;
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивПриоритетовЦветаЗадач()
	Приоритеты = Новый Массив;
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Задача);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Спринт);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().ОсновнаяЗадача);
	Приоритеты.Добавить(ВидыПриоритетаЦвета().Важность);
	
	Возврат Новый ФиксированныйМассив(Приоритеты);
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ВидыПриоритетаЦвета()
	Виды = Новый Структура();
	Виды.Вставить("Важность"	  , "Важность");
	Виды.Вставить("ОсновнаяЗадача", "ОсновнаяЗадача");
	Виды.Вставить("Спринт"		  , "Спринт");
	Виды.Вставить("Задача"		  , "Задача");
	
	Возврат Новый ФиксированнаяСтруктура(Виды);
КонецФункции 

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	СгруппироватьПоКолонкеНаСервере(Настройки["РежимГруппировки"]);
КонецПроцедуры
#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	БизнесПроцессыИЗадачиКлиент.СписокЗадачПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, 
		Родитель, Группа);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущиеДанные.Свойство("ПринятаКИсполнению")
		И НЕ Элемент.ТекущиеДанные.ПринятаКИсполнению Тогда
			Элементы.ПринятьКИсполнению.Доступность= Истина;
	Иначе
		Элементы.ПринятьКИсполнению.Доступность= Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьБизнесПроцесс(Команда)
	БизнесПроцессыИЗадачиКлиент.ОткрытьБизнесПроцесс(Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПредметЗадачи(Команда)
	БизнесПроцессыИЗадачиКлиент.ОткрытьПредметЗадачи(Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВажности(Команда)
	СгруппироватьПоКолонке("Важность");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	СгруппироватьПоКолонке("");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТочкеМаршрута(Команда)
	СгруппироватьПоКолонке("ТочкаМаршрута");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	СгруппироватьПоКолонке("Автор");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПредмету(Команда)
	СгруппироватьПоКолонке("ПредметСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоСроку(Команда)
	СгруппироватьПоКолонке("СрокДляГруппировки");
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ПринятьЗадачиКИсполнению(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПринятиеКИсполнению(Команда)
	
	БизнесПроцессыИЗадачиКлиент.ОтменитьПринятиеЗадачКИсполнению(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	
	ОбновитьСписокЗадачНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	// Скрыть вторую строку группировки.
	КолонкиСпискаЗадач = Новый Массив();
	ВыбратьВсеПодчиненныеЭлементы(Элементы.ГруппаКолонки, КолонкиСпискаЗадач);
	Для каждого ЭлементФормы Из КолонкиСпискаЗадач Цикл
		
		Если ЭлементФормы = Элементы.Наименование Тогда
			Продолжить;
		КонецЕсли;
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементФормы.Имя);
		
	КонецЦикла;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	БизнесПроцессыИЗадачиСервер.УстановитьОформлениеЗадач(Список);
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеПодчиненныеЭлементы(Родитель, Результат)
	
	Для каждого ЭлементФормы Из Родитель.ПодчиненныеЭлементы Цикл
		
		Результат.Добавить(ЭлементФормы);
		Если ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			ВыбратьВсеПодчиненныеЭлементы(ЭлементФормы, Результат); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоКолонке(Знач ИмяКолонкиРеквизита)
	РежимГруппировки = ИмяКолонкиРеквизита;
	Список.Группировка.Элементы.Очистить();
	Если НЕ ПустаяСтрока(ИмяКолонкиРеквизита) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиРеквизита);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СгруппироватьПоКолонкеНаСервере(Знач ИмяКолонкиРеквизита)
	РежимГруппировки = ИмяКолонкиРеквизита;
	Список.Группировка.Элементы.Очистить();
	Если НЕ ПустаяСтрока(ИмяКолонкиРеквизита) Тогда
		ПолеГруппировки = Список.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиРеквизита);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере()
	
	БизнесПроцессыИЗадачиСервер.УстановитьПараметрыСпискаМоихЗадач(Список);
	// Цвет просроченных задач зависит от значения текущей даты,
	// поэтому нужно переинициализировать условное оформление.
	УстановитьУсловноеОформление();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	СгруппироватьПоКолонкеНаСервере(Настройки["РежимГруппировки"]);
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекКомпоновкиДанныхНастройкиОтборПриИзменении(Элемент)
	
	УстановитьОтборЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоИсполнителю(Команда)
	СгруппироватьПоКолонке("Исполнитель");
КонецПроцедуры

&НаСервере
Процедура СписокПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
КонецПроцедуры

Процедура ОбновитьИнфоСтроку()
	
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель") Тогда
			ПользовательДляОтбора = ЭлементОтбора.ПравоеЗначение;
			
			Прервать;
	    КонецЕсли;
	КонецЦикла;
	
	КоличествоЗаданий = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Список.ТекстЗапроса;
	Запрос.Текст = Запрос.Текст + "
	| 	И ЗадачаИсполнителя.Выполнена = &Выполнена";
	
	Если ЗначениеЗаполнено(ПользовательДляОтбора) Тогда
		Запрос.Текст = Запрос.Текст + "
		| И ЗадачаИсполнителя.Исполнитель = &Исполнитель";
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Выполнена", Ложь);
	Запрос.Параметры.Вставить("Исполнитель", ПользовательДляОтбора);
	Для Каждого Строка Из Список.Параметры.Элементы Цикл
		Запрос.Параметры.Вставить(Строка(Строка.Параметр), Строка.Значение);
	КонецЦикла;
	
	ТабЗаданий = Запрос.Выполнить().Выгрузить();
	КоличествоЗаданий = ТабЗаданий.Количество();
	КоличествоЗаданийПросрочено = ТабЗаданий.Итог("КоличествоНеВСрок");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПисемПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПисемПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Взаимодействие) Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Взаимодействие);
		
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Предмет) Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Предмет);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПисемКоманда()
	
	ИспользоватьПозиционированиеВСписке = Ложь;
	
	Если Элементы.ДеревоПисем.ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные = Строка(Элементы.ДеревоПисем.ТекущиеДанные.Предмет) + " " + Строка(Элементы.ДеревоПисем.ТекущиеДанные.Взаимодействие);  //Элементы.ДеревоПисем.ТекущиеДанные.Ссылка; 
		мОтбор = Новый Структура("Ссылка", ТекущиеДанные);
		
		ИспользоватьПозиционированиеВСписке = Истина;
	КонецЕсли;
	
	
	ИспользуетсяНоваяВерсияСпискаПисем = аэОбщийМодульСервер.ИспользуетсяНоваяВерсияСпискаПисем();
	
	Если ИспользуетсяНоваяВерсияСпискаПисем Тогда
		ПолучитьДеревоПисем_v2(ПолучитьТекущуюПапку());
	Иначе
		ПолучитьДеревоПисем();
	КонецЕсли;
	
	Если СписокПисемСвернут Тогда
		РазвернутьДеревоПочтыКоманда();
	Иначе
		СвернутьДеревоПочтыКоманда();
	КонецЕсли;
	
	Если ИспользоватьПозиционированиеВСписке Тогда
		ИдентификаторСтроки = 0; 
		ПрекратитьПоиск = Ложь; 
		НайтиСтрокуДерева(ДеревоПисем.ПолучитьЭлементы(), ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск); 
		Элементы.ДеревоПисем.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПисем(Команда)
	ОбновитьСписокПисемКоманда();
	
КонецПроцедуры

&НаКлиенте 
Процедура НайтиСтрокуДерева(КоллекцияЭлементовДерева, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск) 

	Для Каждого СтрокаДерева Из КоллекцияЭлементовДерева Цикл 
		Если ПрекратитьПоиск Тогда 
		Возврат; 
	КонецЕсли; 

	Если Строка(СтрокаДерева.Предмет) + " " + Строка(СтрокаДерева.Взаимодействие) = ТекущиеДанные Тогда 
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор(); 
	ПрекратитьПоиск = Истина; 
	Возврат; 
КонецЕсли; 

КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы(); 

Если КоллекцияЭлементов.Количество() > 0 Тогда 
 НайтиСтрокуДерева(КоллекцияЭлементов, ТекущиеДанные, ИдентификаторСтроки, ПрекратитьПоиск); 
КонецЕсли; 
КонецЦикла; 

КонецПроцедуры 

&НаСервере
Процедура ПолучитьДеревоПисем_v2(Папка)
	
	Дата = Константы.аэДатаНачалаЧтенияВходящейЭлектроннойПочты.Получить();
	
	ВремДеревоПисем = Новый ДеревоЗначений;
	ВремДеревоПисем.Колонки.Добавить("Предмет");
	ВремДеревоПисем.Колонки.Добавить("Взаимодействие");
	ВремДеревоПисем.Колонки.Добавить("Дата");
	ВремДеревоПисем.Колонки.Добавить("Ответственный");
	ВремДеревоПисем.Колонки.Добавить("НомерКартинки");
	ВремДеревоПисем.Колонки.Добавить("ОтправительПредставление");
	ВремДеревоПисем.Колонки.Добавить("Рассмотрено");
	ВремДеревоПисем.Колонки.Добавить("РассмотретьПосле");
	ВремДеревоПисем.Колонки.Добавить("ЭтоПредмет");
	ВремДеревоПисем.Колонки.Добавить("Отклонено");
	ВремДеревоПисем.Колонки.Добавить("ПредметВзаимодействие");
	ВремДеревоПисем.Колонки.Добавить("СрокИсполнения");
	ВремДеревоПисем.Колонки.Добавить("Статус");
	ВремДеревоПисем.Колонки.Добавить("СтатусКартинкой");
	ВремДеревоПисем.Колонки.Добавить("Содержание");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("ТолькоНеРассмотренные", ТолькоНеРассмотренные);
	Запрос.УстановитьПараметр("ОтправительОтбор", СокрЛП(ОтправительДляОтбора.Наименование) + "%");
	Запрос.УстановитьПараметр("ПапкаЭлектронногоПисьма", Папка);
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет,
	|	ЭлектронноеПисьмоВходящее.Дата КАК Дата
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящее.Ссылка)
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВЫБОР
	|			КОГДА &ТолькоНеРассмотренные
	|				ТОГДА НЕ ПредметыПапкиВзаимодействий.Рассмотрено
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	Если ЗначениеЗаполнено(Папка) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = &ПапкаЭлектронногоПисьма";
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтправительДляОтбора) Тогда
		Запрос.Текст = Запрос.Текст  + "
		|	И ПредметыПапкиВзаимодействий.Взаимодействие.ОтправительПредставление ПОДОБНО &ОтправительОтбор";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ"
	;
	
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	МассивПредметов = ТабРезультат.ВыгрузитьКолонку("Предмет");
	МассивВзяли = Новый Массив;
	
	ЗапросПодробно = Новый Запрос;
	ЗапросПодробно.УстановитьПараметр("МассивПредметов", МассивПредметов);
	ЗапросПодробно.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Рассмотрено,
	|	ПОДСТРОКА(ПредметыПапкиВзаимодействий.Взаимодействие.Текст, 1, 200) КАК Содержание,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Дата КАК Дата,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Ответственный КАК Ответственный,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.ОтправительПредставление КАК ОтправительПредставление,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Отклонено КАК Отклонено
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет В(&МассивПредметов)"
	;
	
	ВыборкаПодробно = ЗапросПодробно.Выполнить().Выбрать();
	
	аэОбщийМодульСервер.ПодготовитьДеревоВзаимодействий(МассивПредметов, МассивВзяли, ВремДеревоПисем, ВыборкаПодробно);
	
	ЗначениеВРеквизитФормы(ВремДеревоПисем, "ДеревоПисем");

КонецПроцедуры
&НаСервере
Процедура ПолучитьДеревоПисем()
	Возврат;
	Дата = Константы.аэДатаНачалаЧтенияВходящейЭлектроннойПочты.Получить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("ТолькоНеРассмотренные", ТолькоНеРассмотренные);
	Запрос.УстановитьПараметр("ОтправительОтбор", СокрЛП(ОтправительДляОтбора.Наименование) + "%");
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.Предмет
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ВЫБОР
	|			КОГДА &ТолькоНеРассмотренные
	|				ТОГДА НЕ ПредметыПапкиВзаимодействий.Рассмотрено
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|";
	
	Если ЗначениеЗаполнено(ОтправительДляОтбора) Тогда
		Запрос.Текст = Запрос.Текст  + "
		|	И ПредметыПапкиВзаимодействий.Взаимодействие.ОтправительПредставление ПОДОБНО &ОтправительОтбор";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст  + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредметыПапкиВзаимодействий.Предмет КАК Предмет,
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Рассмотрено,
	|	ПредметыПапкиВзаимодействий.РассмотретьПосле,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Дата КАК Дата,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Ответственный КАК Ответственный,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.ОтправительПредставление КАК ОтправительПредставление,
	|	ЛОЖЬ КАК ЭтоПредмет,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПредметыПапкиВзаимодействий.Взаимодействие) = ТИП(Документ.ЭлектронноеПисьмоВходящее)
	|			ТОГДА ВЫБОР
	|					КОГДА ПредметыПапкиВзаимодействий.Взаимодействие.ПометкаУдаления
	|						ТОГДА 13
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ПредметыПапкиВзаимодействий.Взаимодействие) = ТИП(Документ.ТелефонныйЗвонок)
	|					ТОГДА ВЫБОР
	|							КОГДА ПредметыПапкиВзаимодействий.Взаимодействие.ПометкаУдаления
	|								ТОГДА 12
	|							ИНАЧЕ 2
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(ПредметыПапкиВзаимодействий.Взаимодействие) = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	|							ТОГДА ВЫБОР
	|									КОГДА ПредметыПапкиВзаимодействий.Взаимодействие.ПометкаУдаления
	|										ТОГДА 14
	|									ИНАЧЕ 4
	|								КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК НомерКартинки,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Отклонено КАК Отклонено,
	|	ПредметыПапкиВзаимодействий.Взаимодействие КАК ПредметВзаимодействие
	|ИЗ
	|	вт КАК вт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоВходящееПрисоединенныеФайлы
	|			ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.ВладелецФайла
	|		ПО вт.Предмет = ПредметыПапкиВзаимодействий.Предмет
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредметыПапкиВзаимодействий.Предмет,
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Рассмотрено,
	|	ПредметыПапкиВзаимодействий.РассмотретьПосле,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Дата,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Ответственный,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.ОтправительПредставление,
	|	ПредметыПапкиВзаимодействий.Взаимодействие.Отклонено,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПредметыПапкиВзаимодействий.Взаимодействие) = ТИП(Документ.ЭлектронноеПисьмоВходящее)
	|			ТОГДА ВЫБОР
	|					КОГДА ПредметыПапкиВзаимодействий.Взаимодействие.ПометкаУдаления
	|						ТОГДА 13
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ПредметыПапкиВзаимодействий.Взаимодействие) = ТИП(Документ.ТелефонныйЗвонок)
	|					ТОГДА ВЫБОР
	|							КОГДА ПредметыПапкиВзаимодействий.Взаимодействие.ПометкаУдаления
	|								ТОГДА 12
	|							ИНАЧЕ 2
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(ПредметыПапкиВзаимодействий.Взаимодействие) = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	|							ТОГДА ВЫБОР
	|									КОГДА ПредметыПапкиВзаимодействий.Взаимодействие.ПометкаУдаления
	|										ТОГДА 14
	|									ИНАЧЕ 4
	|								КОНЕЦ
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ПредметыПапкиВзаимодействий.Взаимодействие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ
	|ИТОГИ ПО
	|	Предмет"
	;
	
	ТекДерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ТекДерево.Колонки.Добавить("СрокИсполнения");
	Для каждого Строка Из ТекДерево.Строки Цикл
		Если Не ЗначениеЗаполнено(Строка.Взаимодействие) Тогда
			Строка.ЭтоПредмет = Истина;
			Строка.ПредметВзаимодействие = Строка.Предмет;
			Строка.Отклонено = Строка.Предмет.Отклонено;
			Если ТипЗнч(Строка.Предмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				Строка.ОтправительПредставление = Строка.Предмет.АбонентПредставление;
			ИначеЕсли ТипЗнч(Строка.Предмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
				Строка.ОтправительПредставление = Строка.Предмет.ОтправительПредставление;
				Строка.Ответственный = Строка.Предмет.Ответственный;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТекДерево, "ДеревоПисем"); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронноеПисьмо(Команда)
	
	СоздатьНовоеВзаимодействие("ЭлектронноеПисьмоИсходящее");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеВзаимодействие(ТипОбъекта)

	ЗначенияЗаполнения = Новый Структура("Предмет,Контакт",ПредметДляОтбора,Контакт);
	
	ВзаимодействияКлиент.СоздатьНовоеВзаимодействие(
	          ТипОбъекта,
	          Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения),
	          ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьВстречу(Команда)
	
	СоздатьНовоеВзаимодействие("Встреча");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапланированноеВзаимодействие(Команда)
	
	СоздатьНовоеВзаимодействие("ЗапланированноеВзаимодействие");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСообщениеSMS(Команда)
	
	СоздатьНовоеВзаимодействие("СообщениеSMS");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТелефонныйЗвонок(Команда)
	
	СоздатьНовоеВзаимодействие("ТелефонныйЗвонок");
	
КонецПроцедуры

&НаКлиенте
// Установить флаг "Рассмотрено" в выбранных взаимодействиях - клиентская часть.
Процедура РассмотреноВыполнить(Команда)
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ФлагРассмотрено = (Не Команда.Имя = "НеРассмотрено");
	
	ВыполненаЗамена = Ложь;
	УстановитьФлагРассмотрено(ВыполненаЗамена, ФлагРассмотрено);
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПочта Тогда
		
		Если ВыполненаЗамена Тогда
			
			Элементы.ДеревоПисем.Обновить();
			
		КонецЕсли;
		
	Иначе
		
		//Если ВыполненаЗамена Тогда
		//	РазвернутьВсеСтрокиДереваПисем();
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереобновитьДеревоПисем()
	
	ВремДеревоПисем = РеквизитФормыВЗначение("ДеревоПисем");
	ЗначениеВРеквизитФормы(ВремДеревоПисем, "ДеревоПисем");
КонецПроцедуры

&НаКлиенте
Функция ВыборКорректен()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПочта Тогда
		
		Если Элементы.ДеревоПисем.ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого Элемент Из Элементы.ДеревоПисем.ВыделенныеСтроки Цикл
			Если ТипЗнч(Элемент) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		//Если Элементы.ДеревоВзаимодействий.ВыделенныеСтроки.Количество() = 0 Тогда
		//	Возврат Ложь;
		//Иначе
		//	Возврат Истина;
		//КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Установить флаг "Рассмотрено" в выбранных взаимодействиях - серверная часть.
Процедура УстановитьФлагРассмотрено(ВыполненаЗамена, ФлагРассмотрено)
	
	ВыполненаЗамена = Ложь;
	МассивВзаимодействий = Новый Массив;
	
	ПометкаВзаимодействийПоПредмету = Ложь;
		
	ВыделенныеСтроки = Элементы.ДеревоПисем.ВыделенныеСтроки;
	
	Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
	
		ЭлементДерева = ДеревоПисем.НайтиПоИдентификатору(Взаимодействие);
		Если ЭлементДерева.ЭтоПредмет Тогда
			
			ЭлементДерева.СтатусКартинкой = аэОбщийМодульСервер.ОпределитьСтатусДокументаРассмотрено(ЭлементДерева.Взаимодействие, ФлагРассмотрено);
			МассивВзаимодействий.Добавить(ЭлементДерева.Взаимодействие);
			ЭлементДерева.Рассмотрено = ФлагРассмотрено;
			
			ПометкаВзаимодействийПоПредмету = Истина;
			ПодчиненныеЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
			Для каждого ПодчиненныйЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				Если ТипЗнч(ПодчиненныйЭлементДерева.Взаимодействие) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда	
					Если ПодчиненныйЭлементДерева <> Неопределено И (НЕ ПодчиненныйЭлементДерева.Рассмотрено = ФлагРассмотрено) Тогда
						МассивВзаимодействий.Добавить(ПодчиненныйЭлементДерева.Взаимодействие);
						ПодчиненныйЭлементДерева.СтатусКартинкой = аэОбщийМодульСервер.ОпределитьСтатусДокументаРассмотрено(ПодчиненныйЭлементДерева.Взаимодействие, ФлагРассмотрено);
						ПодчиненныйЭлементДерева.Рассмотрено = ФлагРассмотрено;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ТипЗнч(ЭлементДерева.Взаимодействие) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда	
				Если ЭлементДерева <> Неопределено И (НЕ ЭлементДерева.Рассмотрено = ФлагРассмотрено) Тогда
					МассивВзаимодействий.Добавить(ЭлементДерева.Взаимодействие);
					ЭлементДерева.СтатусКартинкой = аэОбщийМодульСервер.ОпределитьСтатусДокументаРассмотрено(ЭлементДерева.Взаимодействие, ФлагРассмотрено);
					ЭлементДерева.Рассмотрено = ФлагРассмотрено;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Взаимодействия.УстановитьПризнакРассмотрено(МассивВзаимодействий,ФлагРассмотрено, ВыполненаЗамена);
	Для Сч = 0 По МассивВзаимодействий.Количество() - 1 Цикл
		Если ЗначениеЗаполнено(МассивВзаимодействий[Сч]) Тогда
			ВзаимодействиеОбъект = МассивВзаимодействий[Сч].ПолучитьОбъект();
			ВзаимодействиеОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ВзаимодействиеОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Установить флаг "Отклонено" в выбранных взаимодействиях - серверная часть.
Процедура УстановитьФлагОтклонено(ВыполненаЗамена)
	
	ВыполненаЗамена = Ложь;
	МассивВзаимодействий = Новый Массив;
	
	ПометкаВзаимодействийПоПредмету = Ложь;
		
	ВыделенныеСтроки = Элементы.ДеревоПисем.ВыделенныеСтроки;
	
	Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
	
		ЭлементДерева = ДеревоПисем.НайтиПоИдентификатору(Взаимодействие);
		Если ЭлементДерева.ЭтоПредмет Тогда
			
			МассивВзаимодействий.Добавить(ЭлементДерева.Взаимодействие);
			ЭлементДерева.Отклонено = НЕ ЭлементДерева.Отклонено;
			ПометкаВзаимодействийПоПредмету = Истина;
			ПодчиненныеЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
			Для каждого ПодчиненныйЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				Если ТипЗнч(ПодчиненныйЭлементДерева.Взаимодействие) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
					Если ПодчиненныйЭлементДерева <> Неопределено  Тогда  // И (НЕ ПодчиненныйЭлементДерева.Отклонено)
						МассивВзаимодействий.Добавить(ПодчиненныйЭлементДерева.Взаимодействие);
						ПодчиненныйЭлементДерева.Отклонено = НЕ ПодчиненныйЭлементДерева.Отклонено;
						ПодчиненныйЭлементДерева.Рассмотрено = Истина;
						
						ВыполненаЗамена = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
				
			Если ЭлементДерева <> Неопределено  Тогда   // И (НЕ ЭлементДерева.Отклонено)
				МассивВзаимодействий.Добавить(ЭлементДерева.Взаимодействие);
				ЭлементДерева.Отклонено = НЕ ЭлементДерева.Отклонено;
				ЭлементДерева.Рассмотрено = Истина;
				
				ВыполненаЗамена = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Взаимодействия.УстановитьПризнакРассмотрено(МассивВзаимодействий,Истина, ВыполненаЗамена);
	Для Сч = 0 По МассивВзаимодействий.Количество() - 1 Цикл
		Если ЗначениеЗаполнено(МассивВзаимодействий[Сч]) Тогда
			ВзаимодействиеОбъект = МассивВзаимодействий[Сч].ПолучитьОбъект();
			ВзаимодействиеОбъект.Отклонено = НЕ ВзаимодействиеОбъект.Отклонено;
			ВзаимодействиеОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			ВзаимодействиеОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеСтрокиДереваПисем()

	Для каждого СтрокаВерхнегоУровня Из ДеревоПисем.ПолучитьЭлементы() Цикл
		//Проверка подчиненных строк. Если все строки обработаны, устанавливается пометка обработано у предмета
		
		Элементы.ДеревоПисем.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Нерассмотренные(Команда)
	
	Элементы.ДеревоПисемНерассмотренные.Пометка = Не Элементы.ДеревоПисемНерассмотренные.Пометка;
	ТолькоНеРассмотренные = Не ТолькоНеРассмотренные;
	ИспользуетсяНоваяВерсияСпискаПисем = аэОбщийМодульСервер.ИспользуетсяНоваяВерсияСпискаПисем();
	
	Если ИспользуетсяНоваяВерсияСпискаПисем Тогда
		ПолучитьДеревоПисем_v2(ПолучитьТекущуюПапку());
	Иначе
		ПолучитьДеревоПисем();
	КонецЕсли;
	
	РазвернутьВсеСтрокиДереваПисем();
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьИзСодержанияВФорматированныйТекст()
	Если Не ЗначениеЗаполнено(ТекущееВзаимодействие) Тогда
		ТекстВозврат = "";
	Иначе
		Если ТипЗнч(ТекущееВзаимодействие) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			
			ТекстВозврат = Взаимодействия.ОбработатьТекстHTML(ТекущееВзаимодействие.Ссылка); //ТекущееВзаимодействие.ТекстHTML;
			
		ИначеЕсли ТипЗнч(ТекущееВзаимодействие) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			
			ТекстВозврат = ТекущееВзаимодействие.Описание;
			
		ИначеЕсли ТипЗнч(ТекущееВзаимодействие) = Тип("СправочникСсылка.узЗадачи") Тогда
			
			ТекстHTML = "";
			Вложения = Новый Структура;
			ТекущееВзаимодействие.Содержание.Получить().ПолучитьHTML(ТекстHTML, Вложения);
			ТекстВозврат = ТекстHTML;
			
		ИначеЕсли ТипЗнч(ТекущееВзаимодействие) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			ТекстВозврат = ТекущееВзаимодействие.Описание;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстВозврат;
КонецФункции 

&НаКлиенте
Процедура ПоказатьСкрытьСодержание(Команда)
	Элементы.ПоказатьСкрытьСодержание.Пометка = НЕ Элементы.ПоказатьСкрытьСодержание.Пометка;
	УстановитьВидимостьДоступностьГруппаПочта();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьГруппаПочта()
	ВидимостьСодержанияПочты = Элементы.ПоказатьСкрытьСодержание.Пометка;
	Элементы.Содержание.Видимость = ВидимостьСодержанияПочты;
	
	//ВидимостьВзаимодействияПочты = Элементы.ПоказатьСкрытьВзаимодействия.Пометка;
	//Элементы.ДеревоВзаимодействий.Видимость = НЕ ВидимостьВзаимодействияПочты;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступностьГруппаВзаимодействия()
	ВидимостьВзаимодействияПочты = Элементы.ПоказатьСкрытьВзаимодействия.Пометка;
	Элементы.ДеревоВзаимодействий.Видимость = НЕ ВидимостьВзаимодействияПочты;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПисемПриАктивизацииСтроки(Элемент)
	Попытка
		ТекущееВзаимодействие = Элементы.ДеревоПисем.ТекущиеДанные.Взаимодействие;
		ФорматированныйТекстСодержаниеПисьма = Неопределено;
		
		//ПодключитьОбработчикОжидания("Подключаемый_Отобразить_ДервоВзаимодействий_Почта", 1, Истина);
		Если ЗначениеЗаполнено(ТекущееВзаимодействие) Тогда
			
			Если Элементы.Содержание.Видимость Тогда
				
				ФорматированныйТекстСодержаниеПисьма = ЗагрузитьИзСодержанияВФорматированныйТекст();
				
			КонецЕсли;
	        
		КонецЕсли;
	Исключение
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Отобразить_ДервоВзаимодействий_Почта()
	//Если Элементы.ДеревоВзаимодействий.Видимость Тогда
	//	ЗаполнитьДеревоВзаимодействий();
	//	Для каждого ЭлементДерева Из ДеревоВзаимодействий.ПолучитьЭлементы() Цикл
	//		Элементы.ДеревоВзаимодействий.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	//	КонецЦикла;
	//	УстановитьУсловноеОформлениеДляДереваВзаимодействийПочта();
	//	ОтключитьОбработчикОжидания("Подключаемый_Отобразить_ДервоВзаимодействий_Почта");
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоВзаимодействий()
	Если Не ЗначениеЗаполнено(ТекущееВзаимодействие) Тогда
		Возврат;
	КонецЕсли;
	
	ВремДерево = аэОбщийМодульСервер.ЗаполнитьДеревоВзаимодействий(ТекущееВзаимодействие);
	//ТаблицаВзаимодействий = Новый ТаблицаЗначений;
	//ТаблицаВзаимодействий.Колонки.Добавить("Основание");
	//ТаблицаВзаимодействий.Колонки.Добавить("Подчиненный");
	//
	//ПредметОснование = Неопределено;
	//
	//НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Взаимодействие.Установить(ТекущееВзаимодействие);
	//НаборЗаписей.Прочитать();
	//Если НаборЗаписей.Количество() > 0 Тогда
	//	ПредметОснование = НаборЗаписей[0].Предмет;
	//Иначе
	//	ПредметОснование = ТекущееВзаимодействие.Предмет;
	//КонецЕсли;
	//
	//НС = ТаблицаВзаимодействий.Добавить();
	//НС.Основание = ПредметОснование;
	//НС.Подчиненный = ТекущееВзаимодействие;
	//
	//ДобавитьПодчиненныхПоВладельцу(ТекущееВзаимодействие, Истина, ТаблицаВзаимодействий);
	//ОбработатьПодчиненныхВладельцев(ТаблицаВзаимодействий);
	//
	//ТаблицаВзаимодействий.Сортировать("Основание Убыв, Подчиненный Убыв");
	//ВремДерево = ВыгрузитьТаблицуЗначенийВДеревоЗначений(ТаблицаВзаимодействий);
	//ЗначениеВРеквизитФормы(ВремДерево, "ДеревоВзаимодействий");

КонецПроцедуры

&НаСервере
Функция ВыгрузитьТаблицуЗначенийВДеревоЗначений(ТаблицаВзаимодействий) Экспорт

    Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Взаимодействие");
	Дерево.Колонки.Добавить("ЭтоТекущееВзаимодействие");
	
	//Корневые элементы
	Структура = Новый Структура("Основание", Неопределено);
		
	НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(Структура);
	Для Сч = 0 По НайденныеСтроки.Количество() - 1 Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Взаимодействие = НайденныеСтроки[Сч].Подчиненный;
		НоваяСтрока.ЭтоТекущееВзаимодействие = (НоваяСтрока.Взаимодействие = ТекущееВзаимодействие);
		ТаблицаВзаимодействий.Удалить(ТаблицаВзаимодействий.Индекс(НайденныеСтроки[Сч]));
	КонецЦикла;
	
	//Все оставшиеся элементы
	Пока ТаблицаВзаимодействий.Количество() > 0 Цикл
		
		МассивУдалить = Новый Массив;
		Для Каждого Строка Из ТаблицаВзаимодействий Цикл
			
			Структура = Новый Структура("Взаимодействие", Строка.Основание);
			МассивСтрок = Дерево.Строки.НайтиСтроки(Структура, Истина);
			
			Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
				
				НоваяСтрока = МассивСтрок[Сч].Строки.Добавить();
				НоваяСтрока.Взаимодействие = Строка.Подчиненный;
				НоваяСтрока.ЭтоТекущееВзаимодействие = (НоваяСтрока.Взаимодействие = ТекущееВзаимодействие);
				
				Если МассивУдалить.Найти(Строка) = Неопределено Тогда
					МассивУдалить.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;			
			
		КонецЦикла;	
		
		Если МассивУдалить.Количество() > 0 Тогда
			Для Сч = 0 По МассивУдалить.Количество() - 1 Цикл
				ТаблицаВзаимодействий.Удалить(ТаблицаВзаимодействий.Индекс(МассивУдалить[Сч]));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции //ВыгрузитьТаблицуЗначенийВДеревоЗначений()

&НаСервере
Процедура ОбработатьПодчиненныхВладельцев(ТаблицаВзаимодействий)
	
	Пока Истина Цикл
		
		ЕстьИзменения = Ложь;
		
		МассивОснование = ПодготовитьМассивПоПолюТаблицы("Основание", ТаблицаВзаимодействий);
		МассивПодчиненный = ПодготовитьМассивПоПолюТаблицы("Подчиненный", ТаблицаВзаимодействий);
		
		Для Сч = 0 По МассивОснование.Количество() - 1 Цикл
			ДобавитьПодчиненныхПоВладельцу(МассивОснование[Сч], ЕстьИзменения, ТаблицаВзаимодействий);
		КонецЦикла;
		
		Для Сч = 0 По МассивПодчиненный.Количество() - 1 Цикл
			ДобавитьПодчиненныхПоВладельцу(МассивПодчиненный[Сч], ЕстьИзменения, ТаблицаВзаимодействий);
		КонецЦикла;
		
		ДобавитьВладельцевПоПодчиненным(МассивОснование, ЕстьИзменения, ТаблицаВзаимодействий);

		ДобавитьВладельцевПоПодчиненным(МассивПодчиненный, ЕстьИзменения, ТаблицаВзаимодействий);
		
		Если Не ЕстьИзменения Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаВзаимодействий.Сортировать("Основание Возр, Подчиненный Возр");
КонецПроцедуры

&НаСервере
Функция ПодготовитьМассивПоПолюТаблицы(ИмяПоля, ТаблицаВзаимодействий)

	ВремТаб = ТаблицаВзаимодействий.Скопировать();
	ВремТаб.Свернуть(ИмяПоля, "");
	
	Возврат ВремТаб.ВыгрузитьКолонку(ИмяПоля);
	
КонецФункции

&НаСервере
Процедура ДобавитьПодчиненныхПоВладельцу(Ссылка, ЕстьИзменения, ТаблицаВзаимодействий)
	
	МассивСсылок = КритерииОтбора.СвязанныеДокументы.Найти(Ссылка);
	
	Для Сч = 0 По МассивСсылок.Количество() - 1 Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", Ссылка);
		СтруктураПоиска.Вставить("Подчиненный", МассивСсылок[Сч]);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
		    ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = Ссылка;
			НС.Подчиненный = МассивСсылок[Сч];
			
		КонецЕсли;
		
	КонецЦикла;
	
	//2.Добавляются через р/св Предметы папки взаимодействий
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Предмет
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Предмет = &Предмет
	|	И ПредметыПапкиВзаимодействий.Взаимодействие <> ПредметыПапкиВзаимодействий.Предмет"
	;
	
	ТабПредметов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТабПредметов Цикл
		
		СтрокаПредмет = Строка.Предмет;
		СтрокаВзаимодействие = ?(Строка.Предмет = Строка.Взаимодействие, Неопределено, Строка.Взаимодействие);
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", СтрокаПредмет);
		СтруктураПоиска.Вставить("Подчиненный", СтрокаВзаимодействие);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = СтрокаПредмет;
			НС.Подчиненный = СтрокаВзаимодействие;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВладельцевПоПодчиненным(Массив, ЕстьИзменения, ТаблицаВзаимодействий)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Массив", Массив);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.Предмет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка В (&Массив)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка,
	|	ТелефонныйЗвонок.Предмет
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.Ссылка В (&Массив)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	узЗадачи.Ссылка,
	|	узЗадачи.Предмет
	|ИЗ
	|	Справочник.узЗадачи КАК узЗадачи
	|ГДЕ
	|	узЗадачи.Ссылка В (&Массив)"
	;
	
	ТабПредметов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТабПредметов Цикл
		Если Не ЗначениеЗаполнено(Строка.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", Строка.Предмет);
		СтруктураПоиска.Вставить("Подчиненный", Строка.Ссылка);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = Строка.Предмет;
			НС.Подчиненный = Строка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	
	//2.Добавляются через р/св Предметы папки взаимодействий
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Массив", Массив);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие,
	|	ПредметыПапкиВзаимодействий.Предмет
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.Взаимодействие В (&Массив)"
	;
	
	ТабПредметов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ТабПредметов Цикл
		
		СтрокаПредмет = ?(Строка.Предмет = Строка.Взаимодействие, Неопределено, Строка.Предмет);
		СтрокаВзаимодействие = Строка.Взаимодействие;
		
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Основание", СтрокаПредмет);
		СтруктураПоиска.Вставить("Подчиненный", СтрокаВзаимодействие);
		
		НайденныеСтроки = ТаблицаВзаимодействий.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ЕстьИзменения = Истина;
			
			НС = ТаблицаВзаимодействий.Добавить();
			НС.Основание = СтрокаПредмет;
			НС.Подчиненный = СтрокаВзаимодействие;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПисемВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	ЗагрузитьИзСодержанияВФорматированныйТекст();
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполненаЗамена = Ложь;
	УстановитьФлагОтклонено(ВыполненаЗамена);
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПочта Тогда
		
		Если ВыполненаЗамена Тогда
			Элементы.ДеревоПисем.Обновить();

		КонецЕсли;
		
	Иначе
		
		//Если ВыполненаЗамена Тогда
		//	РазвернутьВсеСтрокиДереваПисем();
		//КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВзаимодействия(Команда)
	ЗаполнитьДеревоВзаимодействий();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьВзаимодействия(Команда)
	Элементы.ПоказатьСкрытьВзаимодействия.Пометка = НЕ Элементы.ПоказатьСкрытьВзаимодействия.Пометка;
	УстановитьВидимостьДоступностьГруппаВзаимодействия();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Взаимодействие) Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Взаимодействие);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоПочтыКоманда()
	Для каждого ЭлементДерева Из ДеревоПисем.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПисем.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоПочты(Команда)
	СписокПисемСвернут = Истина;
	СвернутьДеревоПочтыКоманда();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоПочтыКоманда()
	Для каждого ЭлементДерева Из ДеревоПисем.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПисем.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоПочты(Команда)
	СписокПисемСвернут = Ложь;
	РазвернутьДеревоПочтыКоманда();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ВыбПараметры = Новый Структура;
	ВыбПараметры.Вставить("ДатаНачала", Объект.ДатаНачала);
	ВыбПараметры.Вставить("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РезультатВыбораПериода",ЭтотОбъект);
    ОткрытьФорму("ОбщаяФорма.ФормаВыбораПериода",ВыбПараметры,,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыбораПериода(Результат, ДополнительныеПараметры) Экспорт
	РезультатВыбораПериодаНаСервере(Результат, ДополнительныеПараметры);
	ИспользуетсяНоваяВерсияСпискаПисем = аэОбщийМодульСервер.ИспользуетсяНоваяВерсияСпискаПисем();
	
	Если ИспользуетсяНоваяВерсияСпискаПисем Тогда
		ПолучитьДеревоПисем_v2(ПолучитьТекущуюПапку());
	Иначе
		ПолучитьДеревоПисем();
	КонецЕсли;
	РазвернутьВсеСтрокиДереваПисем();
КонецПроцедуры

&НаСервере
Процедура РезультатВыбораПериодаНаСервере(Результат, ДополнительныеПараметры)

	Если Результат <> Неопределено Тогда
		Объект.ДатаНачала = Результат.ДатаНачала;
		Объект.ДатаОкончания = КонецДня(Результат.ДатаОкончания); 
		
		ПериодСтрокой = ПредставлениеПериода(Объект.ДатаНачала, Объект.ДатаОкончания,"ФП=истина");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправительДляОтбораПриИзменении(Элемент)
	
	ИспользуетсяНоваяВерсияСпискаПисем = аэОбщийМодульСервер.ИспользуетсяНоваяВерсияСпискаПисем();
	
	Если ИспользуетсяНоваяВерсияСпискаПисем Тогда
		ПолучитьДеревоПисем_v2(ПолучитьТекущуюПапку());
	Иначе
		ПолучитьДеревоПисем();
	КонецЕсли;
	РазвернутьВсеСтрокиДереваПисем();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьТекущиеДела(Команда)
	ОбновитьТекущиеДелаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущиеДелаНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.ОбновитьНаСервере();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТекущиеДелаНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.ЗаполнитьТекущиеДела();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры 

&НаСервере
Процедура СохранитьТекущиеДелаНаСервере()
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.СохранитьТекущиеДела();
	ЗначениеВРеквизитФормы(пОбъект,"Объект");
КонецПроцедуры 

&НаКлиенте
Процедура ТЧТекущиеДелаПриИзменении(Элемент)
	СтрокаТЧТекущиеДела = Элемент.ТекущиеДанные;
	Если СтрокаТЧТекущиеДела <> Неопределено Тогда
		СтрокаТЧТекущиеДела.Порядок = СтрокаТЧТекущиеДела.НомерСтроки;
	Конецесли;
КонецПроцедуры


&НаКлиенте
Процедура НаДатуПриИзменении(Элемент)
	ЗаполнитьТекущиеДелаНаСервере();
КонецПроцедуры


&НаСервере
Процедура ТЧТекущиеДелаПередУдалениемНаСервере(МассивТекущихДел)
	пОбъект = РеквизитФормыВЗначение("Объект"); 
	пОбъект.УбратьТекущееДело(МассивТекущихДел);
КонецПроцедуры


&НаКлиенте
Процедура ТЧТекущиеДелаПередУдалением(Элемент, Отказ)
	МассивВыделенныхСтрок = Элемент.ВыделенныеСтроки;
	МассивТекущихДел = ПолучитьМассивТекущихДелПоВыделеннымСтрокам(МассивВыделенныхСтрок);
	ТЧТекущиеДелаПередУдалениемНаСервере(МассивТекущихДел);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивТекущихДелПоВыделеннымСтрокам(МассивВыделенныхСтрок)
	МассивТекущихДел = Новый Массив();
	Для каждого ЭлМассиваВыделенныхСтрок из МассивВыделенныхСтрок цикл
		ИдентификаторСтроки = ЭлМассиваВыделенныхСтрок;
		
		СтрокаТЧТекущиеДела = Объект.ТЧТекущиеДела.НайтиПоИдентификатору(ИдентификаторСтроки);
		пТекущееДело = СтрокаТЧТекущиеДела.ТекущееДело;
		МассивТекущихДел.Добавить(пТекущееДело);
	Конеццикла;	
	Возврат МассивТекущихДел;
КонецФункции

&НаКлиенте
Процедура КомандаВыполнил(Команда)
	МассивВыделенныхСтрок = Элементы.ТЧТекущиеДела.ВыделенныеСтроки;
	Для каждого ЭлМассиваВыделенныхСтрок из МассивВыделенныхСтрок цикл
	    ИдентификаторСтроки = ЭлМассиваВыделенныхСтрок;
		
		СтрокаТЧТекущиеДела = Объект.ТЧТекущиеДела.НайтиПоИдентификатору(ИдентификаторСтроки);			
		Если СтрокаТЧТекущиеДела.Выполнено Тогда
			Продолжить;
		Конецесли;
		СтрокаТЧТекущиеДела.ДатаВыполнения = ТекущаяДата();
		СтрокаТЧТекущиеДела.Выполнено = Истина;
	Конеццикла;	
	
	Для каждого СтрокаТЧТекущиеДела из Объект.ТЧТекущиеДела цикл
		пПорядокДоп = ПолучитьПорядоДопНаКлиенте(СтрокаТЧТекущиеДела.Выполнено,СтрокаТЧТекущиеДела.ДатаВыполнения,Объект.НаДату);	
		СтрокаТЧТекущиеДела.ПорядокДоп = пПорядокДоп;	
	Конеццикла;
	
	Объект.ТЧТекущиеДела.Сортировать("ПорядокДоп,Порядок");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПорядоДопНаКлиенте(пВыполнено,пДатаВыполнения,пНаДату) 
	//Такая же функция есть в модуле обработки
	пПорядокДоп = 10;
	Если НЕ пВыполнено Тогда
		пПорядокДоп = 0;
	Иначе
		Если НачалоДня(пДатаВыполнения) <> пНаДату Тогда
			пПорядокДоп = 1;
		Иначе
			пПорядокДоп = 2;
		Конецесли;
	Конецесли;
	Возврат пПорядокДоп;
КонецФункции 

&НаКлиенте
Процедура КомандаПоказатьДопСведения(Команда)
	ПоказыватьДопСведения = НЕ ПоказыватьДопСведения;
	Элементы.ТЧТекущиеДелаКомандаПоказатьДопСведения.Пометка = ПоказыватьДопСведения;
	УстановитьВидимостьДоступность();
КонецПроцедуры


&НаКлиенте
Процедура ТЧТекущиеДелаТекстСодержанияПриИзменении(Элемент)
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаПредыдущийПериод(Команда)
	НаДатуНовая = ПолучитьНаДатуНовая(-1);
	ИзменитьНаДату(НаДатуНовая);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНаДату(Команда)
	НаДатуНовая = НачалоДня(ТекущаяДата());
	ИзменитьНаДату(НаДатуНовая);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокКомандаНаДату()
	пЗаголовок = "";
	Если НачалоДня(Объект.НаДату) = НачалоДня(ТекущаяДата()) Тогда
		пЗаголовок = "Сегодня";
	Иначе
		пЗаголовок = Формат(Объект.НаДату,"ДФ='dd.MM ддд'");
	Конецесли;
	Элементы.ТЧТекущиеДелаКомандаНаДату.Заголовок = пЗаголовок;
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьНаДату(НаДатуНовая)
	Объект.НаДату = НаДатуНовая;
	Объект.НаДатуКонецДня = КонецДня(Объект.НаДату);
	ОбновитьТекущиеДелаНаСервере();
	ОбновитьЗаголовокКомандаНаДату();	
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьНаДатуНовая(Сдвиг) 
	Если Сдвиг =  1 Тогда
		НаДатуНовая = НачалоДня(КонецДня(Объект.НаДату) + 1);
	Иначе
		НаДатуНовая = НачалоДня(Объект.НаДату - 1);
	Конецесли;
	//Если НаДатуНовая > ТекущаяДата() Тогда
	//	НаДатуНовая = Объект.НаДату;	
	//Конецесли;
	
	Возврат НаДатуНовая;
КонецФункции 

&НаКлиенте
Процедура КомандаСледующийПериод(Команда)
	НаДатуНовая = ПолучитьНаДатуНовая(1);
	ИзменитьНаДату(НаДатуНовая);
КонецПроцедуры

&НаКлиенте
Процедура ТЧТекущиеДелаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		СтрокаТЧТекущиеДела = Элемент.ТекущиеДанные;
		СтрокаТЧТекущиеДела.ДатаСоздания = ТекущаяДата();
		СтрокаТЧТекущиеДела.ДатаТекущегоДела = СтрокаТЧТекущиеДела.ДатаСоздания;
		СтрокаТЧТекущиеДела.Порядок = СтрокаТЧТекущиеДела.НомерСтроки;
	Конецесли;
КонецПроцедуры

Процедура УстановитьВидимостьДоступностьПочтаПодробно()
	
	Элементы.ДеревоПисем.ПодчиненныеЭлементы.ДеревоПисемГруппаВертикально.ПодчиненныеЭлементы.ДеревоПисемСодержание.Видимость = Элементы.ПоказатьСкрытьПодробно.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьПодробно(Команда)
	Элементы.ПоказатьСкрытьПодробно.Пометка = НЕ Элементы.ПоказатьСкрытьПодробно.Пометка;
	УстановитьВидимостьДоступностьПочтаПодробно();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Обновление_Дерева_Почты()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя = "ГруппаПочта" Тогда
		ОбновитьСписокПисемКоманда();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПапокПриАктивизацииЯчейки(Элемент)
	
	Если УстановленаСтраницаПочта Тогда
		
		УстановленаСтраницаПочта = Ложь;
		
	Иначе
		
		ОбновитьСписокПисемКоманда();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДелВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Элемент.ТекущиеДанные.Задача);
КонецПроцедуры


#КонецОбласти
#КонецОбласти




