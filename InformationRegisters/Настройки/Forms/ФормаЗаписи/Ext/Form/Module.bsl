
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриИзмененииРежимаНастроек();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	ФлагПочты = Запись.ФормироватьПочтовыеФайлы;
	ФлагОперативнойОбработкиЛогов = Запись.ОперативныйРежимПолученияИнформацииОЗапросах;
	
	Элементы.ЭлектроннаяПочтаСервиса.Видимость = ФлагПочты;
	Элементы.ПутьКФайламПочтовыхВложений.Видимость = ФлагПочты;
	Элементы.WSDL_УдаленноеПодключение.Видимость = НЕ ФлагПочты;
	Элементы.WSDL_Пользователь.Видимость = НЕ ФлагПочты;
	Элементы.WSDL_Пароль.Видимость = НЕ ФлагПочты;
	
	
	Элементы.ДлительностьЗапросовПорог2.Видимость = НЕ ФлагОперативнойОбработкиЛогов;
	Элементы.ДлительностьЗапросовПорог3.Видимость = НЕ ФлагОперативнойОбработкиЛогов;
	Элементы.МетодОбработкиПороговДлительности.Видимость = НЕ ФлагОперативнойОбработкиЛогов;
	
	Элементы.ВключатьПланыЗапросов.Доступность = МожноСобиратьПланыЗапросов(Запись.ТипСУБД); 
	Элементы.ВключатьПланыЗапросов1.Доступность = МожноСобиратьПланыЗапросов(Запись.ТипСУБД); 
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьПочтовыеФайлыПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОперативныйРежимПолученияИнформацииОЗапросахПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПроверкаВключенияМониторинга();
	
	Оповестить("ЗаписьНастроек");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискПутей(Команда)
	
	ВыполнитьПоискПутей3НаСервере();
		
	Если Элементы.ПутьККонфигурационномуФайлу.СписокВыбора.Количество() > 0 
		и НЕ КаталогСуществуетНаСервере(Запись.ПутьККонфигурационномуФайлу) Тогда
		Запись.ПутьККонфигурационномуФайлу = Элементы.ПутьККонфигурационномуФайлу.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КаталогСуществуетНаСервере(Путь)
	
	Результат = Ложь;
	
	Попытка
		Каталог = Новый Файл(Путь);
		Если Каталог.Существует() Тогда
			Результат = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПоискПутейНаСервере()
	
	Элементы.ПутьККонфигурационномуФайлу.СписокВыбора.Очистить();
	
	Локатор = Новый COMОбъект("WbemScripting.SWbemLocator");
	
	// подключаемся к службе WMI:
	СлужбаWMI = Локатор.ConnectServer();
	// метод InstancesOf  предназначен для получения коллекции экземпляров указанного в скобках класса:
	Программы = СлужбаWMI.InstancesOf("Win32_Product");
	
	СписокПутей = Новый Массив;
	
	Для Каждого Программа из Программы Цикл
		
		Название = "" + Программа.Name;
		Если Найти(Название, "1C:Предприятие") = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПутьУстановки = Программа.InstallLocation; 
		// Путь - Строка вида: "C:\Program Files (x86)\1cv8\8.3.5.1146\"
		
		ФайлРАгент = Новый Файл(ПутьУстановки + "bin\ragent.exe");
		Если Не ФайлРАгент.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		// Поднимемся на уровень вверх
		ДлинаСтроки = СтрДлина(ПутьУстановки);
		поз = 0;
		Для к = 1 по ДлинаСтроки Цикл
			Если сред(ПутьУстановки,ДлинаСтроки-к,1) = "\" Тогда
				поз = ДлинаСтроки-к;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если поз > 0 Тогда
			ОбщийКаталог1С = Лев(ПутьУстановки,ДлинаСтроки-к);
		Иначе
			Продолжить;
		КонецЕсли;
		
		КаталогКонф = ОбщийКаталог1С + "Conf";
		Каталог = Новый Файл(КаталогКонф);
		Если Каталог.Существует() Тогда
			Если Элементы.ПутьККонфигурационномуФайлу.СписокВыбора.НайтиПоЗначению(КаталогКонф) = Неопределено Тогда
				Элементы.ПутьККонфигурационномуФайлу.СписокВыбора.Добавить(КаталогКонф);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.ПутьККонфигурационномуФайлу.СписокВыбора.Количество() = 0 Тогда
		Сообщить("Путь к конфигурационному файлу на сервере не найден");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустой() Тогда
		
		КаталогФайловТЖ = "c:\Users\Public\Documents\";
		Каталог = Новый Файл(КаталогФайловТЖ);
		Если Каталог.Существует() Тогда
			Запись.ПутьКФайламЛоговТЖ = КаталогФайловТЖ + "1C_Log";
		КонецЕсли;
		
		ВыполнитьПоискПутей3НаСервере();
		Если Элементы.ПутьККонфигурационномуФайлу.СписокВыбора.Количество() > 0 Тогда
			Запись.ПутьККонфигурационномуФайлу = Элементы.ПутьККонфигурационномуФайлу.СписокВыбора[0].Значение;
		КонецЕсли;
		
	КонецЕсли;
	//ПутьКФайламТЖ = КаталогДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныеНастройки(Команда)
	РежимРасширенныхНастроек = НЕ РежимРасширенныхНастроек;
	ПриИзмененииРежимаНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаНастроек()
	
	Элементы.ФормаРасширенныеНастройки.Пометка = РежимРасширенныхНастроек;
	
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ?(РежимРасширенныхНастроек, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
	Элементы.ГруппаУпрощенныеНастройки.Видимость = Не РежимРасширенныхНастроек;
	Элементы.ГруппаОбщиеНастройки.Видимость = РежимРасширенныхНастроек;
	Элементы.ГруппаАнализДолгихЗапросов.Видимость = РежимРасширенныхНастроек;
	Элементы.ГруппаСобытияТЖ.Видимость = РежимРасширенныхНастроек;
	Элементы.ПараметрыПодключенияКВэбСервисам.Видимость = РежимРасширенныхНастроек;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискПутей3НаСервере()
	
	СписокПутей = Новый Массив;
	
	КаталогЗапуска = КаталогПрограммы();
	
	КонфКФГ = Новый Файл(КаталогЗапуска + "conf\conf.cfg");
	Если НЕ КонфКФГ.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(КаталогЗапуска + "conf\conf.cfg");
	
	ПутьЛогКФГ = КонфКФГ;
	Для к = 1 По Текст.КоличествоСтрок() Цикл
		ОчереднаяСтрока = СокрЛП(Текст.ПолучитьСтроку(к));
		Если ВРег(Лев(ОчереднаяСтрока,12)) = ВРег("ConfLocation") Тогда
			поз = Найти(ОчереднаяСтрока,"=");
			ПутьЛогКФГ = СокрЛП(Сред(ОчереднаяСтрока,поз+1));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СписокПутей.Добавить(ПутьЛогКФГ);
	
	Элементы.ПутьККонфигурационномуФайлу.СписокВыбора.ЗагрузитьЗначения(СписокПутей);	
	Элементы.ПутьККонфигурационномуФайлу1.СписокВыбора.ЗагрузитьЗначения(СписокПутей);	

	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайламЛоговТЖНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталогЛоговТЖ();	
КонецПроцедуры

&наКлиенте
Процедура ВыбратьКаталогЛоговТЖ()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = Запись.ПутьКФайламЛоговТЖ;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Запись.ПутьКФайламЛоговТЖ = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПутьККонфигурационномуФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталогКонфигурационногоФайлаТЖ();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталогКонфигурационногоФайлаТЖ()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = Запись.ПутьККонфигурационномуФайлу;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Запись.ПутьККонфигурационномуФайлу = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗарегистрироватьИдентификатор(Команда)
	
	АдресЭлектроннойПочты = "";
	ВвестиСтроку(АдресЭлектроннойПочты, "Укажите адрес электронной почты. На указанный адрес будет отправлен пароль вашей учетной записи в сервисах Gilev.ru");

	Если НЕ ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗапросРегистрации(АдресЭлектроннойПочты);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросРегистрации(АдресЭлектроннойПочты)
	
	Попытка
		WS_Определение = Новый WSОпределения("http://localhost/web_service_GetID_ignatiev/ws/GetIDGilevRu.1cws?wsdl", "", "");
	Исключение
		Возврат;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Прокси = Новый WSПрокси(WS_Определение, 
	"www.gilev.ru",
	"GetIDGilevRu",
	"GetIDGilevRuSoap");
	
	Идентификатор = Запись.ИденификаторБазы;
	//EMail = "q@q.ru";
	Отказ = Ложь;
	Сообщение = "";
	
	Прокси.GetIDGilevRu(Идентификатор,АдресЭлектроннойПочты,Отказ,Сообщение);
	
	Если НЕ Отказ Тогда
		Если НЕ ЗначениеЗаполнено(Запись.ИденификаторБазы) Тогда
			Запись.ИденификаторБазы = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Сообщить(Сообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипСУБДПриИзменении(Элемент)
	Если (НЕ МожноСобиратьПланыЗапросов(Элемент.ВыделенныйТекст)) И Запись.ВключатьПланыЗапросов Тогда
		Запись.ВключатьПланыЗапросов=Ложь;
	КонецЕсли;
	Элементы.ВключатьПланыЗапросов.Доступность = МожноСобиратьПланыЗапросов(Запись.ТипСУБД); 
	Элементы.ВключатьПланыЗапросов1.Доступность = МожноСобиратьПланыЗапросов(Запись.ТипСУБД); 
КонецПроцедуры

&НаСервере
Функция МожноСобиратьПланыЗапросов(Значение)
	Если (СокрЛП(Значение) = СокрЛП(Перечисления.ТипСУБД.DB2) ИЛИ
		СокрЛП(Значение) = СокрЛП(Перечисления.ТипСУБД.Oracle)) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
